(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
// Entry point to client-side app.

'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _reactRouter2 = _interopRequireDefault(_reactRouter);

var _backbone = (window.Backbone);

var _backbone2 = _interopRequireDefault(_backbone);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _modelsShape_fileJs = require('./../../models/shape_file.js');

var _modelsShape_fileJs2 = _interopRequireDefault(_modelsShape_fileJs);

var _routesClientJsx = require('./../../routes/client.jsx');

var _routesClientJsx2 = _interopRequireDefault(_routesClientJsx);

/*
 * Create radio object with the same fields as a Marionette Application object.
 * This is a temporary setup to support the Marionette transition.
 */
function createRadio() {
	var radio = {};
	radio.vent = new _backbone2['default'].Wreqr.EventAggregator();
	radio.reqres = new _backbone2['default'].Wreqr.RequestResponse();
	radio.commands = new _backbone2['default'].Wreqr.Commands();
	return radio;
}

function start() {
	var isFirstRoute = true;

	var radio = createRadio();

	// Developer signature :).
	console.log('Hi, Mom!');

	_reactRouter2['default'].run(_routesClientJsx2['default'], _reactRouter2['default'].HistoryLocation, function (Root, state) {
		_react2['default'].render(_react2['default'].createElement(Root, { radio: radio, state: state }), $('#site')[0]);
	});
};

global.Comp = {
	start: start
};

global.M = {
	shapeFile: _modelsShape_fileJs2['default']
};

exports['default'] = start;
module.exports = exports['default'];

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./../../models/shape_file.js":72,"./../../routes/client.jsx":75,"babel-runtime/helpers/interop-require-default":94,"classnames":167,"react":364,"react-router":195}],2:[function(require,module,exports){
// Base model extending to all CRUD components. Includes utilities to build up forms (no significant logic).

'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _generalStaticJsx = require('./../general/static.jsx');

var _generalStaticJsx2 = _interopRequireDefault(_generalStaticJsx);

var Base = (function (_Static) {
	_inherits(Base, _Static);

	function Base() {
		_classCallCheck(this, Base);

		_get(Object.getPrototypeOf(Base.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(Base, [{
		key: 'render',

		/*
   * Customize on subclass.
   *
   */
		value: function render() {
			return _react2['default'].createElement('div', null);
		}

		/*
   * Customize on subclass.
   *
   */
	}, {
		key: 'getResourceConstructor',
		value: function getResourceConstructor() {
			return Backbone.Model;
		}

		/*
   *
   *
   */
	}, {
		key: 'getResourceName',
		value: function getResourceName() {
			var Model = this.getResourceConstructor();
			return Model.prototype.resourceName;
		}
	}]);

	return Base;
})(_generalStaticJsx2['default']);

exports['default'] = Base;
module.exports = exports['default'];

},{"./../general/static.jsx":27,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"react":364}],3:[function(require,module,exports){
// Base class for a modal window that pops up when a model is saved.

'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _generalModalJsx = require('./../general/modal.jsx');

var _generalModalJsx2 = _interopRequireDefault(_generalModalJsx);

var BaseStatusModal = (function (_Modal) {
	_inherits(BaseStatusModal, _Modal);

	/*
  *
  *
  */

	function BaseStatusModal(props) {
		_classCallCheck(this, BaseStatusModal);

		_get(Object.getPrototypeOf(BaseStatusModal.prototype), 'constructor', this).call(this, props);
	}

	/*
  *
  *
  */

	_createClass(BaseStatusModal, [{
		key: 'renderContent',
		value: function renderContent() {
			if (this.props.status === 'success') {
				return this.renderSuccessContent();
			}
			if (this.props.status === 'failure') {
				return this.renderFailureContent();
			}
			return this.renderPendingContent();
		}

		/*
   *
   *
   */
	}, {
		key: 'renderSuccessContent',
		value: function renderSuccessContent() {
			var resourceName = this.props.model.name;
			return _react2['default'].createElement(
				'div',
				null,
				_react2['default'].createElement(
					'p',
					{ className: 'title' },
					'Save successful'
				),
				_react2['default'].createElement(
					'ul',
					null,
					this.renderLinks()
				)
			);
		}

		/*
   *
   *
   */
	}, {
		key: 'renderLinks',
		value: function renderLinks() {
			var _this = this;

			var urls = [{ name: 'edit', url: this.props.model.getEditUrl() }, { name: 'view', url: this.props.model.getViewUrl() }];
			return urls.map(function (url, i) {
				if (!url.url) {
					return;
				}
				return _react2['default'].createElement(
					'li',
					{ key: i },
					_react2['default'].createElement(
						'a',
						{ className: 'link', href: url.url },
						url.name + ' ' + _this.props.model.resourceName
					)
				);
			});
		}

		/*
   *
   *
   */
	}, {
		key: 'renderFailureContent',
		value: function renderFailureContent() {
			return _react2['default'].createElement(
				'div',
				null,
				_react2['default'].createElement(
					'p',
					{ className: 'title' },
					'Save failed'
				),
				_react2['default'].createElement(
					'ul',
					null,
					_react2['default'].createElement(
						'li',
						null,
						_react2['default'].createElement(
							'a',
							{ className: 'link', onClick: this.reactivateForm.bind(this), href: '/' },
							'Keep Editing'
						)
					)
				)
			);
		}

		/*
   *
   *
   */
	}, {
		key: 'renderPendingContent',
		value: function renderPendingContent() {
			return _react2['default'].createElement(
				'div',
				null,
				_react2['default'].createElement(
					'p',
					{ className: 'title' },
					'Saving...'
				)
			);
		}

		/*
   *
   *
   */
	}, {
		key: 'reactivateForm',
		value: function reactivateForm(e) {
			e.preventDefault();
			this.props.reactivateForm();
		}
	}]);

	return BaseStatusModal;
})(_generalModalJsx2['default']);

exports['default'] = BaseStatusModal;
module.exports = exports['default'];

},{"./../general/modal.jsx":23,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"react":364}],4:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _generalStaticJsx = require('./../general/static.jsx');

var _generalStaticJsx2 = _interopRequireDefault(_generalStaticJsx);

var _formRootJsx = require('./../form/root.jsx');

var _formRootJsx2 = _interopRequireDefault(_formRootJsx);

var _generalLoadingJsx = require('./../general/loading.jsx');

var _generalLoadingJsx2 = _interopRequireDefault(_generalLoadingJsx);

var _underscore = (window._);

var _underscore2 = _interopRequireDefault(_underscore);

var _baseJs = require('./base.js');

var _baseJs2 = _interopRequireDefault(_baseJs);

var _base_status_modalJs = require('./base_status_modal.js');

var _base_status_modalJs2 = _interopRequireDefault(_base_status_modalJs);

var _reactRouter = require('react-router');

var FormModal = (function (_BaseStatusModal) {
	_inherits(FormModal, _BaseStatusModal);

	function FormModal(props) {
		_classCallCheck(this, FormModal);

		_get(Object.getPrototypeOf(FormModal.prototype), 'constructor', this).call(this, props);
	}

	_createClass(FormModal, [{
		key: 'renderSuccessContent',
		value: function renderSuccessContent() {
			var resourceName = this.props.model.name;
			return _react2['default'].createElement(
				'div',
				null,
				_react2['default'].createElement(
					'p',
					{ className: 'title' },
					'Delete successful'
				),
				_react2['default'].createElement(
					'ul',
					null,
					_react2['default'].createElement(
						'li',
						null,
						_react2['default'].createElement(
							_reactRouter.Link,
							{ className: 'link', to: '/menu' },
							'View all ' + name + 's'
						)
					)
				)
			);
		}
	}, {
		key: 'renderFailureContent',
		value: function renderFailureContent() {
			return _react2['default'].createElement(
				'div',
				null,
				_react2['default'].createElement(
					'p',
					{ className: 'title' },
					'Delete failed'
				),
				_react2['default'].createElement(
					'ul',
					null,
					_react2['default'].createElement(
						'li',
						null,
						_react2['default'].createElement(
							'a',
							{ className: 'link', onClick: this.reactivateForm.bind(this), href: '/' },
							'Keep Editing'
						)
					)
				)
			);
		}
	}, {
		key: 'renderPendingContent',
		value: function renderPendingContent() {
			return _react2['default'].createElement(
				'div',
				null,
				_react2['default'].createElement(
					'p',
					{ className: 'title' },
					'Deleting...'
				)
			);
		}
	}]);

	return FormModal;
})(_base_status_modalJs2['default']);

var DeleteBase = (function (_Base) {
	_inherits(DeleteBase, _Base);

	function DeleteBase(props) {
		_classCallCheck(this, DeleteBase);

		_get(Object.getPrototypeOf(DeleteBase.prototype), 'constructor', this).call(this, props);
		this.state = {
			saveResponseStatus: undefined
		};
	}

	_createClass(DeleteBase, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'div',
				{ className: 'atl atl--explainer' },
				_react2['default'].createElement(
					'div',
					{ className: 'atl__main fill-parent', onScroll: this.setStickyPageNav.bind(this) },
					this.renderTitleBar('solid'),
					this.renderContentBar()
				),
				this.renderModal()
			);
		}
	}, {
		key: 'renderModal',
		value: function renderModal() {
			if (this.state.saveResponseStatus) {
				return _react2['default'].createElement(FormModal, {
					model: this.state.model,
					status: this.state.saveResponseStatus,
					reactivateForm: this.reactivateForm.bind(this)
				});
			}
		}
	}, {
		key: 'renderTitleBarContent',
		value: function renderTitleBarContent() {
			return _react2['default'].createElement(
				'div',
				{ className: 'atl__title-bar__content' },
				_react2['default'].createElement(
					'h1',
					{ className: 'title' },
					'Delete ' + this.getResourceName()
				),
				_react2['default'].createElement(
					'ul',
					null,
					_react2['default'].createElement(
						'li',
						null,
						_react2['default'].createElement(
							_reactRouter.Link,
							{ className: 'icon-button', to: this.getViewUrl(), target: '_blank' },
							_react2['default'].createElement('div', { className: 'icon-button__icon bg-img-link--off-white' }),
							_react2['default'].createElement(
								'div',
								{ className: 'icon-button__text' },
								'View ' + this.getResourceName()
							)
						),
						_react2['default'].createElement(
							_reactRouter.Link,
							{ className: 'icon-button', to: this.getEditUrl(), target: '_blank' },
							_react2['default'].createElement('div', { className: 'icon-button__icon bg-img-link--off-white' }),
							_react2['default'].createElement(
								'div',
								{ className: 'icon-button__text' },
								'Edit ' + this.getResourceName()
							)
						)
					)
				)
			);
		}
	}, {
		key: 'getViewUrl',
		value: function getViewUrl() {
			if (!this.state.model) {
				return '/';
			}
			return this.state.model.getViewUrl();
		}
	}, {
		key: 'getEditUrl',
		value: function getEditUrl() {
			if (!this.state.model) {
				return '/';
			}
			return this.state.model.getEditUrl();
		}
	}, {
		key: 'renderPageNavContent',
		value: function renderPageNavContent() {
			return _react2['default'].createElement(
				'div',
				null,
				_react2['default'].createElement(
					'p',
					null,
					'I navigate the page!'
				)
			);
		}
	}, {
		key: 'renderPageContent',
		value: function renderPageContent() {
			var bulk = this.state.model ? this.renderSummary() : _react2['default'].createElement(_generalLoadingJsx2['default'], null);
			return _react2['default'].createElement(
				'div',
				{ className: 'static-content' },
				bulk
			);
		}
	}, {
		key: 'renderSummary',
		value: function renderSummary() {
			return _react2['default'].createElement(
				'div',
				null,
				_react2['default'].createElement(
					'p',
					null,
					'You are about to irreversibly delete this project. You may be able to get it back from the database backups, but I sure would not count on that.'
				),
				_react2['default'].createElement(
					'p',
					null,
					'Remember, you can always make the project invisible to the public by visiting its edit link.'
				),
				_react2['default'].createElement(
					'p',
					null,
					'If you are still positive, hit the link below:'
				),
				_react2['default'].createElement(
					'a',
					{ onClick: this.handleDeleteClick.bind(this), href: '#', className: 'link' },
					'Sure?'
				)
			);
		}
	}, {
		key: 'reactivateForm',
		value: function reactivateForm() {
			this.setState({ saveResponseStatus: undefined });
		}
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {
			if (!this.state.model) {
				this.fetchModel();
			}
		}
	}, {
		key: 'fetchModel',
		value: function fetchModel() {
			var _this = this;

			if (!this.props.params) {
				return;
			}
			var id = this.props.params.id;
			var Model = this.getResourceConstructor();
			var model = new Model({ id: id });
			model.getClientFetchPromise({ id: id }).then(function (model) {
				_this.setState({ model: model });
			});
		}
	}, {
		key: 'handleDeleteClick',
		value: function handleDeleteClick(e) {
			e.preventDefault();
			this.deleteModel();
		}
	}, {
		key: 'deleteModel',
		value: function deleteModel() {
			var _this2 = this;

			var model = this.state.model;

			this.setState({ saveResponseStatus: 'pending' });

			model.getClientDeletePromise().then(function (res) {
				if (!_underscore2['default'].isObject(res)) {
					res = JSON.parse(res);
				}
				_this2.setState({ saveResponseStatus: res.status });
			}, function (err) {
				_this2.setState({ saveResponseStatus: 'error' });
			});
		}
	}]);

	return DeleteBase;
})(_baseJs2['default']);

DeleteBase.contextTypes = {
	router: _react2['default'].PropTypes.func
};

exports['default'] = DeleteBase;
module.exports = exports['default'];

},{"./../form/root.jsx":8,"./../general/loading.jsx":22,"./../general/static.jsx":27,"./base.js":2,"./base_status_modal.js":3,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"classnames":167,"react":364,"react-router":195}],5:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _reactRouter = require('react-router');

var _save_baseJs = require('./save_base.js');

var _save_baseJs2 = _interopRequireDefault(_save_baseJs);

var EditBase = (function (_SaveBase) {
	_inherits(EditBase, _SaveBase);

	function EditBase(props) {
		_classCallCheck(this, EditBase);

		_get(Object.getPrototypeOf(EditBase.prototype), 'constructor', this).call(this, props);
		this.state = {
			saveResponseStatus: undefined
		};
	}

	_createClass(EditBase, [{
		key: 'getCrudMethodName',
		value: function getCrudMethodName() {
			return 'edit';
		}
	}, {
		key: 'componentWillMount',
		value: function componentWillMount() {
			if (!this.state.model) {
				this.fetchModel();
			}
		}
	}, {
		key: 'fetchModel',
		value: function fetchModel() {
			var _this = this;

			if (!this.props.params) {
				return;
			}
			var id = this.props.params.id;
			var Model = this.getResourceConstructor();
			var model = new Model({ id: id });
			model.getClientFetchPromise({ id: id }).then(function (model) {
				_this.setState({ model: model });
			});
		}
	}, {
		key: 'saveModel',
		value: function saveModel() {
			var _this2 = this;

			var model = this.state.model;

			this.setState({ saveResponseStatus: 'pending' });

			if (model.beforeSave) {
				model.beforeSave();
			}

			model.set('updated_at', new Date().toISOString());

			model.getClientUpdatePromise().then(function (res) {
				res = JSON.parse(res);
				_this2.setState({ saveResponseStatus: res.status });
			}, function (err) {
				_this2.setState({ saveResponseStatus: 'error' });
			});
		}
	}]);

	return EditBase;
})(_save_baseJs2['default']);

EditBase.contextTypes = {
	router: _react2['default'].PropTypes.func
};

exports['default'] = EditBase;
module.exports = exports['default'];

},{"./save_base.js":7,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"classnames":167,"react":364,"react-router":195}],6:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _save_baseJs = require('./save_base.js');

var _save_baseJs2 = _interopRequireDefault(_save_baseJs);

/*
 *
 *
 */

var NewBase = (function (_SaveBase) {
	_inherits(NewBase, _SaveBase);

	/*
  *
  *
  */

	function NewBase(props) {
		_classCallCheck(this, NewBase);

		_get(Object.getPrototypeOf(NewBase.prototype), 'constructor', this).call(this, props);
		this.state = {
			saveResponseStatus: undefined
		};
	}

	/*
  *
  *
  */

	_createClass(NewBase, [{
		key: 'componentWillMount',
		value: function componentWillMount() {
			var Model = this.getResourceConstructor();
			if (!this.state.model) {
				this.setState({ model: new Model() });
			}
		}

		/*
   *
   *
   */
	}, {
		key: 'getCrudMethodName',
		value: function getCrudMethodName() {
			return 'new';
		}

		/*
   *
   *
   */
	}, {
		key: 'getSubmitButtonText',
		value: function getSubmitButtonText() {
			return 'Create ' + this.getResourceName();
		}

		/*
   *
   *
   */
	}, {
		key: 'saveModel',
		value: function saveModel(formData) {
			var _this = this;

			var model = this.state.model;

			// Set status to pending.
			this.setState({ saveResponseStatus: 'pending' });

			// Call before save method on the model.
			if (model.beforeSave) {
				model.beforeSave();
			}

			model.set('created_at', new Date().toISOString());

			// While pending, save form data using the instance method on the model.
			model.getClientSavePromise().then(function (res) {
				console.log(res);
				res = JSON.parse(res);
				model.set('id', res.id);
				_this.setState({ saveResponseStatus: res.status });
			}, function (err) {
				_this.setState({ saveResponseStatus: 'error' });
			});
		}
	}]);

	return NewBase;
})(_save_baseJs2['default']);

exports['default'] = NewBase;
module.exports = exports['default'];

},{"./save_base.js":7,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"classnames":167,"react":364,"react-router":195}],7:[function(require,module,exports){
// This component is used generically for crud forms on any resource.

'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _generalStaticJsx = require('./../general/static.jsx');

var _generalStaticJsx2 = _interopRequireDefault(_generalStaticJsx);

var _formRootJsx = require('./../form/root.jsx');

var _formRootJsx2 = _interopRequireDefault(_formRootJsx);

var _generalLoadingJsx = require('./../general/loading.jsx');

var _generalLoadingJsx2 = _interopRequireDefault(_generalLoadingJsx);

var _baseJs = require('./base.js');

var _baseJs2 = _interopRequireDefault(_baseJs);

var _base_status_modalJs = require('./base_status_modal.js');

var _base_status_modalJs2 = _interopRequireDefault(_base_status_modalJs);

var SaveBaseModal = (function (_BaseStatusModal) {
	_inherits(SaveBaseModal, _BaseStatusModal);

	/*
  *
  *
  */

	function SaveBaseModal(props) {
		_classCallCheck(this, SaveBaseModal);

		_get(Object.getPrototypeOf(SaveBaseModal.prototype), 'constructor', this).call(this, props);
	}

	/*
  *
  *
  */

	/*
  *
  *
  */

	_createClass(SaveBaseModal, [{
		key: 'renderSuccessContent',
		value: function renderSuccessContent() {
			var resourceName = this.props.model.name;
			return _react2['default'].createElement(
				'div',
				null,
				_react2['default'].createElement(
					'p',
					{ className: 'title' },
					'Save successful'
				),
				_react2['default'].createElement(
					'ul',
					null,
					this.renderLinks()
				)
			);
		}

		/*
   *
   *
   */
	}, {
		key: 'renderFailureContent',
		value: function renderFailureContent() {
			return _react2['default'].createElement(
				'div',
				null,
				_react2['default'].createElement(
					'p',
					{ className: 'title' },
					'Save failed'
				),
				_react2['default'].createElement(
					'ul',
					null,
					_react2['default'].createElement(
						'li',
						null,
						_react2['default'].createElement(
							'a',
							{ className: 'link', onClick: this.reactivateForm.bind(this), href: '/' },
							'Keep Editing'
						)
					)
				)
			);
		}

		/*
   *
   *
   */
	}, {
		key: 'renderPendingContent',
		value: function renderPendingContent() {
			return _react2['default'].createElement(
				'div',
				null,
				_react2['default'].createElement(
					'p',
					{ className: 'title' },
					'Saving...'
				)
			);
		}
	}]);

	return SaveBaseModal;
})(_base_status_modalJs2['default']);

var SaveBase = (function (_Base) {
	_inherits(SaveBase, _Base);

	/*
  *
  *
  */

	function SaveBase(props) {
		_classCallCheck(this, SaveBase);

		_get(Object.getPrototypeOf(SaveBase.prototype), 'constructor', this).call(this, props);
		this.state = {
			model: undefined,
			saveResponseStatus: undefined
		};
	}

	/*
  *
  *
  */

	_createClass(SaveBase, [{
		key: 'render',
		value: function render() {
			var style = { 'overflow-y': 'scroll' };
			return _react2['default'].createElement(
				'div',
				{ className: 'atl' },
				_react2['default'].createElement(
					'div',
					{ className: 'atl__main fill-parent', style: style, onScroll: this.setStickyPageNav.bind(this) },
					this.renderTitleBar('solid'),
					this.renderContentBar()
				),
				this.renderModal()
			);
		}

		/*
   *
   *
   */
	}, {
		key: 'renderModal',
		value: function renderModal() {
			if (this.state.saveResponseStatus) {
				return _react2['default'].createElement(SaveBaseModal, {
					model: this.state.model,
					status: this.state.saveResponseStatus,
					reactivateForm: this.reactivateForm.bind(this)
				});
			}
		}

		/*
   *
   *
   */
	}, {
		key: 'renderTitleBarContent',
		value: function renderTitleBarContent() {
			return _react2['default'].createElement(
				'div',
				{ className: 'atl__title-bar__content' },
				_react2['default'].createElement(
					'h1',
					{ className: 'title' },
					this.getCrudMethodName() + ' ' + this.getResourceName()
				),
				_react2['default'].createElement(
					'ul',
					null,
					_react2['default'].createElement(
						'li',
						null,
						'Updated: '
					)
				)
			);
		}

		/*
   *
   *
   */
	}, {
		key: 'renderPageNavContent',
		value: function renderPageNavContent() {
			return _react2['default'].createElement(
				'div',
				null,
				_react2['default'].createElement(
					'p',
					null,
					'Later on, we can put things here that help navigate the entry form.'
				)
			);
		}

		/*
   *
   *
   */
	}, {
		key: 'renderPageContent',
		value: function renderPageContent() {
			var isFormEnabled = this.state.saveResponseStatus == null;
			if (!this.state.model) {
				return _react2['default'].createElement(_generalLoadingJsx2['default'], null);
			}
			return _react2['default'].createElement(
				'div',
				{ className: 'static-content' },
				_react2['default'].createElement(_formRootJsx2['default'], {
					model: this.state.model,
					isEnabled: isFormEnabled,
					submitButtonText: this.getSubmitButtonText(),
					onSubmit: this.saveModel.bind(this)
				})
			);
		}

		// Define on subclass.
	}, {
		key: 'componentWillMount',
		value: function componentWillMount() {}
		// obtain project model, either by creating a new one or fetching one from the db

		// Define on subclass.

	}, {
		key: 'getCrudMethodName',
		value: function getCrudMethodName() {
			return 'new';
		}

		// Define on subclass.
	}, {
		key: 'getSubmitButtonText',
		value: function getSubmitButtonText() {
			return 'Submit';
		}

		// Define on subclass.
	}, {
		key: 'saveModel',
		value: function saveModel(formData) {
			var _this = this;

			var model = this.state.model;

			// Set status to pending.
			this.setState({ saveResponseStatus: 'pending' });

			// Call before save method on the model.
			model.beforeSave();

			// While pending, save form data using the instance method on the model.
			model.getClientSavePromise().then(function (res) {
				res = JSON.parse(res);
				model.set('id', res.id);
				_this.setState({ saveResponseStatus: res.status });
			}, function (err) {
				_this.setState({ saveResponseStatus: 'error' });
			});
		}

		/*
   *
   *
   */
	}, {
		key: 'reactivateForm',
		value: function reactivateForm() {
			this.setState({ saveResponseStatus: undefined });
		}
	}]);

	return SaveBase;
})(_baseJs2['default']);

exports['default'] = SaveBase;
module.exports = exports['default'];

},{"./../form/root.jsx":8,"./../general/loading.jsx":22,"./../general/static.jsx":27,"./base.js":2,"./base_status_modal.js":3,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"classnames":167,"react":364,"react-router":195}],8:[function(require,module,exports){
// Form component backed by a Backbone model.

'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _underscore = (window._);

var _underscore2 = _interopRequireDefault(_underscore);

var _subcomponentsIndexJs = require('./subcomponents/index.js');

var Subcomponents = _interopRequireWildcard(_subcomponentsIndexJs);

var Form = (function (_React$Component) {
	_inherits(Form, _React$Component);

	/*
  *
  *
  */

	function Form(props) {
		_classCallCheck(this, Form);

		_get(Object.getPrototypeOf(Form.prototype), 'constructor', this).call(this, props);
		this.state = {};
	}

	/*
  *
  *
  */

	_createClass(Form, [{
		key: 'render',
		value: function render() {
			var style = this.props.isEnabled ? {} : { opacity: 0.5 };
			return _react2['default'].createElement(
				'form',
				{
					onSubmit: this.sendFormDataToParent.bind(this),
					style: style
				},
				this.renderFormComponents(),
				_react2['default'].createElement('input', {
					type: 'submit',
					disabled: !this.props.isEnabled,
					value: this.props.submitButtonText || 'Submit Form'
				})
			);
		}

		/*
   *
   *
   */
	}, {
		key: 'renderFormComponents',
		value: function renderFormComponents() {
			var _this = this;

			return this.props.model.fields.map(function (field, i) {
				var FormComp = Subcomponents[field.formComponentName] || Subcomponents.Text,
				    id = field.formComponentProps.id,
				    props = field.formComponentProps || {};
				return _react2['default'].createElement(FormComp, _extends({}, props, {
					key: i,
					isEnabled: _this.props.isEnabled,
					saveDataOnParent: _this.saveDataFromChild.bind(_this),
					initialValue: _this.props.model.get(id)
				}));
			});
			return _react2['default'].createElement('input', null);
		}

		/*
   *
   *
   */
	}, {
		key: 'saveDataFromChild',
		value: function saveDataFromChild(childData) {

			var model = this.props.model,
			    key = childData.id,
			    currentValue = this.props.model.get(key),
			    incomingValue = childData.value;

			// If the data field is an array, add the incoming value if the array does not contain it but remove it if it does.
			// This behavior is specific to the ForeignCollectionCheckBox subcomponent.
			if (_underscore2['default'].isArray(currentValue)) {
				var index = currentValue.indexOf(incomingValue);
				if (index < 0) {
					currentValue.push(incomingValue);
				} else {
					currentValue.splice(index, 1);
				}
				model.set(key, currentValue);
			} else {
				model.set(key, incomingValue);
			}

			this.forceUpdate();
		}

		/*
   * Run method passed down from parent.
   *
   */
	}, {
		key: 'sendFormDataToParent',
		value: function sendFormDataToParent(e) {
			e.preventDefault();
			this.props.onSubmit(this.props.model);
		}
	}]);

	return Form;
})(_react2['default'].Component);

exports['default'] = Form;
module.exports = exports['default'];

},{"./subcomponents/index.js":14,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/extends":91,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"babel-runtime/helpers/interop-require-wildcard":95,"react":364}],9:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var Base = (function (_React$Component) {
	_inherits(Base, _React$Component);

	function Base() {
		_classCallCheck(this, Base);

		_get(Object.getPrototypeOf(Base.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(Base, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement('div', null);
		}
	}, {
		key: 'shouldComponentUpdate',
		value: function shouldComponentUpdate() {
			return true;
		}
	}]);

	return Base;
})(_react2['default'].Component);

exports['default'] = Base;
module.exports = exports['default'];

},{"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"react":364}],10:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _baseJsx = require('./base.jsx');

var _baseJsx2 = _interopRequireDefault(_baseJsx);

var _generalLoadingJsx = require('./../../general/loading.jsx');

var _generalLoadingJsx2 = _interopRequireDefault(_generalLoadingJsx);

var CKEditor = (function (_Base) {
	_inherits(CKEditor, _Base);

	function CKEditor(props) {
		_classCallCheck(this, CKEditor);

		_get(Object.getPrototypeOf(CKEditor.prototype), 'constructor', this).call(this, props);
		this.editorBasePath = '/assets/vendor/ckeditor/';
	}

	_createClass(CKEditor, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'div',
				{ className: 'form__wrapper' },
				_react2['default'].createElement(
					'label',
					{ 'for': this.props.id },
					this.props.labelText
				),
				_react2['default'].createElement(
					'p',
					{ className: 'form__hint' },
					this.props.hint
				),
				_react2['default'].createElement('textarea', {
					name: this.props.id,
					id: this.props.id,
					disabled: !this.props.isEnabled,
					value: this.props.initialValue,
					placeholder: this.props.placeholder
				})
			);
		}
	}, {
		key: 'configureEditor',
		value: function configureEditor() {
			CKEDITOR.basePath = this.editorBasePath;
			CKEDITOR.config.allowedContent = true;
			CKEDITOR.config.format_tags = 'p;h1;h2;h3;h4';
			CKEDITOR.config.format_h4 = { element: 'h4', attributes: { 'class': 'Notes under tables' } };
			CKEDITOR.config.toolbar = [['Source', '-', 'Undo', 'Redo', 'Cut', 'Copy', 'Paste', '-', 'Find', 'Replace', 'Timestamp'], ['Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript', '-', 'NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', 'Blockquote', '-', 'Link', 'Unlink', '-', 'Format', '-', 'TextColor', 'BGColor']];
			CKEDITOR.config.height = '500px';
		}
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {
			var _this = this;

			$().ensureScript('CKEDITOR', this.editorBasePath + 'ckeditor.js', function () {
				_this.configureEditor();
				_this.instance = CKEDITOR.replace(_this.props.id);
				_this.instance.on('key', function (e) {
					_this.props.saveDataOnParent({
						id: _this.props.id,
						value: _this.instance.getData()
					});
				});
			});
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			this.instance.destroy();
		}
	}]);

	return CKEditor;
})(_baseJsx2['default']);

exports['default'] = CKEditor;
module.exports = exports['default'];

},{"./../../general/loading.jsx":22,"./base.jsx":9,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"react":364}],11:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _baseJsx = require('./base.jsx');

var _baseJsx2 = _interopRequireDefault(_baseJsx);

var ForeignCollectionCheckBox = (function (_Base) {
	_inherits(ForeignCollectionCheckBox, _Base);

	function ForeignCollectionCheckBox(props) {
		_classCallCheck(this, ForeignCollectionCheckBox);

		_get(Object.getPrototypeOf(ForeignCollectionCheckBox.prototype), 'constructor', this).call(this, props);
	}

	/*
  *
  *
  */

	_createClass(ForeignCollectionCheckBox, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'div',
				{ className: 'form__wrapper' },
				_react2['default'].createElement(
					'label',
					{ 'for': this.props.id },
					this.props.labelText
				),
				_react2['default'].createElement(
					'p',
					{ className: 'form__hint' },
					this.props.hint
				),
				this.renderOptions()
			);
		}

		/*
   *
   *
   */
	}, {
		key: 'renderOptions',
		value: function renderOptions() {
			var _this = this;

			return this.props.foreignCollection.map(function (foreignModel, i) {
				var option = foreignModel.get('id'),
				    isChecked = _this.isOptionChecked(option, i);
				return _react2['default'].createElement(
					'div',
					{ className: 'form__radio', key: i },
					_react2['default'].createElement('input', {
						type: 'checkbox',
						name: _this.props.id,
						id: _this.props.id + '-opt-' + i,
						disabled: !_this.props.isEnabled,
						checked: isChecked,
						onChange: _this.saveDataOnParent.bind(_this),
						value: option
					}),
					_react2['default'].createElement(
						'p',
						null,
						foreignModel.get('name')
					)
				);
			});
		}

		/*
   *
   *
   */
	}, {
		key: 'isOptionChecked',
		value: function isOptionChecked(option, i) {
			// ! initialValue is an array !
			if (this.props.initialValue) {
				return this.props.initialValue.indexOf(option) > -1;
			}
			return i === 0;
		}

		/*
   *
   *
   */
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {
			// If there was no initial value passed to the component, pass back the first option to the parent.
			if (!this.props.initialValue) {
				this.props.saveDataOnParent({
					id: this.props.id,
					value: [this.props.foreignCollection.models[0].get('id')]
				});
			}
		}

		/*
   *
   *
   */
	}, {
		key: 'saveDataOnParent',
		value: function saveDataOnParent(e) {
			console.log(e.target.value);
			this.props.saveDataOnParent({
				id: this.props.id,
				value: e.target.value
			});
		}
	}]);

	return ForeignCollectionCheckBox;
})(_baseJsx2['default']);

exports['default'] = ForeignCollectionCheckBox;
module.exports = exports['default'];

},{"./base.jsx":9,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"react":364}],12:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _baseJsx = require('./base.jsx');

var _baseJsx2 = _interopRequireDefault(_baseJsx);

var ForeignCollectionRadio = (function (_Base) {
	_inherits(ForeignCollectionRadio, _Base);

	function ForeignCollectionRadio(props) {
		_classCallCheck(this, ForeignCollectionRadio);

		_get(Object.getPrototypeOf(ForeignCollectionRadio.prototype), 'constructor', this).call(this, props);
	}

	_createClass(ForeignCollectionRadio, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'div',
				{ className: 'form__wrapper' },
				_react2['default'].createElement(
					'label',
					{ 'for': this.props.id },
					this.props.labelText
				),
				_react2['default'].createElement(
					'p',
					{ className: 'form__hint' },
					this.props.hint
				),
				this.renderOptions()
			);
		}
	}, {
		key: 'renderOptions',
		value: function renderOptions() {
			var _this = this;

			return this.props.foreignCollection.map(function (foreignModel, i) {
				var option = foreignModel.get('id'),
				    isChecked = _this.isOptionChecked(option, i);
				return _react2['default'].createElement(
					'div',
					{ className: 'form__radio', key: i },
					_react2['default'].createElement('input', {
						type: 'radio',
						name: _this.props.id,
						id: _this.props.id + '-opt-' + i,
						disabled: !_this.props.isEnabled,
						checked: isChecked,
						onChange: _this.saveDataOnParent.bind(_this),
						value: option
					}),
					_react2['default'].createElement(
						'p',
						null,
						foreignModel.get('name')
					)
				);
			});
		}
	}, {
		key: 'isOptionChecked',
		value: function isOptionChecked(option, i) {
			if (this.props.initialValue) {
				return option === this.props.initialValue;
			}
			return i === 0;
		}
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {
			// If there was no initial value passed to the component, pass back the first option to the parent.
			if (!this.props.initialValue) {
				this.props.saveDataOnParent({
					id: this.props.id,
					value: this.props.foreignCollection.models[0].get('id')
				});
			}
		}
	}, {
		key: 'saveDataOnParent',
		value: function saveDataOnParent(e) {
			this.props.saveDataOnParent({
				id: this.props.id,
				value: e.target.value
			});
		}
	}]);

	return ForeignCollectionRadio;
})(_baseJsx2['default']);

exports['default'] = ForeignCollectionRadio;
module.exports = exports['default'];

},{"./base.jsx":9,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"react":364}],13:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _baseJsx = require('./base.jsx');

var _baseJsx2 = _interopRequireDefault(_baseJsx);

var ImageFile = (function (_Base) {
	_inherits(ImageFile, _Base);

	function ImageFile() {
		_classCallCheck(this, ImageFile);

		_get(Object.getPrototypeOf(ImageFile.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(ImageFile, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'div',
				{ className: 'form__wrapper' },
				_react2['default'].createElement(
					'label',
					null,
					this.props.labelText
				),
				this.renderThumbnail(),
				_react2['default'].createElement(
					'p',
					{ className: 'form__hint' },
					this.props.hint
				),
				_react2['default'].createElement('input', {
					ref: 'input',
					onChange: this.saveDataOnParent.bind(this),
					type: 'file',
					disabled: !this.props.isEnabled,
					name: this.props.id,
					id: this.props.id,
					placeholder: this.props.placeholder
				})
			);
		}
	}, {
		key: 'renderThumbnail',
		value: function renderThumbnail() {
			var encoded = this.props.initialValue;
			if (encoded) {
				encoded = encoded.replace(/(\r\n|\n|\r)/gm, '');
				return _react2['default'].createElement('div', { style: { width: '100%', paddingTop: '75%', backgroundSize: 'cover', backgroundImage: "url('data:image/png;base64," + encoded + "')" } });
			}
		}
	}, {
		key: 'saveDataOnParent',
		value: function saveDataOnParent(e) {
			var _this = this;

			var file = e.target.files[0];
			var reader = new FileReader();

			var removeBase64Header = function removeBase64Header(s) {
				return s.slice(s.indexOf('base64') + 7);
			};

			reader.onload = function () {
				var b64 = removeBase64Header(reader.result);
				_this.props.saveDataOnParent({
					id: _this.props.id,
					value: b64
				});
			};

			reader.readAsDataURL(file);
		}
	}]);

	return ImageFile;
})(_baseJsx2['default']);

exports['default'] = ImageFile;
module.exports = exports['default'];

},{"./base.jsx":9,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"react":364}],14:[function(require,module,exports){
'use strict';

var _interopRequire = require('babel-runtime/helpers/interop-require')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _textJsx = require('./text.jsx');

exports.Text = _interopRequire(_textJsx);

var _radioJsx = require('./radio.jsx');

exports.Radio = _interopRequire(_radioJsx);

var _selectize_textJsx = require('./selectize_text.jsx');

exports.SelectizeText = _interopRequire(_selectize_textJsx);

var _spreadsheet_fileJsx = require('./spreadsheet_file.jsx');

exports.SpreadsheetFile = _interopRequire(_spreadsheet_fileJsx);

var _image_fileJsx = require('./image_file.jsx');

exports.ImageFile = _interopRequire(_image_fileJsx);

var _ckeditorJsx = require('./ckeditor.jsx');

exports.CKEditor = _interopRequire(_ckeditorJsx);

var _foreign_collection_radioJsx = require('./foreign_collection_radio.jsx');

exports.ForeignCollectionRadio = _interopRequire(_foreign_collection_radioJsx);

var _foreign_collection_check_boxJsx = require('./foreign_collection_check_box.jsx');

exports.ForeignCollectionCheckBox = _interopRequire(_foreign_collection_check_boxJsx);

},{"./ckeditor.jsx":10,"./foreign_collection_check_box.jsx":11,"./foreign_collection_radio.jsx":12,"./image_file.jsx":13,"./radio.jsx":15,"./selectize_text.jsx":16,"./spreadsheet_file.jsx":17,"./text.jsx":18,"babel-runtime/helpers/interop-require":96}],15:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _baseJsx = require('./base.jsx');

var _baseJsx2 = _interopRequireDefault(_baseJsx);

var Radio = (function (_Base) {
	_inherits(Radio, _Base);

	function Radio(props) {
		_classCallCheck(this, Radio);

		_get(Object.getPrototypeOf(Radio.prototype), 'constructor', this).call(this, props);
	}

	_createClass(Radio, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'div',
				{ className: 'form__wrapper' },
				_react2['default'].createElement(
					'label',
					{ 'for': this.props.id },
					this.props.labelText
				),
				_react2['default'].createElement(
					'p',
					{ className: 'form__hint' },
					this.props.hint
				),
				this.renderOptions()
			);
		}
	}, {
		key: 'renderOptions',
		value: function renderOptions() {
			var _this = this;

			return this.props.options.map(function (option, i) {
				var isChecked = _this.isOptionChecked(option, i);
				return _react2['default'].createElement(
					'div',
					{ className: 'form__radio', key: i },
					_react2['default'].createElement('input', {
						type: 'radio',
						name: _this.props.id,
						id: _this.props.id + '-opt-' + i,
						checked: isChecked,
						disabled: !_this.props.isEnabled,
						onChange: _this.saveDataOnParent.bind(_this),
						value: option
					}),
					_react2['default'].createElement(
						'p',
						null,
						option
					)
				);
			});
		}
	}, {
		key: 'isOptionChecked',
		value: function isOptionChecked(option, i) {
			if (this.props.initialValue) {
				return option === this.props.initialValue;
			}
			return i === 0;
		}
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {
			// If there was no initial value passed to the component, pass back the first option to the parent.
			if (!this.props.initialValue) {
				this.props.saveDataOnParent({
					id: this.props.id,
					value: this.props.options[0]
				});
			}
		}
	}, {
		key: 'saveDataOnParent',
		value: function saveDataOnParent(e) {
			this.props.saveDataOnParent({
				id: this.props.id,
				value: e.target.value
			});
		}
	}]);

	return Radio;
})(_baseJsx2['default']);

exports['default'] = Radio;
module.exports = exports['default'];

},{"./base.jsx":9,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"react":364}],16:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _baseJsx = require('./base.jsx');

var _baseJsx2 = _interopRequireDefault(_baseJsx);

var SelectizeText = (function (_Base) {
	_inherits(SelectizeText, _Base);

	function SelectizeText() {
		_classCallCheck(this, SelectizeText);

		_get(Object.getPrototypeOf(SelectizeText.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(SelectizeText, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'div',
				{ className: 'form__wrapper' },
				_react2['default'].createElement(
					'label',
					{ 'for': this.props.id },
					this.props.labelText
				),
				_react2['default'].createElement(
					'p',
					{ className: 'form__hint' },
					this.props.hint
				),
				_react2['default'].createElement('input', {
					ref: 'input',
					type: 'text',
					name: this.props.id,
					disabled: !this.props.isEnabled,
					id: this.props.id,
					value: this.props.initialValue,
					placeholder: this.props.placeholder
				})
			);
		}
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {
			var $el = $(_react2['default'].findDOMNode(this.refs.input));
			$el.selectize({
				delimiter: ',',
				persist: true,
				create: function create(input) {
					return { value: input, text: input };
				}
			}).on('change', this.saveDataOnParent.bind(this));
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			var $el = $(_react2['default'].findDOMNode(this.refs.input));
			$el[0].selectize.destroy();
		}
	}, {
		key: 'saveDataOnParent',
		value: function saveDataOnParent(e) {
			this.props.saveDataOnParent({
				id: this.props.id,
				value: e.target.value
			});
		}
	}]);

	return SelectizeText;
})(_baseJsx2['default']);

exports['default'] = SelectizeText;
module.exports = exports['default'];

},{"./base.jsx":9,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"react":364}],17:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _baseJsx = require('./base.jsx');

var _baseJsx2 = _interopRequireDefault(_baseJsx);

var _generalLoadingJsx = require('./../../general/loading.jsx');

var _generalLoadingJsx2 = _interopRequireDefault(_generalLoadingJsx);

var SpreadsheetFile = (function (_Base) {
	_inherits(SpreadsheetFile, _Base);

	/*
  *
  *
  */

	function SpreadsheetFile(props) {
		_classCallCheck(this, SpreadsheetFile);

		_get(Object.getPrototypeOf(SpreadsheetFile.prototype), 'constructor', this).call(this, props);
		this.state = {
			isParserLoaded: false
		};
	}

	/*
  *
  *
  */

	_createClass(SpreadsheetFile, [{
		key: 'render',
		value: function render() {
			if (!this.state.isParserLoaded) {
				return _react2['default'].createElement(_generalLoadingJsx2['default'], null);
			}
			return _react2['default'].createElement(
				'div',
				{ className: 'form__wrapper' },
				_react2['default'].createElement(
					'label',
					{ 'for': this.props.id },
					this.props.labelText
				),
				this.renderSummary(),
				_react2['default'].createElement(
					'p',
					{ className: 'form__hint' },
					this.props.hint
				),
				_react2['default'].createElement('input', {
					ref: 'input',
					onChange: this.saveDataOnParent.bind(this),
					type: 'file',
					disabled: !this.props.isEnabled,
					name: this.props.id,
					id: this.props.id,
					placeholder: this.props.placeholder
				})
			);
		}

		/*
   *
   *
   */
	}, {
		key: 'renderSummary',
		value: function renderSummary() {
			if (this.props.initialValue) {
				return _react2['default'].createElement(
					'p',
					null,
					'Data currently available.'
				);
			}
		}

		/*
   *
   *
   */
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {
			var _this = this;

			$().ensureScript('XLSX', '/assets/vendor/js-xlsx-standalone.js', function () {
				_this.setState({ isParserLoaded: true });
			});
		}

		/*
   *
   *
   */
	}, {
		key: 'parseWorkBook',
		value: function parseWorkBook(workbook) {
			var obj = {};
			for (var sheetName in workbook.Sheets) {
				var sheet = workbook.Sheets[sheetName];
				var newSheetName = sheetName.toLowerCase().replace(/ /g, '_');
				obj[newSheetName] = XLSX.utils.sheet_to_json(sheet, { raw: true });
			}
			console.log(obj);
			return obj;
		}

		/*
   * Use HTML5 FileReader API.
   *
   */
	}, {
		key: 'saveDataOnParent',
		value: function saveDataOnParent(e) {
			var _this2 = this;

			var file = e.target.files[0];
			var reader = new FileReader();

			reader.onload = function () {
				var bstr = reader.result;
				var workbook = XLSX.read(bstr, { type: 'binary' });
				_this2.props.saveDataOnParent({
					id: _this2.props.id,
					value: _this2.parseWorkBook(workbook)
				});
			};

			reader.readAsBinaryString(file);
		}
	}]);

	return SpreadsheetFile;
})(_baseJsx2['default']);

exports['default'] = SpreadsheetFile;
module.exports = exports['default'];

},{"./../../general/loading.jsx":22,"./base.jsx":9,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"react":364}],18:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _baseJsx = require('./base.jsx');

var _baseJsx2 = _interopRequireDefault(_baseJsx);

var Text = (function (_Base) {
	_inherits(Text, _Base);

	function Text() {
		_classCallCheck(this, Text);

		_get(Object.getPrototypeOf(Text.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(Text, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'div',
				{ className: 'form__wrapper' },
				_react2['default'].createElement(
					'label',
					{ 'for': this.props.id },
					this.props.labelText
				),
				_react2['default'].createElement(
					'p',
					{ className: 'form__hint' },
					this.props.hint
				),
				_react2['default'].createElement('input', {
					type: 'text',
					onChange: this.saveDataOnParent.bind(this),
					disabled: !this.props.isEnabled,
					name: this.props.id,
					id: this.props.id,
					value: this.props.initialValue,
					placeholder: this.props.placeholder
				})
			);
		}
	}, {
		key: 'saveDataOnParent',
		value: function saveDataOnParent(e) {
			this.props.saveDataOnParent({
				id: this.props.id,
				value: e.target.value
			});
		}
	}]);

	return Text;
})(_baseJsx2['default']);

exports['default'] = Text;
module.exports = exports['default'];

},{"./base.jsx":9,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"react":364}],19:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _iconsJsx = require('./icons.jsx');

var _iconsJsx2 = _interopRequireDefault(_iconsJsx);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var Header = (function (_React$Component) {
	_inherits(Header, _React$Component);

	function Header(props) {
		_classCallCheck(this, Header);

		_get(Object.getPrototypeOf(Header.prototype), 'constructor', this).call(this, props);
		this.state = {
			stripColor: ''
		};
	}

	_createClass(Header, [{
		key: 'render',
		value: function render() {
			var NafIcon = _iconsJsx2['default'].Naf;
			var stripStyle = {
				'backgroundColor': this.state.stripColor
			};
			var className = (0, _classnames2['default'])({
				'header': true,
				'bg-c-grey--base': !this.props.isTransparent
			});
			return _react2['default'].createElement(
				'div',
				{ className: className },
				_react2['default'].createElement(
					'div',
					{ className: 'header__corner' },
					_react2['default'].createElement(
						_reactRouter.Link,
						{
							id: 'header__welcome-link',
							to: '/menu'
						},
						_react2['default'].createElement(NafIcon, null)
					)
				),
				_react2['default'].createElement(
					'div',
					{ className: 'header__main' },
					_react2['default'].createElement('h1', { className: 'header__main__cursive-prefix' }),
					_react2['default'].createElement(
						'h1',
						{ className: 'header__main__site-name' },
						this.props.title
					),
					_react2['default'].createElement('p', { className: 'header__main__title' })
				),
				this.renderAuth(),
				false ? _react2['default'].createElement(HeaderNavCircles, this.props) : null,
				_react2['default'].createElement('div', { className: 'header__strip', style: stripStyle })
			);
		}

		/*
   *
   *
   */
	}, {
		key: 'renderAuth',
		value: function renderAuth() {
			var researcher = window.researcher;
			if (!researcher) {
				return;
			}
			return _react2['default'].createElement(
				'div',
				{ className: 'header__auth' },
				_react2['default'].createElement('img', { src: researcher.image.url, alt: 'Researcher Photo' }),
				_react2['default'].createElement(
					'p',
					null,
					'Hi, ' + researcher.name.givenName + '!'
				)
			);
		}

		/*
   *
   *
   */
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {
			this.setStripHandler();
		}

		/*
   *
   *
   */
	}, {
		key: 'setStripHandler',
		value: function setStripHandler() {
			var _this = this;

			var radio = this.props.radio;

			radio.commands.setHandler('set:header:strip:color', function (options) {
				if (options.color) {
					// reset class to original
					_this.setState({ stripColor: options.color });
				} else {
					_this.setState({ stripColor: undefined });
				}
			});
		}
	}]);

	return Header;
})(_react2['default'].Component);

Header.contextTypes = {
	router: _react2['default'].PropTypes.func
};

var HeaderNavCircles = (function (_React$Component2) {
	_inherits(HeaderNavCircles, _React$Component2);

	/*
  *
  *
  */

	function HeaderNavCircles(props) {
		_classCallCheck(this, HeaderNavCircles);

		_get(Object.getPrototypeOf(HeaderNavCircles.prototype), 'constructor', this).call(this, props);
		this.state = {
			activeIndex: 0
		};
	}

	/*
  *
  *
  */

	_createClass(HeaderNavCircles, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'div',
				{ className: 'header__nav-circles' },
				_react2['default'].createElement(
					'ul',
					{ className: 'nav-circles' },
					this.renderList()
				)
			);
		}

		/*
   *
   *
   */
	}, {
		key: 'renderList',
		value: function renderList() {
			return ['welcome', 'menu', 'show'].map(function (item, i) {
				var cls = (0, _classnames2['default'])({
					'nav-circle': true,
					'nav-circle--active': i === 1
				});
				return _react2['default'].createElement(
					'li',
					{ className: cls, key: i },
					_react2['default'].createElement('a', { href: '/' + item })
				);
			});
		}
	}]);

	return HeaderNavCircles;
})(_react2['default'].Component);

exports['default'] = Header;
module.exports = exports['default'];

},{"./icons.jsx":21,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"classnames":167,"react":364,"react-router":195}],20:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

// Render a help text segment that displays when help is activated.
// Parent needs to be relatively positioned for this to work.

var Help = (function (_React$Component) {
	_inherits(Help, _React$Component);

	function Help() {
		_classCallCheck(this, Help);

		_get(Object.getPrototypeOf(Help.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(Help, [{
		key: 'render',

		/*
   *
   *
   */
		value: function render() {
			var className = (0, _classnames2['default'])({
				'atl__help': true
			});
			className += ' atl__help--' + this.props.position;
			var id = this.props.id ? 'atl__help__' + this.props.id : undefined;
			return _react2['default'].createElement(
				'div',
				{ className: className, id: id },
				this.props.text
			);
		}
	}]);

	return Help;
})(_react2['default'].Component);

exports['default'] = Help;
module.exports = exports['default'];

},{"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"classnames":167,"react":364}],21:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var Icons = {};

Icons.Hex = (function (_React$Component) {
	_inherits(_class, _React$Component);

	function _class() {
		_classCallCheck(this, _class);

		_get(Object.getPrototypeOf(_class.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class, [{
		key: 'render',
		value: function render() {
			var style = this.props.fillColor ? {
				fill: this.props.fillColor
			} : undefined;
			return _react2['default'].createElement(
				'svg',
				{ className: this.props.className, viewBox: '0 0 100 100' },
				_react2['default'].createElement(
					'g',
					{ className: 'hexicon__hex', style: style },
					_react2['default'].createElement('path', { d: 'M86.9,77.3L56,94.4c-3.3,1.9-8.7,1.9-12.1,0L13.1,77.3c-3.3-1.9-6-6.4-6-10.2V32.9c0-3.8,2.7-8.3,6-10.2 L44,5.6c3.3-1.9,8.7-1.9,12.1,0l30.9,17.2c3.3,1.9,6,6.4,6,10.2v34.1C93,70.8,90.3,75.4,86.9,77.3' })
				),
				_react2['default'].createElement(
					'g',
					{ className: 'hexicon__yes' },
					_react2['default'].createElement('polygon', { points: '70.3,31.9 44.3,57.8 30.1,43.6 22.5,51.2 36.7,65.4 36.7,65.4 44.3,73 77.9,39.5 \t' })
				),
				_react2['default'].createElement(
					'g',
					{ className: 'hexicon__no' },
					_react2['default'].createElement('polygon', { points: '72,35.8 64.4,28.2 50.2,42.4 35.9,28.2 28.3,35.8 42.6,50 28.3,64.2 35.9,71.8 50.2,57.6 64.4,71.8 72,64.2  57.8,50' })
				)
			);
		}
	}]);

	return _class;
})(_react2['default'].Component);

// Auto generated by script

Icons.Adp = (function (_React$Component2) {
	_inherits(_class2, _React$Component2);

	function _class2() {
		_classCallCheck(this, _class2);

		_get(Object.getPrototypeOf(_class2.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class2, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement(
					'g',
					null,
					_react2['default'].createElement('path', { d: 'M83.2,66.6v-0.9h0.7c0.5,0,0.6,0.1,0.6,0.4c0,0.3-0.1,0.5-0.7,0.5 M83.7,67.2c0.2,0,0.4,0,0.5,0.2 c0.2,0.2,0.2,0.5,0.2,0.8c0,0.2,0.1,0.5,0.1,0.7h0.7c-0.1-0.3-0.2-0.7-0.2-1.1C85,67.3,85,67.1,84.4,67v0c0.5-0.1,0.8-0.4,0.8-0.9 c0-0.8-0.7-1-1.4-1h-1.2v3.7h0.6v-1.6H83.7z M83.9,70.2c1.7,0,3.1-1.4,3.1-3.1c0-1.7-1.4-3.1-3.1-3.1c-1.7,0-3.1,1.4-3.1,3.1 C80.7,68.8,82.1,70.2,83.9,70.2z M83.9,69.6c-1.4,0-2.6-1.2-2.6-2.6c0-1.4,1.2-2.6,2.6-2.6c1.4,0,2.6,1.2,2.6,2.6 C86.4,68.4,85.3,69.6,83.9,69.6z' }),
					_react2['default'].createElement('path', { d: 'M78.6,38.5h-5v5h5c1.2,0,2.2,1,2.2,2.2c0,1.2-1,2.2-2.2,2.2h-5v5h5c4,0,7.2-3.2,7.2-7.2 C85.8,41.7,82.5,38.5,78.6,38.5 M49.8,65.1c6,0,11.2-3.5,13.7-8.6h6.4v8.6h3.6v-8.6h5c6,0,10.8-4.8,10.8-10.8 c0-6-4.8-10.8-10.8-10.8h-8.6v13h-5.1c-1-7.3-7.3-13-15-13H32.1L14.5,65.1h4.2l5-8.6h18.1v8.6H49.8z M94.4,45.7 c0,8.7-7.1,15.8-15.8,15.8v8.6H64.9v-6.7c-3.7,4.1-9.1,6.7-15,6.7h-13v-8.6H26.6l-5,8.6h-16l23.5-40.3h20.7c6,0,11.3,2.6,15,6.7 v-6.7h13.7C87.3,29.8,94.4,36.9,94.4,45.7z M36.8,38.5v9.4h-8l-2.9,5h16V38.5H36.8z M61.4,50c0,6.4-5.2,11.5-11.5,11.5h-4.4v-5h4.4 c3.6,0,6.5-2.9,6.5-6.5c0-3.6-2.9-6.5-6.5-6.5h-4.4v-5h4.4C56.2,38.5,61.4,43.6,61.4,50z' })
				)
			);
		}
	}]);

	return _class2;
})(_react2['default'].Component);

Icons.AroundTheWorld = (function (_React$Component3) {
	_inherits(_class3, _React$Component3);

	function _class3() {
		_classCallCheck(this, _class3);

		_get(Object.getPrototypeOf(_class3.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class3, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement(
					'g',
					null,
					_react2['default'].createElement('path', { d: 'M80.3,29.4c3.3,5.3,5.3,11.3,5.8,17.6h-13c0-0.2,0-0.4,0-0.6l0-0.2c0-0.7-0.1-1.4-0.2-2 c0-0.3-0.1-0.6-0.1-1c-0.1-0.7-0.2-1.4-0.3-2.1l0-0.3c0-0.1,0-0.3-0.1-0.4c-0.2-1-0.3-1.9-0.5-2.8c0-0.1,0-0.1-0.1-0.2l0-0.2 c-0.1-0.3-0.2-0.7-0.3-1c0,0-0.1,0-0.1,0.1c-1.9,1.6-3.6,3-5.1,4.3c0,0.3,0.1,0.5,0.1,0.8c0,0.2,0.1,0.5,0.1,0.7l0,0.1 c0.1,0.6,0.2,1.1,0.2,1.8c0,0.3,0.1,0.6,0.1,0.9c0.1,0.6,0.1,1.2,0.1,1.8l0,0.3c0,0,0,0.1,0,0.1h-8.2c-0.8,0.7-1.7,1.5-2.6,2.3 c-1.5,1.4-2.8,2.6-4,3.7h14.7c0,0.8-0.1,1.7-0.2,2.8c0,0.2,0,0.4-0.1,0.5l0,0.3c-0.2,1.2-0.3,2.2-0.5,3.2l0,0.1 c-0.2,0.9-0.4,1.9-0.7,3.1c-0.1,0.3-0.1,0.5-0.2,0.8c-0.3,0.9-0.5,1.8-0.8,2.5c-0.8-0.3-1.7-0.5-2.8-0.8c-0.3-0.1-0.5-0.1-0.8-0.2 c-1.3-0.3-2.3-0.5-3.3-0.7c0,0-0.1,0-0.2,0c-1-0.2-2-0.3-3.3-0.5c-0.3,0-0.6-0.1-0.9-0.1c-1.1-0.1-2.1-0.2-3-0.2V63l-6-0.6v1.3 c-1,0-2,0.1-3,0.2c-0.3,0-0.6,0.1-0.9,0.1c-1.3,0.1-2.3,0.3-3.3,0.5c-0.1,0-0.1,0-0.2,0c-1,0.2-2.1,0.4-3.3,0.7 c-0.3,0.1-0.6,0.1-0.8,0.2c-1.1,0.3-1.9,0.5-2.8,0.8c-0.3-0.7-0.5-1.6-0.8-2.5c-0.1-0.3-0.1-0.5-0.2-0.8c-0.3-1.2-0.5-2.2-0.7-3.1 l0-0.1c-0.2-0.9-0.3-1.9-0.5-3.2c0-0.3-0.1-0.5-0.1-0.8c-0.1-1-0.2-1.9-0.2-2.8h2.2l0.6-6h-2.8c0,0,0-0.1,0-0.1l0-0.3 c0-0.6,0.1-1.2,0.1-1.8c0-0.3,0.1-0.5,0.1-0.8l0-0.1c0.1-0.6,0.1-1.1,0.2-1.7c0-0.3,0.1-0.6,0.1-0.8c0.1-0.7,0.3-1.5,0.4-2.1 c0-0.1,0-0.1,0-0.2l0-0.1c0.2-0.8,0.4-1.6,0.6-2.4c0-0.1,0.1-0.3,0.1-0.4l0.1-0.3c0.2-0.6,0.3-1.1,0.5-1.7c0.1-0.3,0.2-0.5,0.3-0.8 c0.2-0.5,0.4-1.1,0.6-1.6l0.1-0.3c0-0.1,0.1-0.2,0.1-0.3c0.8,0.2,1.6,0.5,2.6,0.7c0.3,0.1,0.5,0.1,0.8,0.2c1.2,0.3,2.1,0.5,3.1,0.6 l0.1,0c0.9,0.2,1.9,0.3,3.2,0.4c0.3,0,0.5,0.1,0.8,0.1c1,0.1,1.9,0.2,2.7,0.2v3.8c0.6-0.4,1.1-0.8,1.8-1.2c4.2-2.7,7.7-5,11.2-7.1 c1.9-1.2,4-2.4,6.5-3.9c0.8-0.5,1.8-1,2.8-1.6c-0.1-0.2-0.2-0.3-0.3-0.5l-0.1-0.1c-0.3-0.5-0.6-1-0.9-1.4c-0.2-0.3-0.4-0.6-0.6-0.9 c-0.3-0.4-0.6-0.9-0.9-1.3L63.7,19c-0.1-0.2-0.3-0.4-0.4-0.6c-0.3-0.4-0.6-0.8-0.9-1.2l-0.2-0.2c-0.1-0.2-0.2-0.3-0.4-0.5 c-0.4-0.4-0.7-0.9-1.1-1.3L60.6,15c-0.1-0.1-0.2-0.2-0.3-0.3c-0.5-0.6-1-1.1-1.5-1.6l-0.3-0.3c0,0-0.1-0.1-0.1-0.1 c5.1,1.5,9.8,4.1,13.9,7.5c2.3-1.2,4.7-2.4,7.3-3.5C71.3,8.6,59.9,3.6,47.3,3.6C21.7,3.6,0.9,24.4,0.9,50 c0,25.6,20.8,46.4,46.4,46.4c25.6,0,46.4-20.8,46.4-46.4c0-9.1-2.6-17.6-7.2-24.7C84.4,26.5,82.2,28,80.3,29.4z M50.3,13.3 c0.1,0.1,0.3,0.2,0.4,0.3c0,0,0.1,0.1,0.1,0.1l0.1,0.1c0.4,0.3,0.7,0.6,1.1,1c0.1,0.1,0.2,0.2,0.3,0.3l0.2,0.1 c0.3,0.3,0.6,0.6,0.9,0.9c0.1,0.1,0.2,0.2,0.3,0.3l0.3,0.3c0.3,0.3,0.6,0.6,0.9,0.9c0.2,0.2,0.3,0.4,0.5,0.5l0.1,0.1 c0.3,0.3,0.6,0.7,0.9,1c0.2,0.2,0.4,0.5,0.6,0.7c0.3,0.4,0.6,0.7,0.9,1.1l0.1,0.2c0.2,0.2,0.3,0.4,0.5,0.6c0.3,0.4,0.6,0.8,0.9,1.3 l0.2,0.3c0.1,0.2,0.2,0.3,0.3,0.5c0.3,0.5,0.7,1.1,1,1.6c-0.6,0.2-1.2,0.3-1.8,0.5c-0.2,0.1-0.4,0.1-0.6,0.1 c-0.9,0.2-1.8,0.4-2.6,0.5c-0.1,0-0.1,0-0.2,0c-0.1,0-0.2,0-0.2,0c-0.7,0.1-1.5,0.2-2.3,0.3c-0.3,0-0.5,0.1-0.8,0.1 c-0.7,0.1-1.4,0.1-2.1,0.2V13.3z M31.2,80.5L31.2,80.5L31.2,80.5L31.2,80.5z M36.7,21.2L36.7,21.2c0.4-0.5,0.7-0.9,1-1.2 c0.2-0.2,0.4-0.5,0.6-0.7c0.3-0.4,0.6-0.7,0.9-1c0.2-0.2,0.4-0.4,0.6-0.6c0.3-0.3,0.6-0.6,0.9-0.9c0.2-0.2,0.4-0.4,0.5-0.5 c0.3-0.3,0.6-0.6,1-0.9l0.2-0.1c0.1-0.1,0.2-0.2,0.3-0.3c0.4-0.4,0.8-0.7,1.2-1.1l-0.3-0.5h0l0.4,0.4c0.1-0.1,0.3-0.2,0.4-0.3v14 c-0.7,0-1.4-0.1-2.1-0.2c-0.3,0-0.5-0.1-0.8-0.1c-0.8-0.1-1.5-0.2-2.2-0.3l-0.2,0c-0.1,0-0.2,0-0.2,0c-0.9-0.1-1.7-0.3-2.6-0.5 c-0.1,0-0.3-0.1-0.4-0.1l-0.2-0.1c-0.6-0.1-1.2-0.3-1.7-0.4c0.3-0.5,0.6-1.1,1-1.6c0.1-0.2,0.2-0.3,0.3-0.5l0.2-0.3 c0.3-0.5,0.6-0.9,0.9-1.3C36.4,21.7,36.5,21.5,36.7,21.2z M36.1,12.7c0,0-0.1,0.1-0.1,0.1l-0.1,0.1c-0.1,0.1-0.1,0.1-0.2,0.2 c-0.5,0.5-1,1-1.5,1.6c-0.1,0.1-0.2,0.2-0.3,0.3l-0.1,0.2c-0.4,0.4-0.7,0.8-1.1,1.3c-0.1,0.2-0.3,0.3-0.4,0.5l-0.2,0.2 c-0.3,0.4-0.6,0.8-0.9,1.2c-0.2,0.3-0.4,0.5-0.6,0.8c-0.3,0.4-0.6,0.9-0.9,1.3l-0.1,0.1c-0.2,0.2-0.3,0.5-0.5,0.7 c-0.3,0.5-0.6,0.9-0.9,1.4L28.3,23c-0.1,0.2-0.2,0.4-0.3,0.6c-0.1,0-0.2-0.1-0.4-0.2l-0.2-0.1c-0.2-0.1-0.3-0.1-0.5-0.2 c-1-0.4-1.8-0.9-2.6-1.3c-0.1,0-0.2-0.1-0.2-0.1L24,21.7c-0.7-0.4-1.3-0.8-2-1.2C26.1,16.9,30.9,14.3,36.1,12.7z M17.6,24.8 C17.7,24.9,17.7,24.9,17.6,24.8l0.2,0.1c0.2,0.1,0.4,0.3,0.6,0.4c1.1,0.7,2,1.2,2.9,1.7c0.1,0,0.1,0.1,0.2,0.1 c0.1,0,0.1,0.1,0.2,0.1c0.8,0.5,1.7,0.9,2.7,1.3c0.3,0.1,0.5,0.2,0.8,0.4c0.1,0,0.1,0.1,0.2,0.1c0,0,0,0,0,0.1 c0,0.1-0.1,0.2-0.1,0.2c-0.3,0.8-0.5,1.4-0.8,2c-0.1,0.2-0.2,0.5-0.2,0.7l-0.1,0.2c-0.2,0.6-0.4,1.2-0.6,1.9l0,0.2 c-0.1,0.2-0.1,0.5-0.2,0.7c-0.2,0.7-0.4,1.5-0.6,2.3c0,0.1,0,0.1,0,0.2l0,0.2c-0.2,0.8-0.4,1.7-0.5,2.8c0,0.1,0,0.3-0.1,0.4 l-0.1,0.3c-0.1,0.8-0.2,1.5-0.3,2.1c0,0.3-0.1,0.6-0.1,1c-0.1,0.7-0.1,1.4-0.2,2l0,0.2c0,0.2,0,0.4,0,0.6h-13 C9.1,38.8,12.3,31.1,17.6,24.8z M17.4,72.3l-0.2,0.1c-0.4,0.3-0.7,0.5-1.1,0.8c-4.4-5.9-7-12.9-7.6-20.2h13c0,0,0,0,0,0l0,0.2 c0,0.7,0.1,1.4,0.1,2c0,0.3,0,0.5,0.1,0.8c0.1,0.6,0.1,1.2,0.2,1.8c0,0.2,0.1,0.5,0.1,0.7c0.1,0.9,0.3,1.7,0.4,2.4l0,0.2 c0.1,0.7,0.3,1.5,0.5,2.2c0,0.2,0.1,0.3,0.1,0.5l0.1,0.3c0.1,0.6,0.3,1.1,0.5,1.7c0.1,0.2,0.1,0.5,0.2,0.7c0.2,0.6,0.4,1.3,0.6,1.9 l0,0c-0.6,0.3-1.2,0.6-1.7,0.8l-0.6,0.3c-1.5,0.8-2.9,1.6-4.3,2.5C17.6,72.1,17.5,72.2,17.4,72.3z M20,77.8l0.2-0.2 c0.9-0.6,1.7-1.1,2.5-1.6c0.1,0,0.1-0.1,0.2-0.1c0.8-0.5,1.7-1,2.8-1.5c0.2-0.1,0.4-0.2,0.6-0.3l0.1,0c0.1,0,0.2-0.1,0.3-0.1 c0.3,0.7,0.7,1.4,1,2l0.2,0.3c0.4,0.8,0.9,1.5,1.3,2.2l0.1,0.2c0.5,0.7,0.9,1.4,1.4,2.1c0,0,0,0.1,0.1,0.1c0.5,0.7,0.9,1.3,1.5,2 l0,0.1c0.4,0.6,0.9,1.1,1.4,1.7l0.1,0.1c0,0,0.1,0.1,0.1,0.1c0.4,0.5,0.8,0.9,1.4,1.6l0.2,0.2c0.2,0.2,0.4,0.5,0.7,0.7 C30.1,85.5,24.6,82.2,20,77.8z M44.3,86.6c-0.1,0-0.1-0.1-0.2-0.1L44,86.4c-0.1-0.1-0.2-0.2-0.4-0.3c-0.4-0.3-0.8-0.7-1.2-1 l-0.1-0.1c-0.1-0.1-0.1-0.1-0.2-0.2c-0.5-0.5-1-1-1.6-1.5c-0.1-0.1-0.2-0.2-0.3-0.3l-0.2-0.2c-0.4-0.4-0.8-0.8-1.2-1.3 c-0.1-0.2-0.3-0.3-0.4-0.5l-0.2-0.2c-0.3-0.4-0.7-0.8-1.1-1.3c-0.2-0.3-0.4-0.5-0.6-0.8c-0.4-0.5-0.7-0.9-1-1.4l-0.1-0.1 c-0.2-0.2-0.3-0.5-0.5-0.7c-0.4-0.5-0.7-1.2-1.2-1.9l-0.2-0.2c-0.1-0.1-0.1-0.2-0.2-0.4c-0.4-0.7-0.8-1.5-1.2-2.2 c0.7-0.2,1.4-0.4,2.1-0.6c0.2-0.1,0.5-0.1,0.7-0.2c1-0.3,2-0.5,2.9-0.6l0.1,0c0.1,0,0.1,0,0.2,0c0.8-0.1,1.7-0.3,2.7-0.4 c0.3,0,0.5-0.1,0.8-0.1c0.9-0.1,1.7-0.2,2.5-0.2V86.6z M57.3,79.6c-0.4,0.4-0.7,0.9-1.1,1.3l-0.1,0.1c-0.2,0.2-0.4,0.4-0.5,0.6 c-0.4,0.4-0.8,0.9-1.2,1.3L54.3,83c-0.1,0.1-0.2,0.2-0.3,0.3c-0.5,0.5-1,1-1.6,1.5c-0.1,0.1-0.1,0.1-0.2,0.2L52.2,85 c-0.4,0.4-0.8,0.7-1.2,1c-0.1,0.1-0.2,0.2-0.4,0.3l-0.1,0.1c-0.1,0.1-0.1,0.1-0.2,0.2v-17c0.8,0,1.6,0.1,2.5,0.2 c0.3,0,0.5,0.1,0.8,0.1c1,0.1,1.9,0.2,2.7,0.4c0.1,0,0.1,0,0.2,0l0.1,0c0.9,0.2,1.8,0.4,2.9,0.6c0.3,0.1,0.5,0.1,0.8,0.2 c0.7,0.2,1.4,0.4,2.1,0.6c-0.4,0.8-0.8,1.5-1.2,2.2c-0.1,0.1-0.1,0.2-0.2,0.3c-0.1,0.1-0.1,0.2-0.2,0.3c-0.4,0.7-0.8,1.3-1.2,1.9 c-0.2,0.2-0.3,0.5-0.5,0.7l-0.1,0.1c-0.4,0.5-0.7,1-1,1.4C57.7,79,57.5,79.3,57.3,79.6z M58.5,87.3c0.2-0.2,0.5-0.5,0.7-0.7 l0.2-0.2c0.4-0.5,0.9-1,1.3-1.5l0.2-0.2c0.5-0.6,0.9-1.1,1.4-1.8l0.1-0.1c0.5-0.6,1-1.3,1.4-1.9l0.1-0.1c0.4-0.6,0.9-1.3,1.4-2.1 l0.1-0.2c0.4-0.6,0.8-1.3,1.3-2.2l0.2-0.3c0.3-0.6,0.7-1.3,1-2c0.1,0,0.2,0.1,0.3,0.1l0.7,0.3c1,0.5,1.9,1,2.8,1.5l0.1,0 c0.1,0,0.1,0.1,0.2,0.1c0.8,0.5,1.6,1,2.5,1.6l0.1,0c0.1,0,0.1,0.1,0.2,0.1C70,82.2,64.5,85.5,58.5,87.3z M78.5,73.2 c-0.4-0.3-0.7-0.5-1.1-0.8L76.8,72c-0.8-0.5-1.4-0.9-2-1.3c0,0-0.1,0-0.1-0.1c-0.6-0.4-1.3-0.8-2.1-1.2c-0.2-0.1-0.3-0.2-0.5-0.3 l-0.2-0.1c-0.6-0.3-1.1-0.5-1.7-0.8l0,0c0.2-0.6,0.4-1.2,0.6-1.9c0.1-0.2,0.1-0.5,0.2-0.7c0.2-0.6,0.3-1.1,0.5-1.7l0.1-0.3 c0-0.1,0.1-0.3,0.1-0.4c0.2-0.8,0.3-1.5,0.5-2.2l0-0.1c0.1-0.7,0.3-1.5,0.4-2.4c0-0.2,0-0.3,0.1-0.5l0-0.2c0.1-0.6,0.2-1.2,0.2-1.8 c0-0.3,0.1-0.5,0.1-0.8c0.1-0.7,0.1-1.3,0.1-2l0-0.2c0,0,0,0,0,0h13C85.5,60.3,82.9,67.3,78.5,73.2z' }),
					_react2['default'].createElement('path', { d: 'M99,20.2c-0.1-0.6-0.3-1.1-0.6-1.7c-0.3-0.6-0.8-1.1-1.4-1.5c-0.6-0.4-1.2-0.6-1.9-0.7 c-0.6-0.1-1.2-0.2-1.8-0.2c0,0-0.1,0-0.1,0c-2.5,0-4.9,0.7-7.3,1.5c-4.7,1.6-9.4,3.9-14,6.3c-2.3,1.2-4.5,2.5-6.7,3.8 c-2.2,1.3-4.3,2.6-6.4,3.8c-4.1,2.5-7.9,5-11.1,7.1c-3.2,2.1-5.9,3.9-7.7,5.2c-0.5,0.4-1,0.7-1.4,1L34,39.1l-2,19l19,2l-4.6-5.6 c0.3-0.3,0.7-0.7,1.2-1.1c1.6-1.5,3.9-3.7,6.7-6.2c2.8-2.5,6.1-5.5,9.6-8.5c1.8-1.5,3.6-3.1,5.5-4.7c1.9-1.6,3.9-3.1,5.8-4.6 c4-3,8-5.9,12.1-8c2-1,4-1.9,5.9-2.2c0.4-0.1,0.9-0.1,1.3-0.1c0,0,0,0,0,0c0.4,0,0.8,0.1,1.1,0.2c0.3,0.1,0.6,0.3,0.8,0.5 c0.2,0.3,0.4,0.6,0.5,0.9c0.5,1.5,0.3,3.3,0.1,4.7c-0.2,1.5-0.6,2.8-0.9,3.8c-0.6,2.1-1.1,3.3-1.1,3.3s0.7-1.1,1.7-3.1 c0.5-1,1-2.3,1.5-3.8c0.2-0.8,0.5-1.6,0.6-2.5C99.1,22.3,99.2,21.3,99,20.2z' })
				)
			);
		}
	}]);

	return _class3;
})(_react2['default'].Component);

Icons.Badge = (function (_React$Component4) {
	_inherits(_class4, _React$Component4);

	function _class4() {
		_classCallCheck(this, _class4);

		_get(Object.getPrototypeOf(_class4.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class4, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement(
					'g',
					null,
					_react2['default'].createElement('path', { d: 'M45.1,16.8L29.7,6.5l-4.4,6.6l16.6,11.1c0-0.3,0-0.5,0-0.8C41.8,20.7,43.1,18.3,45.1,16.8 z' }),
					_react2['default'].createElement('path', { d: 'M58.2,23.4c0,0.3,0,0.5,0,0.8l16.6-11.1l-4.4-6.6L54.9,16.8 C56.9,18.3,58.2,20.7,58.2,23.4z' }),
					_react2['default'].createElement('path', { d: 'M72.1,30.1H57.4v4.1h2.3c1,0,1.8,0.8,1.8,1.8c0,1-0.8,1.8-1.8,1.8H40.3c-1,0-1.8-0.8-1.8-1.8 c0-1,0.8-1.8,1.8-1.8h2.3v-4.1H27.9c-2.3,0-4.3,1.9-4.3,4.2v54.9c0,2.3,1.9,4.2,4.3,4.2h44.2c2.3,0,4.2-1.9,4.2-4.2V34.4 C76.4,32,74.5,30.1,72.1,30.1z M69.9,85c0,1.3-1.1,2.4-2.4,2.4h-35c-1.3,0-2.4-1.1-2.4-2.4V44.4c0-1.3,1.1-2.4,2.4-2.4h35 c1.3,0,2.4,1.1,2.4,2.4V85z' }),
					_react2['default'].createElement('path', { d: 'M55.4,29.4c-1.4,1.3-3.4,2.1-5.4,2.1c-2.1,0-4-0.8-5.4-2.1v6.1h10.9V29.4z' }),
					_react2['default'].createElement('path', { d: 'M50,29.1c3.1,0,5.7-2.6,5.7-5.7c0-3.1-2.6-5.7-5.7-5.7c-3.1,0-5.7,2.6-5.7,5.7 C44.3,26.5,46.9,29.1,50,29.1z' }),
					_react2['default'].createElement('path', { d: 'M52.7,63.7c3.7-1.2,6.4-4.6,6.4-8.8c0-5.1-4.1-9.2-9.2-9.2c-5.1,0-9.2,4.1-9.2,9.2c0,4.1,2.7,7.6,6.4,8.8 c-8,1.8-10.4,8.1-10.4,20h26.3C63.1,71.7,60.7,65.4,52.7,63.7z M48.3,68.8c0-0.3,0.2-0.5,0.5-0.5h2.4c0.3,0,0.5,0.2,0.5,0.5v1.1 c0,0.3,0,0.5-0.1,0.5c0,0-0.2,0.1-0.5,0.3l-0.8,0.5c-0.2,0.1-0.6,0.1-0.8,0l-0.8-0.5c-0.2-0.1-0.4-0.3-0.5-0.3c0,0-0.1-0.2-0.1-0.5 V68.8z M52.2,78.8l-1.9,1.6c-0.2,0.2-0.5,0.2-0.7,0l-1.9-1.6c-0.2-0.2-0.3-0.5-0.3-0.8l0.9-6.2c0-0.3,0.2-0.4,0.5-0.2l0.8,0.5 c0.2,0.1,0.6,0.1,0.8,0l0.8-0.5c0.2-0.1,0.4,0,0.5,0.2l0.9,6.2C52.6,78.3,52.4,78.7,52.2,78.8z' })
				)
			);
		}
	}]);

	return _class4;
})(_react2['default'].Component);

Icons.Briefcase = (function (_React$Component5) {
	_inherits(_class5, _React$Component5);

	function _class5() {
		_classCallCheck(this, _class5);

		_get(Object.getPrototypeOf(_class5.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class5, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M45.8,65.8V52.9h8.9v12.9H45.8z M95.5,52.9L87.4,61H57v7H43.6v-7H9.8l-5.4-5.4v30.8 l2.1,2.1h86.8l2.1-2.1V52.9z M2.5,50.4V26.7L5.2,24h27.9c0.1-0.1,0.1-0.3,0.1-0.5v-9c0-1.7,1.4-3.1,3.1-3.1h27.4 c1.7,0,3.1,1.4,3.1,3.1v9c0,0.2,0,0.3,0.1,0.5h27.9l2.7,2.7v20.8l-11.1,9.9H57.1v-6.7H43.5v6.7H10.7L2.5,50.4z M38.5,23.5 c0,0.2,0,0.3,0.1,0.5h22.8c0.1-0.1,0.1-0.3,0.1-0.5v-5.1c0-0.6-0.5-1.1-1.1-1.1H39.5c-0.6,0-1.1,0.5-1.1,1.1V23.5z' })
			);
		}
	}]);

	return _class5;
})(_react2['default'].Component);

Icons.Build = (function (_React$Component6) {
	_inherits(_class6, _React$Component6);

	function _class6() {
		_classCallCheck(this, _class6);

		_get(Object.getPrototypeOf(_class6.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class6, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M84.3,29.6c2.5,0,4.8-1,6.6-2.7l6.4-6.4c0.7-0.7,1.1-1.7,1.1-2.7c0-1-0.4-2-1.1-2.7l-7.7-7.7 c-1.4-1.4-4-1.4-5.4,0l-6.4,6.4c-2.7,2.6-3.4,6.5-2.1,9.8L58.5,40.6l-6.9-6.9c1.3-7.9-1.3-16.1-7-21.8c-4.7-4.7-11.1-7.4-17.8-7.4 c-3,0-6,0.5-8.8,1.6c-1.2,0.5-2.1,1.5-2.4,2.8c-0.3,1.3,0.1,2.6,1,3.5l10.3,10.3l-1.5,5.6l-5.6,1.5L9.5,19.5c-0.9-0.9-2.2-1.3-3.5-1 c-1.3,0.3-2.3,1.2-2.8,2.4C-0.2,30.1,2.1,40.6,9,47.5c5.7,5.7,13.8,8.3,21.8,7l1.1,1.1L15.7,71.9C9.9,77.7,9,86,13.8,90.8 c2,2,4.7,3.1,7.7,3.1c4,0,8-1.8,11.2-5l16.2-16.2l18.5,18.5c2.8,2.8,6.5,4.3,10.4,4.3c3.9,0,7.6-1.5,10.4-4.3 c2.8-2.8,4.3-6.5,4.3-10.4c0-3.9-1.5-7.6-4.3-10.4L63.9,46L81,29C82,29.3,83.1,29.6,84.3,29.6z M27.3,83.4c-1.7,1.7-3.9,2.7-5.8,2.7 c-0.7,0-1.6-0.1-2.3-0.8c-1.5-1.5-1-5.1,1.9-8.1l16.1-16.1l6.2,6.2L27.3,83.4z M84.9,80.7c0,1.9-0.7,3.7-2.1,5 c-2.7,2.7-7.3,2.7-10,0l-38-38c-0.7-0.7-1.7-1.1-2.7-1.1c-0.3,0-0.6,0-0.9,0.1c-6,1.5-12.4-0.2-16.7-4.6c-3.2-3.2-5-7.6-5.1-12 l6.7,6.7c1,1,2.4,1.3,3.7,1l9.8-2.6c1.3-0.4,2.4-1.4,2.7-2.7l2.6-9.9c0.4-1.3,0-2.7-1-3.7l-6.7-6.7c4.5,0.1,8.8,1.9,12,5.1 c4.4,4.4,6.1,10.6,4.6,16.7c-0.3,1.3,0.1,2.7,1,3.6l38,38C84.1,77.1,84.9,78.8,84.9,80.7z M83.1,19.1l3.7-3.7l2.3,2.3l-3.7,3.7 c-0.8,0.8-1.5,0.8-2.3,0c0,0,0,0,0,0c0,0,0,0,0,0C82.5,20.8,82.5,19.8,83.1,19.1z' }),
				_react2['default'].createElement('circle', { cx: '77.2', cy: '79.9', r: '3.2' })
			);
		}
	}]);

	return _class6;
})(_react2['default'].Component);

Icons.Building = (function (_React$Component7) {
	_inherits(_class7, _React$Component7);

	function _class7() {
		_classCallCheck(this, _class7);

		_get(Object.getPrototypeOf(_class7.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class7, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M87.6,86.5V41.1c0-2.9-2.3-5.2-5.2-5.2h-27V14.4c0-2.9-2.3-5.2-5.2-5.2H17.6 c-2.9,0-5.2,2.3-5.2,5.2v72.1H3.9v4.3h92.2v-4.3H87.6z M27.2,76.9h-6v-6h6V76.9z M27.2,63.8h-6v-6h6V63.8z M27.2,50.7h-6v-6h6V50.7z M27.2,37.6h-6v-6h6V37.6z M27.2,24.6h-6v-6h6V24.6z M37.3,76.9h-6v-6h6V76.9z M37.3,63.8h-6v-6h6V63.8z M37.3,50.7h-6v-6h6V50.7z M37.3,37.6h-6v-6h6V37.6z M37.3,24.6h-6v-6h6V24.6z M47.4,76.9h-6v-6h6V76.9z M47.4,63.8h-6v-6h6V63.8z M47.4,50.7h-6v-6h6V50.7z M47.4,37.6h-6v-6h6V37.6z M47.4,24.6h-6v-6h6V24.6z M63.6,78.6h-4.8v-4.8h4.8V78.6z M63.6,69.1h-4.8v-4.8h4.8V69.1z M63.6,59.5 h-4.8v-4.8h4.8V59.5z M63.6,49.9h-4.8V45h4.8V49.9z M71.7,78.6h-4.8v-4.8h4.8V78.6z M71.7,69.1h-4.8v-4.8h4.8V69.1z M71.7,59.5h-4.8 v-4.8h4.8V59.5z M71.7,49.9h-4.8V45h4.8V49.9z M79.8,78.6H75v-4.8h4.8V78.6z M79.8,69.1H75v-4.8h4.8V69.1z M79.8,59.5H75v-4.8h4.8 V59.5z M79.8,49.9H75V45h4.8V49.9z' })
			);
		}
	}]);

	return _class7;
})(_react2['default'].Component);

Icons.Calendar = (function (_React$Component8) {
	_inherits(_class8, _React$Component8);

	function _class8() {
		_classCallCheck(this, _class8);

		_get(Object.getPrototypeOf(_class8.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class8, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement(
					'g',
					null,
					_react2['default'].createElement('path', { d: 'M89.2,72.8H73.4c-5.8,0-6.9,3.8-6.9,8.3v14.1H15.2c-2.4,0-4.4-2-4.4-4.4v-62h78.3V72.8z M22.3,13.1h8.5v8c0,2.3-1.9,4.2-4.3,4.2c-2.3,0-4.2-1.9-4.2-4.2V13.1z M70,13.1h8.5v8c0,2.3-1.9,4.2-4.2,4.2 c-2.3,0-4.2-1.9-4.2-4.2V13.1z M84.8,12.8h-6.2V4.9c0-2.3-1.9-4.2-4.2-4.2C72,0.7,70,2.6,70,4.9v7.9H30.8V4.9 c0-2.3-1.9-4.2-4.3-4.2c-2.3,0-4.2,1.9-4.2,4.2v7.9h-7.1c-4.7,0-8.5,3.8-8.5,8.5v69.6c0,4.7,3.8,8.5,8.5,8.5h51.4h0.2l4.1-4.1 l18.3-18.3l4.1-4.1V21.3C93.3,16.6,89.5,12.8,84.8,12.8' }),
					_react2['default'].createElement('rect', { x: '17.2', y: '37.6', width: '14', height: '14' }),
					_react2['default'].createElement('rect', { x: '34.5', y: '37.6', width: '14', height: '14' }),
					_react2['default'].createElement('rect', { x: '51.7', y: '37.6', width: '14', height: '14' }),
					_react2['default'].createElement('rect', { x: '68.9', y: '37.6', width: '14', height: '14' }),
					_react2['default'].createElement('rect', { x: '17.2', y: '54.8', width: '14', height: '14' }),
					_react2['default'].createElement('rect', { x: '34.5', y: '54.8', width: '14', height: '14' }),
					_react2['default'].createElement('rect', { x: '51.7', y: '54.8', width: '14', height: '14' }),
					_react2['default'].createElement('rect', { x: '68.9', y: '54.8', width: '14', height: '14' }),
					_react2['default'].createElement('rect', { x: '17.2', y: '72.1', width: '14', height: '14' }),
					_react2['default'].createElement('rect', { x: '34.5', y: '72.1', width: '14', height: '14' })
				)
			);
		}
	}]);

	return _class8;
})(_react2['default'].Component);

Icons.Clipboard = (function (_React$Component9) {
	_inherits(_class9, _React$Component9);

	function _class9() {
		_classCallCheck(this, _class9);

		_get(Object.getPrototypeOf(_class9.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class9, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M80.8,11.5h-6.1c0.1,0.2,0.2,0.4,0.3,0.6l2.5,7c0.6,1.7,0.4,3.4-0.5,4.8c-1,1.4-2.5,2.1-4.3,2.1H27.4 c-1.8,0-3.4-0.8-4.3-2.1c-1-1.4-1.1-3.1-0.5-4.8l2.5-7c0.1-0.2,0.2-0.4,0.3-0.6h-6.1c-1.9,0-3.4,1.5-3.4,3.4v80.8 c0,1.9,1.5,3.4,3.4,3.4h61.6c1.9,0,3.4-1.5,3.4-3.4V14.9C84.2,13,82.7,11.5,80.8,11.5z M25.7,43.7h38.2v4.4H25.7V43.7z M25.7,63.1 h38.2v4.4H25.7V63.1z M63.9,86.8H25.7v-4.4h38.2V86.8z M74.3,77.1H25.7v-4.4h48.6V77.1z M74.3,57.8H25.7v-4.4h48.6V57.8z M74.3,38.4 H25.7v-4.4h48.6V38.4z M75.1,20l-2.5-7C72,11.1,69.9,9.7,68,9.7h-7.6c-1.5,0-3-0.8-3.1-1.8c-0.1-0.7-1.3-7-7.2-7s-7.1,6.3-7.2,7 c-0.1,1-1.6,1.8-3.1,1.8H32c-1.9,0-4,1.5-4.7,3.3l-2.5,7c-0.3,0.9-0.3,1.8,0.2,2.5c0.5,0.7,1.3,1.1,2.3,1.1h45.3 c1,0,1.8-0.4,2.3-1.1C75.4,21.8,75.5,20.9,75.1,20z M50,8.1c-1.2,0-2.2-1-2.2-2.2c0-1.2,1-2.2,2.2-2.2c1.2,0,2.2,1,2.2,2.2 C52.2,7.1,51.2,8.1,50,8.1z' })
			);
		}
	}]);

	return _class9;
})(_react2['default'].Component);

Icons.Clock = (function (_React$Component10) {
	_inherits(_class10, _React$Component10);

	function _class10() {
		_classCallCheck(this, _class10);

		_get(Object.getPrototypeOf(_class10.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class10, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement(
					'g',
					null,
					_react2['default'].createElement('path', { d: 'M50,16c-2.3,0-4,1.9-4,4.1v28.2L34.6,59.6c-1.6,1.6-1.7,4.2,0,5.9c0.8,0.8,1.9,1.2,2.9,1.2 c1.1,0,2.1-0.4,2.9-1.2l12-12c0.1-0.1,0.1-0.2,0.1-0.3c0.9-0.8,1.4-1.9,1.4-3.2V20.1C54,17.8,52.3,16,50,16z' }),
					_react2['default'].createElement('path', { d: 'M98,50C98,50,98,50,98,50C98,23.3,76.7,1.7,50,1.7C23.4,1.7,2,23.3,2,50c0,0,0,0,0,0v0c0,0,0,0,0,0 c0,26.7,21.4,48.3,48,48.3C76.7,98.3,98,76.7,98,50C98,50,98,50,98,50L98,50z M71.8,83.6l-1.1-2c-0.6-1-1.9-1.3-2.8-0.7 c-1,0.6-1.3,1.8-0.8,2.8l1.1,2c-4.4,2.3-9.3,3.7-14.4,4.2c-0.6-1.5-2.1-2.5-3.8-2.5c-1.7,0-3.2,1-3.8,2.5c-5.1-0.5-10-2-14.4-4.2 l1.1-2c0.6-1,0.2-2.3-0.8-2.8c-1-0.6-2.3-0.2-2.8,0.8l-1.1,2c-4.7-3.1-8.7-7.1-11.8-11.8l2-1.1c1-0.6,1.3-1.8,0.8-2.8 c-0.6-1-1.8-1.3-2.8-0.8l-2,1.1c-2.3-4.4-3.7-9.3-4.2-14.4c1.5-0.6,2.5-2.1,2.5-3.8c0-1.7-1-3.2-2.5-3.8c0.5-5.1,2-10,4.2-14.4 l2,1.1c0.3,0.2,0.7,0.3,1,0.3c0.7,0,1.4-0.4,1.8-1c0.6-1,0.2-2.3-0.8-2.8l-2-1.1c3.1-4.7,7.1-8.7,11.8-11.8l1.1,2 c0.4,0.7,1.1,1,1.8,1c0.4,0,0.7-0.1,1-0.3c1-0.6,1.3-1.8,0.8-2.8l-1.1-2c4.4-2.3,9.2-3.7,14.4-4.2c0.6,1.5,2.1,2.5,3.8,2.5 c1.7,0,3.2-1,3.8-2.5c5.1,0.5,10,2,14.4,4.2l-1.1,2c-0.6,1-0.2,2.3,0.8,2.8c0.3,0.2,0.7,0.3,1,0.3c0.7,0,1.4-0.4,1.8-1l1.1-2 c4.7,3.1,8.7,7.1,11.8,11.8l-2,1.1c-1,0.6-1.3,1.8-0.8,2.8c0.4,0.7,1.1,1,1.8,1c0.4,0,0.7-0.1,1-0.3l2-1.1 c2.2,4.4,3.7,9.2,4.2,14.4c-1.5,0.6-2.5,2.1-2.5,3.8c0,1.7,1,3.2,2.5,3.8c-0.5,5.1-2,10-4.2,14.4l-2-1.1c-1-0.6-2.3-0.2-2.8,0.8 c-0.6,1-0.2,2.3,0.8,2.8l2,1.1C80.5,76.5,76.5,80.5,71.8,83.6z' })
				)
			);
		}
	}]);

	return _class10;
})(_react2['default'].Component);

Icons.Comment = (function (_React$Component11) {
	_inherits(_class11, _React$Component11);

	function _class11() {
		_classCallCheck(this, _class11);

		_get(Object.getPrototypeOf(_class11.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class11, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement(
					'g',
					null,
					_react2['default'].createElement('path', { d: 'M50,8.2C24.6,8.2,3.9,24.9,3.9,45.4c0,13.1,8.6,25.2,22.4,31.9c-2.2,2.9-5.1,5.2-8.6,6.9 c-1.6,0.8-2.5,2.6-2.1,4.3c0.3,1.8,1.8,3.1,3.6,3.2c1.1,0.1,2.3,0.1,3.4,0.1c10.1,0,19.2-3.3,25.7-9.3c0.6,0,1.2,0,1.8,0 c25.4,0,46.1-16.7,46.1-37.2C96.1,24.9,75.4,8.2,50,8.2z M50,74.7c-1,0-2.1-0.1-3.1-0.1c-1.2,0-2.3,0.4-3.1,1.2 c-3.1,3.2-7.1,5.5-11.7,6.8c0.9-1.1,1.7-2.2,2.4-3.4c0.3-0.5,0.5-1,0.8-1.5l0.2-0.5c0.5-1,0.6-2.2,0.1-3.2c-0.4-1-1.2-1.9-2.3-2.3 c-13.1-4.9-21.6-15.2-21.6-26.3c0-16.1,17.1-29.3,38.2-29.3c21.1,0,38.2,13.1,38.2,29.3S71.1,74.7,50,74.7z' }),
					_react2['default'].createElement('path', { d: 'M32.3,41c-3.2,0-5.8,2.6-5.8,5.8c0,3.2,2.6,5.8,5.8,5.8c3.2,0,5.8-2.6,5.8-5.8C38,43.6,35.4,41,32.3,41z' }),
					_react2['default'].createElement('path', { d: 'M50,41c-3.2,0-5.8,2.6-5.8,5.8c0,3.2,2.6,5.8,5.8,5.8c3.2,0,5.8-2.6,5.8-5.8C55.8,43.6,53.2,41,50,41z' }),
					_react2['default'].createElement('path', { d: 'M67.7,41c-3.2,0-5.8,2.6-5.8,5.8c0,3.2,2.6,5.8,5.8,5.8c3.2,0,5.8-2.6,5.8-5.8C73.5,43.6,70.9,41,67.7,41z' })
				)
			);
		}
	}]);

	return _class11;
})(_react2['default'].Component);

Icons.Contacts = (function (_React$Component12) {
	_inherits(_class12, _React$Component12);

	function _class12() {
		_classCallCheck(this, _class12);

		_get(Object.getPrototypeOf(_class12.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class12, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement(
					'g',
					null,
					_react2['default'].createElement('path', { d: 'M25.5,55H10.5c-3.3,0-5.9-2-5.9-4.5v-1.2c0-2.5,2.7-4.5,5.9-4.5h15.1c3.3,0,5.9,2,5.9,4.5 v1.2C31.5,53.1,28.8,55,25.5,55z' }),
					_react2['default'].createElement('path', { d: 'M25.5,78.6H10.5c-3.3,0-5.9-2-5.9-4.5V73c0-2.5,2.7-4.5,5.9-4.5h15.1c3.3,0,5.9,2,5.9,4.5 v1.2C31.5,76.6,28.8,78.6,25.5,78.6z' }),
					_react2['default'].createElement('path', { d: 'M25.5,31.5H10.5c-3.3,0-5.9-2-5.9-4.5v-1.2c0-2.5,2.7-4.5,5.9-4.5h15.1 c3.3,0,5.9,2,5.9,4.5V27C31.5,29.5,28.8,31.5,25.5,31.5z' }),
					_react2['default'].createElement('path', { d: 'M95.4,27.2v-1.6c0-3.3-2.7-5.9-5.9-5.9h-0.8v-3.3c0-6.6-5.3-11.9-11.9-11.9H26.5 c-6.6,0-11.9,5.3-11.9,11.9V18h10.9c5.2,0,9.3,3.4,9.3,7.8V27c0,4.4-4.1,7.8-9.3,7.8H14.7v6.7h10.9c5.2,0,9.3,3.4,9.3,7.8v1.2 c0,4.4-4.1,7.8-9.3,7.8H14.7v6.7h10.9c5.2,0,9.3,3.4,9.3,7.8v1.2c0,4.4-4.1,7.8-9.3,7.8H14.7v1.6c0,6.6,5.3,11.9,11.9,11.9h50.3 c6.6,0,11.9-5.3,11.9-11.9V60.1h0.8c3.3,0,5.9-2.7,5.9-5.9v-1.6c0-3.3-2.7-5.9-5.9-5.9c3.3,0,5.9-2.7,5.9-5.9v-1.6 c0-3.3-2.7-5.9-5.9-5.9C92.8,33.2,95.4,30.5,95.4,27.2z M50.3,36.6c0.2-0.1,0.4,0,0.6,0.1c0,0,0,0,0-0.1c0-5.3,3.4-8.5,7.6-8.5 c4.2,0,7.6,3.2,7.6,8.5c0,0,0,0,0,0.1c0.2-0.1,0.4-0.1,0.6-0.1c0.6,0.2,1,1,0.5,2.5c-0.4,1.5-1.1,2.1-1.8,1.9c0,0-0.1,0-0.1-0.1 c-1.2,3.5-3.8,6.3-6.8,6.3c-3,0-5.6-2.8-6.8-6.3c0,0-0.1,0-0.1,0.1c-0.6,0.2-1.3-0.4-1.8-1.9C49.3,37.6,49.6,36.8,50.3,36.6z M58.4,71.9C48,71.9,40,69.4,40,66.4c0-2.5,0-12.7,10.2-14.1c2.3-0.3,0.9-2.9,5.4-3.6c0.6-0.1,5-0.1,5.7,0c4.5,0.7,3.1,3.2,5.4,3.6 c10.2,1.4,10.2,11.7,10.2,14.1C76.9,69.4,68.8,71.9,58.4,71.9z' })
				)
			);
		}
	}]);

	return _class12;
})(_react2['default'].Component);

Icons.Contract = (function (_React$Component13) {
	_inherits(_class13, _React$Component13);

	function _class13() {
		_classCallCheck(this, _class13);

		_get(Object.getPrototypeOf(_class13.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class13, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M10.7,39C8.6,39,7,37.5,7,35.5S8.6,32,10.7,32h15.4L2.1,7.7C1.4,7,1,6,1,4.9c0-1.1,0.4-2.1,1.1-2.8 C2.8,1.4,3.7,1,4.6,1c1,0,1.9,0.4,2.7,1.1L31,26V10.7C31,8.5,32.5,7,34.5,7S38,8.5,38,10.7v24.2c0,0.2,0.3,2.2-0.5,3 c-0.8,0.8-2.2,1-2.2,1L35.1,39H10.7z' }),
				_react2['default'].createElement('path', { d: 'M5.1,99c-1.1,0-2.2-0.4-2.9-1.2c-1.5-1.5-1.5-4,0-5.5L26.1,68H10.7C8.5,68,7,66.5,7,64.5S8.5,61,10.7,61H35 v0.2c1,0.1,2.2,0.4,2.8,1.1c0.8,0.8,1.2,2.8,1.2,2.9v24.4c0,2.2-1.5,3.7-3.5,3.7S32,91.7,32,89.5V74.1L7.7,97.9 C7.1,98.6,6.1,99,5.1,99z' }),
				_react2['default'].createElement('path', { d: 'M65.1,39c-0.3,0-2.3-0.4-3-1.2c-0.8-0.8-1-2.9-1-2.9V10.5c0-2.2,1.5-3.7,3.5-3.7c2,0,3.5,1.6,3.5,3.7v15.4 L92.3,2.1c0.7-0.7,1.6-1,2.7-1c1.1,0,2.2,0.4,2.9,1.2c1.5,1.5,1.5,4,0,5.5L73.9,32h15.4c2.2,0,3.7,1.5,3.7,3.5S91.5,39,89.3,39H65.1 z' }),
				_react2['default'].createElement('path', { d: 'M95.1,99c-1.1,0-2-0.4-2.7-1.1L68,73.9v15.4c0,2.2-1.5,3.7-3.5,3.7c-2,0-3.5-1.6-3.5-3.7V65.1 c0-0.3,0.4-2.3,1.2-3c0.8-0.8,2.9-1,3-1h24.4c2.2,0,3.7,1.5,3.7,3.5S91.7,68,89.5,68H74.1l23.8,24.3c0.7,0.7,1.1,1.7,1,2.8 c0,1.1-0.5,2.1-1.2,2.8C97.1,98.6,96.1,99,95.1,99z' })
			);
		}
	}]);

	return _class13;
})(_react2['default'].Component);

Icons.CreditCard = (function (_React$Component14) {
	_inherits(_class14, _React$Component14);

	function _class14() {
		_classCallCheck(this, _class14);

		_get(Object.getPrototypeOf(_class14.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class14, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M53.4,8.3c0.8-0.9,2.1-0.9,3-0.1l19.8,18.2l8.9,8.2l2.3,2.1c0.9,0.8,0.9,2.1,0.1,3L38.9,92.7 c-0.8,0.9-2.1,0.9-3,0.1l-2.3-2.1l-8.9-8.2L4.9,64.4c-0.8-0.8-0.9-2.1-0.1-3L53.4,8.3L53.4,8.3z M51,6.1L2.4,59.2 c-2,2.2-1.8,5.5,0.3,7.5l19.8,18.2l8.9,8.2l2.3,2.1c2.2,2,5.5,1.8,7.5-0.3l48.6-53.1c2-2.2,1.8-5.5-0.3-7.5l-2.3-2.1L78.3,24 L58.5,5.8C56.4,3.8,53,4,51,6.1L51,6.1z' }),
				_react2['default'].createElement(
					'g',
					null,
					_react2['default'].createElement('rect', { x: '24.5', y: '71.4', transform: 'matrix(0.6752 -0.7376 0.7376 0.6752 -44.6653 43.2619)', width: '4.6', height: '1.9' }),
					_react2['default'].createElement('path', { d: 'M32.3,67.7l-1.4-1.3l-0.8-0.7l-1.4-1.3l-0.8-0.7h0l0.7-0.8l0,0l3.1-3.4l-0.3-0.3c-0.9-0.8-2.2-0.7-3,0.1 l-4.9,5.4l1.9,1.7l0.8,0.7l1.4,1.3l0.8,0.7l1.4,1.3l0.8,0.7l1.9,1.7l2.6-2.8l-1.9-1.7L32.3,67.7z' }),
					_react2['default'].createElement('path', { d: 'M26.7,75.4l0.3,0.3c0.9,0.8,2.2,0.7,3-0.1l1.6-1.8L29.8,72L26.7,75.4z' }),
					_react2['default'].createElement('path', { d: 'M22.8,65.6l-1.6,1.8c-0.8,0.9-0.7,2.2,0.1,3l0.3,0.3l3.1-3.4L22.8,65.6z' }),
					_react2['default'].createElement('rect', { x: '22.3', y: '69.4', transform: 'matrix(0.6755 -0.7374 0.7374 0.6755 -43.8803 40.9519)', width: '4.6', height: '1.9' }),
					_react2['default'].createElement('rect', { x: '31.6', y: '63.6', transform: 'matrix(-0.6753 0.7375 -0.7375 -0.6753 104.4225 83.2171)', width: '4.6', height: '1.9' }),
					_react2['default'].createElement('rect', { x: '30.7', y: '60.3', transform: 'matrix(-0.7379 -0.6749 0.6749 -0.7379 12.8374 130.1273)', width: '1.9', height: '4.6' }),
					_react2['default'].createElement('path', { d: 'M35.7,69.3l1.6-1.8c0.8-0.9,0.7-2.2-0.1-3l-0.3-0.3l-3.1,3.4L35.7,69.3z' })
				),
				_react2['default'].createElement('path', { d: 'M91.9,40.1h-1.1c0.8-2,0.3-4.4-1.3-5.9l-2.3-2.1L78.3,24L58.5,5.8C56.4,3.8,53,4,51,6.1L19.9,40.1h0 c-2.9,0-5.3,2.4-5.3,5.3v0.5L2.4,59.2c-2,2.2-1.8,5.5,0.3,7.5l11.9,10.9l0,6.7l0,3.1c0,2.9,2.4,5.3,5.3,5.3l11.2,0l0.3,0.3l2.3,2.1 c2.2,2,5.5,1.8,7.5-0.3l1.9-2.1l48.8,0c2.9,0,5.3-2.4,5.3-5.3l0-3.1l0-12.1l0-26.9C97.2,42.5,94.8,40.1,91.9,40.1z M91.9,43.3 c1.2,0,2.1,0.9,2.1,2.1l0,26.9l0,1.1l-33.2,0l27.6-30.1L91.9,43.3z M19.9,89.6c-1.2,0-2.1-0.9-2.1-2.1l0-3.1l0-0.9l3.2,0l1.6,1.5 l5.1,4.7L19.9,89.6z M35.9,92.8L35.9,92.8l-2.3-2.1l-1.2-1.1l-6.7-6.1l-1-0.9l-6.9-6.3l-2.1-1.9l-1.1-1l-9.7-8.9 c-0.8-0.8-0.9-2.1-0.1-3l9.9-10.8l3.2-3.5l3.5-3.9l2.9-3.2L53.4,8.3c0.8-0.9,2.1-0.9,3-0.1l19.8,18.2l8.9,8.2l2.3,2.1 c0.9,0.8,0.9,2.1,0.1,3L87,40.1l-2.9,3.2L56.5,73.4l-9.2,10l-5.6,6.1l-2.8,3.1c0,0-0.1,0.1-0.1,0.1C38,93.5,36.7,93.5,35.9,92.8z M94,84.4l0,3.1c0,1.2-0.9,2.1-2.1,2.1l-45.9,0l5.6-6.1l42.4,0V84.4z' })
			);
		}
	}]);

	return _class14;
})(_react2['default'].Component);

Icons.Dictionary = (function (_React$Component15) {
	_inherits(_class15, _React$Component15);

	function _class15() {
		_classCallCheck(this, _class15);

		_get(Object.getPrototypeOf(_class15.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class15, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M88,5.3H56.1c-2.2,0-4.3,0.6-6.1,1.8c-1.8-1.2-3.9-1.8-6.1-1.8H12c-6.2,0-11.2,5-11.2,11.2v60.8 c0,6.2,5,11.2,11.2,11.2h31.9c0.4,0,0.9,0.7,0.9,0.9c0,2.8,2.3,5.1,5.1,5.1c2.8,0,5.1-2.3,5.1-5.1c0-0.3,0.5-1,0.9-1H88 c6.2,0,11.2-5,11.2-11.2V16.5C99.2,10.3,94.2,5.3,88,5.3z M44.9,78.4c-0.3,0-0.6,0-0.9,0H12c-0.5,0-0.9-0.4-0.9-0.9V16.5 c0-0.5,0.4-0.9,0.9-0.9h31.9c0.5,0,0.9,0.4,0.9,0.9V78.4z M89,77.4c0,0.5-0.4,0.9-0.9,0.9H56.1c-0.3,0-0.6,0-0.9,0V16.5 c0-0.5,0.4-0.9,0.9-0.9H88c0.5,0,0.9,0.4,0.9,0.9V77.4z' })
			);
		}
	}]);

	return _class15;
})(_react2['default'].Component);

Icons.Down = (function (_React$Component16) {
	_inherits(_class16, _React$Component16);

	function _class16() {
		_classCallCheck(this, _class16);

		_get(Object.getPrototypeOf(_class16.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class16, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M54.2,95L87,62.3c2.6-2.6,2.8-6.5,0.2-9.1c-2.6-2.6-6.5-2.4-9.1,0.2L56.3,75.2l0-66.1c0-3.6-2.9-6.6-6.5-6.6 c-3.6,0-6.5,2.9-6.5,6.5l0,66.1L21.4,53.4c-2.6-2.6-6.5-2.8-9.1-0.2c-2.6,2.6-2.4,6.5,0.2,9.1l33,33c0,0,2.2,2.3,4.2,2.3 C51.7,97.5,54.2,95,54.2,95L54.2,95z' })
			);
		}
	}]);

	return _class16;
})(_react2['default'].Component);

Icons.Download = (function (_React$Component17) {
	_inherits(_class17, _React$Component17);

	function _class17() {
		_classCallCheck(this, _class17);

		_get(Object.getPrototypeOf(_class17.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class17, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M11.8,97c-2.7,0-4.9-2.3-4.9-5s2.2-5,4.9-5h76.5c2.7,0,4.9,2.3,4.9,5s-2.2,5-4.9,5H11.8z' }),
				_react2['default'].createElement('path', { d: 'M53.4,78.5l25.2-25.2c2-2,2.1-5,0.2-7c-2-2-5-1.8-7,0.2L55,63.3l0-50.9c0-2.8-2.3-5-5-5c-2.8,0-5,2.2-5,5 l0,50.9L28.2,46.5c-2-2-5-2.1-7-0.2c-2,2-1.8,5,0.2,7l25.4,25.4c0,0,1.7,1.8,3.3,1.8C51.5,80.5,53.4,78.5,53.4,78.5L53.4,78.5z' })
			);
		}
	}]);

	return _class17;
})(_react2['default'].Component);

Icons.Drive = (function (_React$Component18) {
	_inherits(_class18, _React$Component18);

	function _class18() {
		_classCallCheck(this, _class18);

		_get(Object.getPrototypeOf(_class18.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class18, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement(
					'g',
					null,
					_react2['default'].createElement('polygon', { points: '1.6,65.7 15.3,90.8 48.4,33.7 34.4,9.1 \t' }),
					_react2['default'].createElement('polygon', { points: '83.6,92.4 98.4,67 32.7,67.2 29.9,71.9 18,92.5 \t' }),
					_react2['default'].createElement('polygon', { points: '32.2,66.5 32.2,66.5 32.2,66.5 \t' }),
					_react2['default'].createElement('polygon', { points: '86.2,63.9 91,63.9 91,63.9 98.4,63.8 65.4,7.6 37.2,7.5 51.9,33.4 51.9,33.4  69.3,63.9 \t' }),
					_react2['default'].createElement('polygon', { points: '51.2,33.7 51.2,33.7 51.2,33.7 \t' }),
					_react2['default'].createElement('rect', { x: '68.8', y: '64.7', width: '0', height: '0' }),
					_react2['default'].createElement('polygon', { points: '91,64.6 91,64.6 91,64.6 \t' })
				)
			);
		}
	}]);

	return _class18;
})(_react2['default'].Component);

Icons.DropdownDown = (function (_React$Component19) {
	_inherits(_class19, _React$Component19);

	function _class19() {
		_classCallCheck(this, _class19);

		_get(Object.getPrototypeOf(_class19.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class19, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M25.1,39.9c0-1.2,0.5-2.3,1.3-3.2c1.7-1.7,4.6-1.8,6.3,0L50,54.1l17.3-17.3c1.8-1.7,4.6-1.7,6.3,0 c0.8,0.8,1.3,2,1.3,3.2c0,1.2-0.5,2.3-1.3,3.2L53.2,63.6c-0.8,0.8-2,1.3-3.2,1.3c-1.2,0-2.3-0.5-3.2-1.3L26.4,43.1 C25.5,42.3,25.1,41.1,25.1,39.9z' })
			);
		}
	}]);

	return _class19;
})(_react2['default'].Component);

Icons.DropdownUp = (function (_React$Component20) {
	_inherits(_class20, _React$Component20);

	function _class20() {
		_classCallCheck(this, _class20);

		_get(Object.getPrototypeOf(_class20.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class20, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M74.9,60.4c0,1.2-0.5,2.3-1.3,3.2c-1.7,1.7-4.6,1.8-6.3,0L50,46.3L32.7,63.6c-1.8,1.7-4.6,1.7-6.3,0 c-0.8-0.8-1.3-2-1.3-3.2c0-1.2,0.5-2.3,1.3-3.2l20.5-20.4c0.8-0.8,2-1.3,3.2-1.3c1.2,0,2.3,0.5,3.2,1.3l20.5,20.4 C74.5,58.1,74.9,59.2,74.9,60.4z' })
			);
		}
	}]);

	return _class20;
})(_react2['default'].Component);

Icons.Edit = (function (_React$Component21) {
	_inherits(_class21, _React$Component21);

	function _class21() {
		_classCallCheck(this, _class21);

		_get(Object.getPrototypeOf(_class21.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class21, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { 'fill-rule': 'evenodd', 'clip-rule': 'evenodd', d: 'M47,13.5l18.5,10.7l-3,5.1L44,18.7L47,13.5z M16.4,91.5h67.3v7.3H16.4V91.5z M16.4,87.9l6.4-3.9l-6.2-3.6L16.4,87.9z M25.2,82.5l0.8-0.5l9.6-5.9l-9.3-5.3L17,65.4l-0.3,11.2 l0,0.9L25.2,82.5z M63,2.3l4.2,2.4c3.9,2.3,5.3,7.3,3,11.3l-3.5,6.1L48.2,11.4l3.5-6.1C54,1.4,59.1,0,63,2.3L63,2.3z M61.3,31.5 L36.7,74L18.3,63.3l24.5-42.5L61.3,31.5z' })
			);
		}
	}]);

	return _class21;
})(_react2['default'].Component);

Icons.Embed = (function (_React$Component22) {
	_inherits(_class22, _React$Component22);

	function _class22() {
		_classCallCheck(this, _class22);

		_get(Object.getPrototypeOf(_class22.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class22, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M29.3,69.8c-0.9,0-1.8-0.4-2.5-1L10.7,52.7c-1.4-1.4-1.4-3.6,0-5l16.1-16.1c0.7-0.7,1.5-1,2.5-1 c0.9,0,1.8,0.4,2.5,1c0.7,0.7,1,1.5,1,2.5c0,0.9-0.4,1.8-1,2.5L18.2,50.2l13.6,13.6c0.7,0.7,1,1.6,1,2.5c0,0.9-0.4,1.8-1,2.5 C31.1,69.4,30.2,69.8,29.3,69.8z' }),
				_react2['default'].createElement('path', { d: 'M70.7,69.8c-0.9,0-1.8-0.4-2.5-1c-1.4-1.4-1.4-3.6,0-5l13.6-13.6L68.2,36.6c-1.4-1.4-1.4-3.6,0-5 c0.7-0.7,1.6-1,2.5-1c0.9,0,1.8,0.4,2.5,1l16.1,16.1c0.7,0.7,1,1.6,1,2.5c0,0.9-0.4,1.8-1,2.5L73.2,68.7 C72.6,69.4,71.7,69.8,70.7,69.8z' }),
				_react2['default'].createElement('path', { d: 'M40.9,85.7C40.9,85.7,40.9,85.7,40.9,85.7c-0.3,0-0.6,0-0.9-0.1c-1.9-0.5-3-2.4-2.5-4.3l17.3-64 c0.4-1.5,1.8-2.6,3.4-2.6c0.3,0,0.6,0,0.9,0.1c1.9,0.5,3,2.4,2.5,4.3l-17.3,64C43.9,84.6,42.5,85.7,40.9,85.7z' })
			);
		}
	}]);

	return _class22;
})(_react2['default'].Component);

Icons.Envelope = (function (_React$Component23) {
	_inherits(_class23, _React$Component23);

	function _class23() {
		_classCallCheck(this, _class23);

		_get(Object.getPrototypeOf(_class23.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class23, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M42.8,69.4l-4.7-3.4h23.8l-4.7,3.4H42.8z M97.4,42.2L65.3,67.1l32.9,24.5v-50C97.9,41.9,97.6,42.1,97.4,42.2 z M3.1,40.1l0.3,0.2L18,51.1l0,0l2.7,2V20.8c0-1.4,1.1-2.5,2.5-2.5h53.4c1.4,0,2.5,1.1,2.5,2.5v32.4l1.4-1v0l15.7-11.6 c0.2-0.1,0.4-0.3,0.6-0.5c0.1-0.1,0.3-0.1,0.4-0.2c0,0,0,0,0,0c0,0,0,0,0,0c-0.1-0.1-0.2-0.2-0.4-0.2c-0.2-0.2-0.4-0.3-0.6-0.5 L82,28.5v-7.7c0-2.9-2.4-5.2-5.2-5.2H64.3L51.8,6.3C51.4,6,50.7,5.8,50,5.8c-0.7,0-1.4,0.2-1.8,0.6l-12.5,9.2H23.3 c-2.9,0-5.2,2.4-5.2,5.2v7.7L3.3,39.4l-0.3,0.2c-0.1,0.1-0.3,0.1-0.4,0.2l0,0l0,0C2.8,39.9,2.9,40,3.1,40.1z M71.5,46.6H28.5V50 h42.9V46.6z M71.5,58.9v-2.6H28.5v2.6l1.1,0.8h40.7L71.5,58.9z M52.1,77.4C51.5,77.8,50.8,78,50,78c-0.8,0-1.5-0.2-2.1-0.7 l-11.4-8.8L2.7,93.8c0.4,0.3,0.8,0.4,1.3,0.4H96c0.5,0,0.9-0.2,1.3-0.4L63.4,68.6L52.1,77.4z M2.6,42.3c-0.2-0.2-0.5-0.4-0.8-0.6v50 l32.9-24.5L2.6,42.3z M71.5,36.7H28.5v3.4h42.9V36.7z M71.5,26.9H28.5v3.4h42.9V26.9z' })
			);
		}
	}]);

	return _class23;
})(_react2['default'].Component);

Icons.Expand = (function (_React$Component24) {
	_inherits(_class24, _React$Component24);

	function _class24() {
		_classCallCheck(this, _class24);

		_get(Object.getPrototypeOf(_class24.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class24, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M34.6,38.8c-1,0-2.1-0.4-2.8-1.1L8,14v15.2c0,2.1-1,3.7-3,3.7s-3-1.6-3-3.7v-24c0-0.2-0.3-1.8,0.4-2.6 C3.3,1.8,4.6,2,4.7,2h24.2c2.1,0,3.7,1,3.7,3S31,8,28.8,8H13.6l23.7,24.1c0.7,0.7,1.1,1.8,1.1,2.8c0,1.1-0.4,2.1-1.1,2.8 C36.5,38.4,35.6,38.8,34.6,38.8z' }),
				_react2['default'].createElement('path', { d: 'M5,98c-0.1,0-1.7,0.1-2.5-0.7C1.7,96.5,2,94.9,2,94.8V70.7C2,68.6,3,67,5,67s3,1.6,3,3.7v15.2l24-23.6 c0.7-0.7,1.7-1,2.7-1c1,0,2.1,0.4,2.8,1.1c1.5,1.5,1.5,4.1,0,5.5L13.8,92H29c2.1,0,3.7,1,3.7,3s-1.6,3-3.7,3H5z' }),
				_react2['default'].createElement('path', { d: 'M64.7,38.5c-1.1,0-2.2-0.4-2.9-1.1c-0.7-0.7-1.1-1.6-1.1-2.7c0-1,0.4-2.1,1.1-2.8L85.5,8H70.3 c-2.1,0-3.7-1-3.7-3s1.6-3,3.7-3h24c0.2,0,2.3-0.2,3.1,0.6c0.8,0.8,1.1,2.4,1.1,2.4l0,24.1c0,2.1-1.3,3.7-3.2,3.7 c-2,0-3.2-1.6-3.2-3.7V13.8L67.7,37.5C67,38.1,65.8,38.5,64.7,38.5z' }),
				_react2['default'].createElement('path', { d: 'M70.5,98c-2.1,0-3.7-1-3.7-3s1.6-3,3.7-3h15.2L62.2,67.6c-0.7-0.7-1.1-1.8-1-3c0-1.1,0.4-2.2,1.1-2.9 c0.7-0.7,1.7-1.1,2.7-1.1c1,0,2.2,0.4,2.9,1.1L92,85.4V70.2c0-2.1,1-3.7,3-3.7s3,1.6,3,3.7v24c0,0.3,0,2.4-0.8,3.1 c-0.8,0.8-2.5,0.9-2.6,0.9l0.1-0.2H70.5z' })
			);
		}
	}]);

	return _class24;
})(_react2['default'].Component);

Icons.Facebook = (function (_React$Component25) {
	_inherits(_class25, _React$Component25);

	function _class25() {
		_classCallCheck(this, _class25);

		_get(Object.getPrototypeOf(_class25.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class25, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M57.4,98V54.2h14.7l2.2-17.1H57.4V26.3c0-4.9,1.4-8.3,8.5-8.3l9,0V2.7C73.4,2.5,68,2,61.8,2 c-13,0-21.9,7.9-21.9,22.5v12.6H25.1v17.1h14.7V98L57.4,98L57.4,98z' })
			);
		}
	}]);

	return _class25;
})(_react2['default'].Component);

Icons.Filter = (function (_React$Component26) {
	_inherits(_class26, _React$Component26);

	function _class26() {
		_classCallCheck(this, _class26);

		_get(Object.getPrototypeOf(_class26.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class26, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M50,21.2c-0.8,0-1.6,0-2.4,0c-12-0.3-22.4-2.4-29-4.1c-4.2-1.1-4.2-3.5-0.1-4.7c6.8-1.8,17.8-4,31.5-4 c14,0,24.8,2.2,31.5,4c4.2,1.1,4.1,3.6-0.1,4.7c-6.6,1.7-17,3.9-29,4.1C51.6,21.2,50.8,21.2,50,21.2 M6,14C6,14.2,6,14.5,6,14.8 c0,0.6,0.1,1.1,0.2,1.6c0.2,0.7,0.5,1.4,1,2.1l29.1,40.3c1.6,2.2,3.3,6.1,3.3,8.8v27.6c0,3.4,2.1,4.3,4.6,2.1l14-11.9 c1.3-1.1,2.3-3.3,2.3-5V67.6c0-2.7,1.6-6.7,3.2-8.8l29-40.3c0.5-0.7,0.8-1.4,1-2.2c0.1-0.5,0.2-1,0.2-1.5c0-0.3,0-0.6-0.1-0.9 C92.2,1.8,54.4,1.5,50,1.5C45.6,1.5,7.6,1.8,6,14' })
			);
		}
	}]);

	return _class26;
})(_react2['default'].Component);

Icons.Food = (function (_React$Component27) {
	_inherits(_class27, _React$Component27);

	function _class27() {
		_classCallCheck(this, _class27);

		_get(Object.getPrototypeOf(_class27.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class27, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M96.1,96.2c-0.7,0.8-1.6,1.4-2.5,1.7c-0.5,0.1-1,0.2-1.5,0.2c-1.5,0-3.1-0.6-4.3-1.9L38.9,46.4 c-0.2,0.1-0.4,0.1-0.6,0.2c-1.5,0.4-3.2,0.7-4.9,0.7c-6.9,0-14.8-3.4-19.7-8.4C6,31,1.2,14.1,7.9,6.3c1.5-1.8,3.5-2.9,5.7-3.6 C15.1,2.2,16.7,2,18.4,2c6.9,0,14.8,3.5,19.7,8.4c6.2,6.3,10.5,18.3,8.6,26.9L95.5,87C98,89.6,98.3,93.7,96.1,96.2z M60.9,45.4 c4.8,2.2,10.9,1.1,15-3.2l18-19l0,0L94,23c1.1-1.2,1.2-3.2,0.1-4.5c-1.1-1.2-2.9-1.3-4.1-0.1l-0.1,0.1l0,0L72.2,37.3 c-1.1,1.1-2.6,1.3-3.6,0.2c-1-1.2-0.8-2.8,0.3-3.9c0,0,0,0,0,0l17.8-18.8c1.1-1.2,1.2-3.2,0.1-4.5C85.7,9,83.8,9,82.7,10.2l-0.1,0.1 l0,0L64.8,29c-1.1,1.1-2.6,1.4-3.6,0.2c-1-1.2-0.8-2.8,0.3-4L79.2,6.6h0l0.1-0.1c1.1-1.2,1.2-3.2,0.1-4.5c-1.1-1.3-2.9-1.3-4.1-0.1 L57.2,21c-4.3,4.3-6.5,10.1-5,15C53.5,40.2,56,43.2,60.9,45.4z M38.6,52.4l-34,35.9c-2.4,2.6-3,6.3-0.6,8.9c2.3,2.7,5.8,2.2,8.2-0.4 l34.5-36.4L38.6,52.4z' })
			);
		}
	}]);

	return _class27;
})(_react2['default'].Component);

Icons.Globe = (function (_React$Component28) {
	_inherits(_class28, _React$Component28);

	function _class28() {
		_classCallCheck(this, _class28);

		_get(Object.getPrototypeOf(_class28.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class28, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M50,2.6C23.9,2.6,2.6,23.9,2.6,50S23.9,97.4,50,97.4c26.1,0,47.4-21.3,47.4-47.4S76.1,2.6,50,2.6z M15,29 v0.3c0-0.1,0-0.1-0.1-0.2C15,29,15,29,15,29z M43.1,90.2c-2.1-2.3,1.1-8.1,0.5-10.6c-0.4-1.5-2.6-3.1-3.7-4.4 c-1.1-1.4-2.7-3-3.5-4.6c-1-2.1-0.5-2.9,0.4-4.5c0.7-1.2,0.6-2.3,1.1-3.5c0.2-0.4,1.8-2,1.6-2.4c0-0.1,0-0.1,0-0.2 c-1.2-0.1-2.3,0.1-3.2-0.6c-0.8-0.6-1-2.4-1.7-3.1c-1.8-1.6-4.7-0.7-6.7-2.1c-1.8-1.3-3.8-2.5-5-4.3c-1.1-1.7-1.5-6-3.6-6.4 c0,2.1-0.3,2.7,0.6,4.8c0.6,1.2,1.7,4.1-1,3.4c-0.1-2.1-0.1-3.8-0.6-5.7c-0.5-1.9-2-3.8-2.4-5.8c-0.4-1.9-0.2-3.9-0.2-5.8 c0-2-0.7-3.7-0.8-5.5c1.3-2.1,2.7-4.1,4.4-5.9c1.2-1.3,2.4-2.5,4-3.2c1.6-0.6,3.4-1.5,5.1-1.9c1.8-0.4,3.9-0.4,5.8-0.5 C34,16.2,32.6,15,35,15.2c1.4,0.1,1.8,1.5,3.4,0.8c-0.7-0.7-2.9-2.1-0.7-2.4c0-0.8,0-1.6,0.1-2.3c0.5-0.3,1-0.5,1.5-0.7 c2.5-0.7,5-1.1,7.6-1.3c0.4,0.1,0.7,0.2,1,0.3c0.2-0.1,0.4-0.3,0.6-0.4c0.5,0,0.9,0,1.4,0c5.7,0,11.1,1.2,16,3.3 c0.3,0.4,0.5,0.7,0.9,1c0.7,0.5,2.2,0.9,0.7,1.1c-0.5,0.1-0.9-0.2-1.2,0.2c-0.4,0.5,0.2,0.9-0.7,1.3c-0.8,0.4-1.9-0.4-2.3,0.6 c-0.4,0.9,0.4,2.1,0.1,3c-0.3,1.1-1.7,0.9-2.7,0.8c-2-0.1-4.2-1.5-5.4-3.1c-0.4-0.5-1.3-2-0.9-2.7c0.3-0.6,0.9-0.2,1.2-0.6 c0.3-0.4-0.2-1.1-0.6-1.3c-0.1,0.8-0.6,1-1.2,0.7c-0.9-0.5-0.4-1.5-0.9-2.2c-0.7-1.1-2.4-0.7-3.5-1.1c-0.6-0.2-1-0.4-1.5-0.6 c-0.4,0.2-0.7,0.5-1.1,0.6c-0.9,0.3-1.9,0.3-2.7,0.9c-2.3,1.8,0.4,1.8,1.7,2.1c1.7,0.4,2.6,2.1,4,2.6c1.9,0.8,2.7-0.3,2.4,2.6 c-1.1,0.3-2.1-0.2-2.7-1.1c0.5,0.8,0.8,1.8,0.7,2.9c-1.8,0.6-2.6-0.2-4.1-0.8c-1.2-0.5-2.7-0.3-3.8-1c-0.1-0.3-0.1-0.6,0-0.9 c1.3,0,2.7-0.1,2.1-1.8c-2.4-0.2-2.9,0.9-4.4,2.3c3.6,1.2,0.4,2.4-1.6,2.3c-1.7-0.1-4.3-0.4-5.3,1.7c-0.9,2,2.1,2.5,3.7,3 c1,0.3,1.4,0.1,2.1,0.9c0.7,0.8,0.3,1.8,1.4,2.4c0.5-0.9-0.4-1.9-0.2-2.4c0.5-1.2,1.2-0.5,2.4-1c-0.6-1.3-2.4-1.8-2-3.2 c0.4-1.5,2.5-1.5,3.8-1.4c2,0.1,2,1.1,3.4,1.6c2.2,0.7,2.2-0.8,3.7,1.6c1.6,2.5,3.2,3.7,5.3,5.6c3.8,3.5-3,3.4-3.8,0.8 c0.3-0.1,0.8-0.5,1-0.6c-1.4-0.6-4.5-0.6-6.2-0.2c-0.1,0.4-0.1,0.6,0,1c1.5,0.1,1.9,0.1,2.7,0.7c0.3,0.2-0.1,1,0.4,1.3 c0.3,0.2,1.6-0.1,2-0.1c0.4,2.3-4.9,1.4-6.1,2.2c0,0.5-0.3,0.9-0.3,1.4c-3-0.4-2.8,2.5-3.8,4.2c-0.7,1.3-2.3,2.2-3.2,3.4 c-0.4,0.6-1.2,1.1-1.1,1.9c0.1,1.4,1.7,0.7,1.7,1.9c0,2.5-3.3-0.1-3.8-1.4c-3-0.6-6.9-1-8,2.4c-0.5,1.4,0.1,3.4,1.8,3.6 c1.5,0.1,0.9-0.9,2-1.3c0.6-0.2,1.7,0,2.3,0c0.5,1.4,0.3,2.1,1,3.2c0.9,1.2,0.9,1,1.4,2.5c0.4,1.1,0.7,2.2,2,2.7 c1.3,0.4,2.9-0.5,3,1.4c2.4,0.1,4.4,0,6.3,1.5c1.4,1.1,2.1,2.4,3.8,2.9c2.7,0.9,3.5,0.6,4.2,3.4c0.3,1.3-0.7,1.7,1.2,2.1 c1.1,0.2,2.5-0.5,3.6-0.4c1.9,0.1,3.8,1.2,3.8,3.4c0,1.2-0.5,1.5-1,2.4c-0.6,1.1-0.7,2.6-1.4,3.7c-1.3,2.1-3.7,1.2-5.2,3.1 c-0.5,0.7-0.3,1.7-1.1,2.5c-0.6,0.5-2.3,0.6-2.8,1c-1,0.8-0.5,1.4-1.5,2.4c-0.6,0.6-2.2,0.3-2.9,0.6c-1.2,0.6-1.9,1.8-2.8,2.4 C45.3,90.6,44.2,90.4,43.1,90.2z M84,66.7c0.2-1.5,0.4-3,0.8-4.4c0.4-1.5,0.6-2.9,0.5-4.5c0-0.7,0-1.9-0.5-2.4 c-0.2-0.2-1.7-0.9-2-0.9c-0.9,0-1.8,1.4-2.7,1.6c-1.1,0.3-2-0.4-2.7-1.1c-0.9-1-1.9-1.6-2.8-2.6c-1.1-1.1-1.3-2.6-1.3-4.1 c0-1.5,0.2-2.6,0.6-4c0.2-0.6,0.4-1.2,0.5-1.9c0.3-1.3,0.4-0.6,1-1.3c0.6-0.7,0.9-1.9,1.4-2.8c0.5-0.9,1-1.6,1.7-2.2 c-1.7-0.7-1.7-3.6-1.1-5.2c0.8-0.1,3.3,0.3,2-1.5c-0.4-0.6-1.7-0.4-1-1.5c0.4-0.6,1.2-0.6,1.8-0.6c0.1-0.7,0.4-1,1-1.2l-0.2-0.1 c-0.6-0.5-1.4-1.2-1.9-1.8c-0.6-0.6-1-2.4-0.1-2.7c2.5,2.6,4.7,5.5,6.5,8.6c0.1,0.2,0.1,0.4,0.2,0.6c0.3,0.8,0.8,1.6,1.1,2.4 c0.2,0.4,0.4,0.7,0.6,1c0.6,1.5,1.2,2.9,1.6,4.5c0,0.1,0,0.3-0.1,0.4c-1.1-0.4-1.7-2.3-2.4-3.3c0,0.4,0,0.8-0.1,1.1 c-0.2,0-0.5-0.1-0.6-0.2c-0.3-0.6-0.7-1.2-1.1-1.8c0.1,0.2,0.1,0.4,0,0.6c-1.2,0-0.9-1.4-1.2-2.1c-0.3-0.9-1.2-1.4-2.1-0.7 c-0.6,0.5-0.6,1.6-1.1,2.2c-0.3,0.3-0.6,0.4-0.8,0.6c-0.3,0.3-0.6,0.3-0.4,0.9c1-0.3,1.8-0.4,3-0.3c0.8,0.1,2.2-0.1,2.7,0.3 c0.3,0.3,0.3,0.8,0.4,1.2c0.2,0.4,0.4,0.6,0.7,1c0.4,0.6,1,2.2,1.8,2.1c0-0.2,0.1-0.5,0-0.7c1.4,0.5,1.9,3,2.1,4.4 c0.3,2.6,0.5,5.5,0.5,8.3c-0.4,7-2.6,13.5-6.1,19.1C84.2,70.3,83.9,67.7,84,66.7z' })
			);
		}
	}]);

	return _class28;
})(_react2['default'].Component);

Icons.Graph = (function (_React$Component29) {
	_inherits(_class29, _React$Component29);

	function _class29() {
		_classCallCheck(this, _class29);

		_get(Object.getPrototypeOf(_class29.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class29, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M93.5,90H10V6.5c0-2.2-1.3-4-3.5-4C4.3,2.5,3,4.3,3,6.5v87C3,95.7,4.3,97,6.5,97h87c2.2,0,4-1.3,4-3.5 C97.5,91.3,95.7,90,93.5,90z' }),
				_react2['default'].createElement('path', { d: 'M37,60.1c0-1.9-1.5-3.1-3.3-3.1H20.2c-1.9,0-3.2,1.2-3.2,3.1v18.8c0,1.9,1.3,3.1,3.2,3.1h13.5 c1.9,0,3.3-1.3,3.3-3.1V60.1z M23,63h8v13h-8V63z' }),
				_react2['default'].createElement('path', { d: 'M90,11.6C90,9.7,88.5,8,86.6,8H73.1C71.3,8,70,9.7,70,11.6v67.3c0,1.9,1.3,3.1,3.1,3.1h13.5 c1.9,0,3.4-1.3,3.4-3.1V11.6z M77,15h7v61h-7V15z' }),
				_react2['default'].createElement('path', { d: 'M63,36.3c0-1.9-1-3.3-2.9-3.3H46.7c-1.9,0-3.7,1.4-3.7,3.3v42.6c0,1.9,1.8,3.1,3.7,3.1h13.5 c1.9,0,2.9-1.3,2.9-3.1V36.3z M50,40h8v36h-8V40z' })
			);
		}
	}]);

	return _class29;
})(_react2['default'].Component);

Icons.Grid = (function (_React$Component30) {
	_inherits(_class30, _React$Component30);

	function _class30() {
		_classCallCheck(this, _class30);

		_get(Object.getPrototypeOf(_class30.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class30, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement(
					'g',
					null,
					_react2['default'].createElement('rect', { x: '6.5', y: '6.5', width: '24.8', height: '24.8' }),
					_react2['default'].createElement('rect', { x: '37.6', y: '6.5', width: '24.8', height: '24.8' }),
					_react2['default'].createElement('rect', { x: '68.7', y: '6.5', width: '24.8', height: '24.8' }),
					_react2['default'].createElement('rect', { x: '6.5', y: '37.6', width: '24.8', height: '24.8' }),
					_react2['default'].createElement('rect', { x: '37.6', y: '37.6', width: '24.8', height: '24.8' }),
					_react2['default'].createElement('rect', { x: '68.7', y: '37.6', width: '24.8', height: '24.8' }),
					_react2['default'].createElement('rect', { x: '6.5', y: '68.7', width: '24.8', height: '24.8' }),
					_react2['default'].createElement('rect', { x: '37.6', y: '68.7', width: '24.8', height: '24.8' }),
					_react2['default'].createElement('rect', { x: '68.7', y: '68.7', width: '24.8', height: '24.8' })
				)
			);
		}
	}]);

	return _class30;
})(_react2['default'].Component);

Icons.Help = (function (_React$Component31) {
	_inherits(_class31, _React$Component31);

	function _class31() {
		_classCallCheck(this, _class31);

		_get(Object.getPrototypeOf(_class31.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class31, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M50,0.7C22.8,0.7,0.7,22.8,0.7,50S22.8,99.3,50,99.3S99.3,77.2,99.3,50S77.2,0.7,50,0.7z M50,78 c-2.4,0-4.3-2-4.3-4.3c0-2.4,1.9-4.3,4.3-4.3c2.4,0,4.3,1.9,4.3,4.3C54.3,76.1,52.4,78,50,78z M60,51.9c-3,2.5-5.6,4.6-5.6,7.9 c0,2.4-1.9,4.3-4.3,4.3c-2.4,0-4.3-1.9-4.3-4.3c0-5.8,4.2-8.8,8.4-11.8c3.8-2.7,7.4-5.3,7.4-9.9c0-5.9-4.3-9.5-11.4-9.5 c-10.3,0-11.4,7.3-11.4,10.5c0,1.8-1.5,3.4-3.4,3.4c-1.9,0-3.4-1.5-3.4-3.4C31.8,30.9,37.5,22,50,22c11.9,0,18.2,8.1,18.2,16.2 C68.2,45.2,63.8,48.8,60,51.9z' })
			);
		}
	}]);

	return _class31;
})(_react2['default'].Component);

Icons.Home = (function (_React$Component32) {
	_inherits(_class32, _React$Component32);

	function _class32() {
		_classCallCheck(this, _class32);

		_get(Object.getPrototypeOf(_class32.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class32, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement(
					'g',
					null,
					_react2['default'].createElement('path', { d: 'M91.7,57.4c-1.4,0-2.8-0.5-3.9-1.6L49.8,18L12.3,55.8c-2.2,2.2-5.7,2.2-7.9,0 c-2.2-2.2-2.2-5.7,0-7.9L45.9,6.2c1-1,2.5-1.6,3.9-1.6c0,0,0,0,0,0c1.5,0,2.9,0.6,3.9,1.6l41.9,41.8c2.2,2.2,2.2,5.7,0,7.9 C94.6,56.9,93.1,57.4,91.7,57.4z' }),
					_react2['default'].createElement('path', { d: 'M78.4,28.1c0.1-0.2,0.1-0.5,0.1-0.7V12.1c0-1.2-0.9-2.1-2.1-2.1h-9.8 c-1.2,0-2.1,0.9-2.1,2.1v2.3L78.4,28.1z' }),
					_react2['default'].createElement('path', { d: 'M78.4,28.2L78.4,28.2L64.5,14.4v-2.3c0-1.2,1-2.2,2.2-2.2h9.8c1.2,0,2.2,1,2.2,2.2v15.3 c0,0.2,0,0.5-0.1,0.7L78.4,28.2z M64.7,14.3L78.4,28c0.1-0.2,0.1-0.4,0.1-0.6V12.1c0-1.1-0.9-2-2-2h-9.8c-1.1,0-2,0.9-2,2V14.3z' }),
					_react2['default'].createElement('path', { d: 'M50,20.8L16.4,54.4v41.1h23.4v-32c0-1.2,0.9-2.1,2.1-2.1H58c1.2,0,2.1,0.9,2.1,2.1v32h23.4 V54.4L50,20.8z' })
				)
			);
		}
	}]);

	return _class32;
})(_react2['default'].Component);

Icons.Info = (function (_React$Component33) {
	_inherits(_class33, _React$Component33);

	function _class33() {
		_classCallCheck(this, _class33);

		_get(Object.getPrototypeOf(_class33.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class33, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M50,1C22.9,1,1,22.9,1,50c0,27.1,21.9,49,49,49c27.1,0,49-21.9,49-49C99,22.9,77.1,1,50,1z M49.5,75.8 c-2.3,0-4.5-1.6-4.5-4.1v-8.5v-6.4v-8.4c0-2.4,2.2-4.1,4.5-4.1c2.4,0,4.5,1.7,4.5,4.1v8.4v6.4v8.5C54,74.1,51.9,75.8,49.5,75.8z M54.5,33.8c0,2.7-2.2,5-5,5c-2.7,0-5-2.2-5-5c0-2.7,2.2-5,5-5C52.3,28.9,54.5,31.1,54.5,33.8z' })
			);
		}
	}]);

	return _class33;
})(_react2['default'].Component);

Icons.Jazz = (function (_React$Component34) {
	_inherits(_class34, _React$Component34);

	function _class34() {
		_classCallCheck(this, _class34);

		_get(Object.getPrototypeOf(_class34.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class34, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement(
					'g',
					null,
					_react2['default'].createElement('path', { d: 'M25.1,32.2c0,4.2,0,8.3,0,12.5c0,0,0.1,0,0.1,0c0.1-0.2,0.2-0.4,0.3-0.7 c2.3-5.5,8.2-8.4,13.8-6.9c1.8,0.5,3.2,1.5,4.4,3.2c0.2-1.1,0.3-2.1,0.4-3.2c2.3,0,4.7,0,7,0c0,8.3,0,16.6,0,24.9c-2.3,0-4.6,0-7,0 c-0.1-0.9-0.2-1.8-0.3-2.9c-0.1,0.1-0.2,0.2-0.3,0.3c-1.5,2.1-3.6,3-6.1,3.2c-5.5,0.4-10.1-2.6-12.1-7.7c-0.1-0.1-0.1-0.3-0.2-0.4 c-0.3,1.3-0.6,2.6-1.1,3.9c-1.9,4.9-5.6,7.7-10.7,8.8c-1.5,0.3-3.1,0.4-4.7,0.4c-1.7,0.1-3.4,0-5.1,0c0-2.9,0-5.7,0-8.6 c1.9,0,3.8,0,5.7,0c1.5,0,2.7-0.5,3.8-1.6c1.7-1.6,2.3-3.7,2.3-5.9c0-5.3,0-10.6,0-15.9c0-1.2,0-2.4,0-3.6 C18.7,32.2,21.9,32.2,25.1,32.2z M37.4,55.1c2.9,0,5.4-2.4,5.4-5.3c0-2.9-2.5-5.3-5.4-5.3c-2.9,0-5.3,2.4-5.3,5.3 C32.1,52.6,34.5,55.1,37.4,55.1z' }),
					_react2['default'].createElement('path', { d: 'M52.2,44.5c0-2.5,0-4.9,0-7.3c7.1,0,14.3,0,21.5,0c0,0.2,0,0.5,0,0.7c0,2,0,3.9,0,5.9 c0,0.5-0.1,0.8-0.5,1.1c-3.5,3.2-6.9,6.3-10.3,9.5c-0.2,0.1-0.3,0.3-0.5,0.5c3.8,0,7.5,0,11.3,0c0,2.4,0,4.8,0,7.1 c-7.2,0-14.3,0-21.5,0c0-0.3,0-0.5,0-0.7c0-1.9,0-3.8,0-5.7c0-0.5,0.1-0.8,0.5-1.2c3.1-3.1,6.3-6.3,9.4-9.5 c0.1-0.1,0.3-0.3,0.5-0.6C59.1,44.5,55.7,44.5,52.2,44.5z' }),
					_react2['default'].createElement('path', { d: 'M74.7,44.6c0-2.5,0-4.9,0-7.3c7.1,0,14.2,0,21.4,0c0,1,0,2.1,0,3.1c0,1.2,0,2.3,0,3.5 c0,0.5-0.1,0.8-0.5,1.2c-3.4,3.1-6.7,6.3-10.1,9.4c-0.2,0.2-0.4,0.3-0.5,0.6c3.7,0,7.5,0,11.3,0c0,2.4,0,4.7,0,7.1 c-7.2,0-14.3,0-21.5,0c0-0.1-0.1-0.1-0.1-0.2c0-2.2,0-4.3,0-6.5c0-0.3,0.2-0.6,0.4-0.8c3-3.1,6-6.1,9-9.1c0.3-0.3,0.6-0.5,0.9-0.8 c0-0.1-0.1-0.1-0.1-0.2C81.6,44.6,78.2,44.6,74.7,44.6z' })
				)
			);
		}
	}]);

	return _class34;
})(_react2['default'].Component);

Icons.Laptop = (function (_React$Component35) {
	_inherits(_class35, _React$Component35);

	function _class35() {
		_classCallCheck(this, _class35);

		_get(Object.getPrototypeOf(_class35.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class35, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement(
					'g',
					null,
					_react2['default'].createElement('path', { d: 'M1.2,74.2c0,4.4,2.4,8.2,5.4,8.7h86.8c3-0.5,5.4-4.2,5.4-8.7H1.2z' }),
					_react2['default'].createElement('path', { d: 'M85.8,17.1H14.2c-2.1,0-3.9,1.7-3.9,3.9v47.6c0,2.1,1.7,3.9,3.9,3.9h71.7 c2.1,0,3.9-1.7,3.9-3.9V21C89.7,18.9,88,17.1,85.8,17.1z M80.6,61.3c0,1.7-1.4,3-3.2,3H22.6c-1.8,0-3.2-1.4-3.2-3V27.7 c0-1.7,1.4-3,3.2-3h54.7c1.8,0,3.2,1.4,3.2,3V61.3z' }),
					_react2['default'].createElement('rect', { x: '73.7', y: '77.1', width: '6.4', height: '2.3' }),
					_react2['default'].createElement('rect', { x: '82.2', y: '77.1', width: '6.4', height: '2.3' }),
					_react2['default'].createElement('polygon', { points: '71.5,49.5 57.3,44.1 62.7,58.3 66.2,54.8 70.4,58.9 72.1,57.2 67.9,53.1 \t' })
				)
			);
		}
	}]);

	return _class35;
})(_react2['default'].Component);

Icons.Left = (function (_React$Component36) {
	_inherits(_class36, _React$Component36);

	function _class36() {
		_classCallCheck(this, _class36);

		_get(Object.getPrototypeOf(_class36.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class36, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M5,54l32.8,32.8c2.6,2.6,6.5,2.8,9.1,0.2c2.6-2.6,2.4-6.5-0.2-9.1L24.8,56.2l66.1,0c3.6,0,6.6-2.9,6.6-6.5 c0-3.6-2.9-6.5-6.5-6.5l-66.1,0l21.8-21.8c2.6-2.6,2.8-6.5,0.2-9.1c-2.6-2.6-6.5-2.4-9.1,0.2l-33,33c0,0-2.3,2.2-2.3,4.2 C2.5,51.5,5,54,5,54L5,54z' })
			);
		}
	}]);

	return _class36;
})(_react2['default'].Component);

Icons.Like = (function (_React$Component37) {
	_inherits(_class37, _React$Component37);

	function _class37() {
		_classCallCheck(this, _class37);

		_get(Object.getPrototypeOf(_class37.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class37, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M21.4,97.5c-1.7,0-3.3-1.2-3.8-2.8L3.8,47.6c-0.3-1-0.2-2.1,0.3-3c0.5-0.9,1.3-1.6,2.3-1.9l23.6-7 c0.4-0.1,0.7-0.2,1.1-0.2c0.7,0,1.3,0.2,1.9,0.5c0.7,0.4,1.3,1,1.6,1.7l0,0c4.2-4.1,9.8-10.5,12.2-14.6l0,0c1.5-5.4,1-11.6,0.9-12.8 c-0.2-1.7,0.3-3.4,1.5-4.7c2.7-3,7.9-3.1,8.5-3.1c2,0,4,1,5.6,2.7c3.3,3.6,4.8,10,4.2,17.6c-0.1,0.9-0.2,1.8-0.3,2.8l0,0.3 c-0.1,0.6-0.2,1.2-0.3,1.9c-0.1,0.8-0.1,1.5-0.1,2.3v0c1.9,0.7,7,1.6,15.1,1.6l1.6,0c7.2,0,13.1,5.8,13.1,13c0,2.8-0.9,5.4-2.5,7.7 c0.2,0.9,0.2,1.8,0.2,2.7c-0.2,2.9-1.5,5.7-3.7,7.7l0,0.2c-0.2,3.7-2.3,7.2-5.6,9.2l0,0c-0.1,0.3-0.2,0.6-0.3,0.8 c-1.4,3.8-5.4,5.9-11.2,5.9c-1,0-2-0.1-3.2-0.2c-2.3-0.3-5.9-0.6-10-0.9l-6.2-0.5c-1.9-0.2-3.8-0.3-5.5-0.3c-0.8,0-1.5,0-2.2,0.1 l2.5,8.6c0.3,1,0.2,2.1-0.3,3c-0.5,0.9-1.3,1.6-2.3,1.9l-23.6,7C22.1,97.4,21.8,97.5,21.4,97.5z M12.4,49.3l11.6,39.4L40.1,84 l-2.4-8c-0.3-0.4-0.5-0.8-0.6-1.2l-8.5-28.7c-0.1-0.4-0.2-0.9-0.1-1.3l-0.1-0.4l-16.1,4.7L12.4,49.3z M48.4,69 c1.8,0,3.9,0.1,6.2,0.3l6.3,0.5c4.2,0.4,7.8,0.7,10.2,1c0.8,0.1,1.5,0.1,2.2,0.1c2.7,0,3.7-0.7,3.8-0.8l0,0c0.1-0.4,0.2-0.8,0.3-1.2 c0.2-1.5,1.2-2.8,2.6-3.3c1.5-0.5,2.5-1.8,2.6-3.3c0-0.3,0-0.5-0.1-0.9c-0.3-1.6,0.5-3.3,1.9-4.1c1.1-0.6,1.8-1.7,1.8-2.9 c0-0.6-0.1-1.1-0.3-1.7c-0.7-1.5-0.3-3.3,1-4.5c1.1-1,1.7-2.3,1.7-3.8c0-2.8-2.3-5.1-5.1-5.1c-0.2,0-0.8,0-1.7,0 c-11.6,0-18.6-1.4-21.3-4.2c-1.1-1.1-1.7-2.6-1.7-4.1c0-1.3,0.1-2.7,0.2-4.2c0.1-0.8,0.2-1.4,0.3-2l0.1-0.4c0.1-0.8,0.2-1.6,0.3-2.3 c0.6-7.1-1.3-11-2.3-11.8c-0.5,0-1.2,0.2-1.8,0.3v0c0.2,2.6,0.4,9.3-1.4,15.2c-0.1,0.2-0.2,0.5-0.3,0.7c-3,5.5-11,14.5-16.7,19.6 L44,69.2C45.4,69.1,46.9,69,48.4,69z' })
			);
		}
	}]);

	return _class37;
})(_react2['default'].Component);

Icons.Link = (function (_React$Component38) {
	_inherits(_class38, _React$Component38);

	function _class38() {
		_classCallCheck(this, _class38);

		_get(Object.getPrototypeOf(_class38.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class38, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement(
					'g',
					null,
					_react2['default'].createElement('path', { d: 'M29.3,70.7c0.8,0.8,1.8,1.2,2.8,1.2c1,0,2-0.4,2.8-1.2L69.6,36c1.6-1.6,1.6-4.1,0-5.6 c-1.6-1.6-4.1-1.6-5.6,0L29.3,65.1C27.8,66.6,27.8,69.1,29.3,70.7z' }),
					_react2['default'].createElement('path', { d: 'M91.2,10L90,8.9c-8.3-8.3-21.8-8.3-30.1,0l-9.9,9.9c-4.4,4.4-6.7,10.6-6.1,16.9c0.2,2.2,2.1,3.8,4.3,3.6 c2.2-0.2,3.8-2.1,3.6-4.3c-0.3-3.9,1-7.8,3.8-10.6l9.9-9.9c5.2-5.2,13.7-5.2,18.9,0l1.1,1.1c5.2,5.2,5.2,13.7,0,18.9l-9.9,9.9 c-2.8,2.8-6.6,4.2-10.6,3.8C63,48,61,49.5,60.8,51.7c-0.2,2.2,1.4,4.1,3.6,4.3c0.7,0.1,1.3,0.1,1.9,0.1c5.6,0,11-2.2,14.9-6.2 l9.9-9.9C99.4,31.8,99.5,18.3,91.2,10z' }),
					_react2['default'].createElement('path', { d: 'M51.7,60.8c-2.2,0.2-3.8,2.1-3.6,4.3c0.4,3.9-1,7.8-3.8,10.5l-9.9,9.9c-5.2,5.2-13.7,5.2-18.9,0l-1.1-1.1 c-2.5-2.5-3.9-5.9-3.9-9.4c0-3.6,1.4-6.9,3.9-9.4l9.9-9.9c2.8-2.8,6.6-4.1,10.6-3.8c2.2,0.2,4.1-1.4,4.3-3.6 c0.2-2.2-1.4-4.1-3.6-4.3c-6.3-0.5-12.5,1.7-16.9,6.1l-9.9,9.9c-4,4-6.2,9.4-6.2,15.1c0,5.7,2.2,11,6.2,15l1.1,1.1 c4.2,4.1,9.6,6.2,15.1,6.2s10.9-2.1,15-6.2l9.9-9.9c4.4-4.4,6.6-10.6,6.1-16.9C55.8,62.2,53.9,60.6,51.7,60.8z' })
				)
			);
		}
	}]);

	return _class38;
})(_react2['default'].Component);

Icons.List = (function (_React$Component39) {
	_inherits(_class39, _React$Component39);

	function _class39() {
		_classCallCheck(this, _class39);

		_get(Object.getPrototypeOf(_class39.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class39, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement(
					'g',
					null,
					_react2['default'].createElement(
						'g',
						null,
						_react2['default'].createElement('path', { d: 'M87.2,30.1H30.6c-3.5,0-6.3-2.8-6.3-6.3c0-3.5,2.8-6.3,6.3-6.3h56.6c3.5,0,6.3,2.8,6.3,6.3 C93.5,27.3,90.7,30.1,87.2,30.1L87.2,30.1z' })
					),
					_react2['default'].createElement('circle', { cx: '12.8', cy: '23.8', r: '6.3' }),
					_react2['default'].createElement(
						'g',
						null,
						_react2['default'].createElement('path', { d: 'M87.2,56.8H30.6c-3.5,0-6.3-2.8-6.3-6.3c0-3.5,2.8-6.3,6.3-6.3h56.6c3.5,0,6.3,2.8,6.3,6.3 C93.5,54,90.7,56.8,87.2,56.8L87.2,56.8z' })
					),
					_react2['default'].createElement('circle', { cx: '12.8', cy: '50.5', r: '6.3' }),
					_react2['default'].createElement(
						'g',
						null,
						_react2['default'].createElement('path', { d: 'M87.2,83.6H30.6c-3.5,0-6.3-2.8-6.3-6.3c0-3.5,2.8-6.3,6.3-6.3h56.6c3.5,0,6.3,2.8,6.3,6.3 C93.5,80.8,90.7,83.6,87.2,83.6L87.2,83.6z' })
					),
					_react2['default'].createElement('circle', { cx: '12.8', cy: '77.3', r: '6.3' })
				)
			);
		}
	}]);

	return _class39;
})(_react2['default'].Component);

Icons.Map = (function (_React$Component40) {
	_inherits(_class40, _React$Component40);

	function _class40() {
		_classCallCheck(this, _class40);

		_get(Object.getPrototypeOf(_class40.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class40, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { fillRule: 'evenodd', clipRule: 'evenodd', d: 'M29,12.4l-20.6-3l0,0c-0.2,0-0.3,0-0.5,0c-1,0-2,0.5-2.7,1.2 c-0.8,0.8-1.3,1.8-1.4,2.9c0,0.2,0,0.5,0,0.7v68.4c0,0.3,0,0.6,0.1,0.9c0.2,1.1,0.7,2.1,1.5,2.8c0.7,0.7,1.6,1.2,2.6,1.2 c0.2,0,0.4,0,0.6,0L29,83.8c0.3-0.1,0.6-0.1,0.9-0.2c0.3-0.1,0.6-0.2,0.8-0.3l0.2-0.1l0.2,0.1c0.3,0.1,0.5,0.2,0.8,0.3 c0.3,0.1,0.6,0.1,0.9,0.2l20.6,3.7c0.3,0,0.5,0.1,0.8,0c0.3,0,0.5-0.1,0.8-0.1l0.2,0l0.2,0c0.2,0.1,0.5,0.1,0.8,0.1 c0.3,0,0.5,0,0.8,0l4.4-0.8l-0.2-0.2c-3-3.3-6.1-6.8-8.9-10.1V78v0v0l0,0.1v0c0,0.3-0.2,0.7-0.4,0.9c-0.3,0.3-0.6,0.4-1,0.4h0h-0.1 l0,0l-15.4-1.6c-0.4,0-0.7-0.2-1-0.4c-0.3-0.2-0.4-0.6-0.4-1l0,0V54.7l7.9-13.9c0.3,0.1,0.6,0.1,0.9,0.1c0.5,0,0.9-0.1,1.3-0.3 c0.8-1.8,1.7-3.5,2.8-5.1l-0.4-0.1c-0.4-2.1-1.9-3.6-3.7-3.6c-2.1,0-3.8,2.1-3.8,4.6c0,0.6,0.1,1.1,0.2,1.6l-5.3,9.3V19.8l0,0 c0-0.4,0.2-0.7,0.4-1c0.2-0.2,0.6-0.4,1-0.4L50.8,17h0h0h0c0.4,0,0.7,0.1,1,0.4l0,0c0.2,0.2,0.4,0.6,0.4,0.9v0l0,0v0v0v11.2 c1.8-1.5,3.8-2.8,6-3.9v-7.2v0l0,0l0,0v0c0-0.4,0.2-0.7,0.4-0.9c0.3-0.3,0.6-0.4,1-0.4h0h0h0l15.4,1.4c0.4,0,0.7,0.2,1,0.4l0,0 c0.3,0.3,0.4,0.6,0.4,1v3.2c2.1,0.4,4.1,0.9,6,1.7v-7.5c0-1.3-0.5-2.3-1.3-3.1l0,0c-0.9-0.9-2.2-1.5-3.6-1.7L57,9.4 c-0.3,0-0.5,0-0.8,0l0,0c-0.3,0-0.5,0.1-0.8,0.2l-0.2,0.1l-0.2-0.1c-0.2-0.1-0.5-0.1-0.8-0.2h0c-0.3,0-0.5,0-0.8,0l-20.6,3 c-0.3,0-0.6,0.1-0.9,0.2c-0.3,0.1-0.6,0.2-0.8,0.3L30.9,13l-0.2-0.1c-0.3-0.1-0.5-0.2-0.8-0.3C29.6,12.5,29.3,12.5,29,12.4L29,12.4z M71.4,90.6C65.2,83.4,56.3,74.3,51,66.8c-3-4.2-4.5-9.2-4.5-14.3c0-13.8,11.2-24.9,24.9-24.9c13.8,0,24.9,11.2,24.9,24.9 c0,5.2-1.6,10.1-4.5,14.3C86.5,74.3,77.6,83.4,71.4,90.6L71.4,90.6z M71.4,34.1c10.1,0,18.4,8.2,18.4,18.4 c0,10.1-8.2,18.4-18.4,18.4c-10.1,0-18.4-8.2-18.4-18.4C53.1,42.3,61.3,34.1,71.4,34.1L71.4,34.1z M18.8,59.5 c-2.1,0-3.8,2.1-3.8,4.6c0,2.5,1.7,4.6,3.8,4.6c2.1,0,3.8-2.1,3.8-4.6c0-0.1,0-0.2,0-0.3l5.4-3.6v16.2v0v0c0,0.4-0.2,0.7-0.4,1 c-0.3,0.2-0.6,0.4-1,0.4l-15.4,1.6l0,0H11h0c-0.4,0-0.7-0.2-0.9-0.4l0,0c-0.2-0.2-0.4-0.6-0.4-0.9l0,0V78l0,0V18.5l0,0v-0.1v0 c0-0.4,0.2-0.7,0.4-0.9c0.2-0.3,0.6-0.4,1-0.4l0,0h0.1h0l15.4,1.4c0.4,0,0.7,0.2,1,0.4c0.3,0.2,0.4,0.6,0.4,1v0v0v35.8l-7,4.7 C20.4,59.8,19.6,59.5,18.8,59.5z' })
			);
		}
	}]);

	return _class40;
})(_react2['default'].Component);

Icons.Minus = (function (_React$Component41) {
	_inherits(_class41, _React$Component41);

	function _class41() {
		_classCallCheck(this, _class41);

		_get(Object.getPrototypeOf(_class41.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class41, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M50,1C22.9,1,1,22.9,1,50c0,27.1,21.9,49,49,49c27.1,0,49-21.9,49-49C99,22.9,77.1,1,50,1z M74,50.7 c0,2.4-1.5,4.3-3.9,4.3H55.4H44.4H29.9c-2.4,0-4.9-1.8-4.9-4.3v-1.4c0-2.4,2.5-4.3,4.9-4.3h14.5h11.1h14.7c2.4,0,3.9,1.9,3.9,4.3 V50.7z' })
			);
		}
	}]);

	return _class41;
})(_react2['default'].Component);

Icons.More = (function (_React$Component42) {
	_inherits(_class42, _React$Component42);

	function _class42() {
		_classCallCheck(this, _class42);

		_get(Object.getPrototypeOf(_class42.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class42, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement(
					'g',
					null,
					_react2['default'].createElement('path', { d: 'M12.7,42.3c-4.3,0-7.8,3.5-7.8,7.8c0,4.3,3.5,7.8,7.8,7.8c4.3,0,7.8-3.5,7.8-7.8 C20.5,45.8,17,42.3,12.7,42.3 M12.7,61.7c-6.4,0-11.6-5.2-11.6-11.6c0-6.4,5.2-11.6,11.6-11.6c6.4,0,11.6,5.2,11.6,11.6 C24.3,56.5,19.1,61.7,12.7,61.7' }),
					_react2['default'].createElement('path', { d: 'M50.7,42.1c-4.3,0-7.8,3.5-7.8,7.8c0,4.3,3.5,7.8,7.8,7.8c4.3,0,7.8-3.5,7.8-7.8 C58.6,45.6,55.1,42.1,50.7,42.1 M50.7,61.5c-6.4,0-11.6-5.2-11.6-11.6s5.2-11.6,11.6-11.6c6.4,0,11.6,5.2,11.6,11.6 S57.1,61.5,50.7,61.5' }),
					_react2['default'].createElement('path', { d: 'M87.3,42.3c-4.3,0-7.8,3.5-7.8,7.8c0,4.3,3.5,7.8,7.8,7.8c4.3,0,7.8-3.5,7.8-7.8 C95.1,45.8,91.6,42.3,87.3,42.3 M87.3,61.7c-6.4,0-11.6-5.2-11.6-11.6c0-6.4,5.2-11.6,11.6-11.6c6.4,0,11.6,5.2,11.6,11.6 C98.9,56.5,93.7,61.7,87.3,61.7' })
				)
			);
		}
	}]);

	return _class42;
})(_react2['default'].Component);

Icons.Naf = (function (_React$Component43) {
	_inherits(_class43, _React$Component43);

	function _class43() {
		_classCallCheck(this, _class43);

		_get(Object.getPrototypeOf(_class43.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class43, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement(
					'g',
					null,
					_react2['default'].createElement('rect', { x: '0.1', y: '72', width: '99.9', height: '14' }),
					_react2['default'].createElement('rect', { x: '0.1', y: '43.4', width: '99.9', height: '14.3' }),
					_react2['default'].createElement('rect', { x: '24.7', y: '14.8', width: '75.3', height: '14.3' }),
					_react2['default'].createElement('path', { d: 'M0,22c0-4.4,3.6-8,8-8c4.4,0,8,3.6,8,8c0,4.4-3.6,8-8,8C3.6,30,0,26.4,0,22' })
				)
			);
		}
	}]);

	return _class43;
})(_react2['default'].Component);

Icons.No = (function (_React$Component44) {
	_inherits(_class44, _React$Component44);

	function _class44() {
		_classCallCheck(this, _class44);

		_get(Object.getPrototypeOf(_class44.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class44, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M80.8,86.8c-1.6,0-3.1-0.6-4.2-1.8L50,58.5L23.4,85c-1.1,1.1-2.6,1.8-4.2,1.8c-1.6,0-3.1-0.6-4.2-1.8 c-1.1-1.1-1.8-2.6-1.8-4.2c0-1.6,0.6-3.1,1.8-4.2L41.5,50L15,23.4c-1.1-1.1-1.8-2.6-1.8-4.2c0-1.6,0.6-3.1,1.8-4.2 c1.1-1.1,2.6-1.8,4.2-1.8c1.6,0,3.1,0.6,4.2,1.8L50,41.5L76.6,15c1.1-1.1,2.6-1.8,4.2-1.8l0,0c1.6,0,3.1,0.6,4.2,1.8 c2.3,2.3,2.3,6.1,0,8.5L58.5,50L85,76.6c2.3,2.3,2.3,6.1,0,8.5C83.9,86.2,82.4,86.8,80.8,86.8z' })
			);
		}
	}]);

	return _class44;
})(_react2['default'].Component);

Icons.Page = (function (_React$Component45) {
	_inherits(_class45, _React$Component45);

	function _class45() {
		_classCallCheck(this, _class45);

		_get(Object.getPrototypeOf(_class45.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class45, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement(
					'g',
					null,
					_react2['default'].createElement('path', { d: 'M82.4,92.6c0,0.8-0.4,1.1-0.5,1.2H18.1c-0.1,0-0.5-0.4-0.5-1.2V7.4c0-0.8,0.4-1.1,0.5-1.2 h36.6c3.5,0,6.4,2.8,6.5,6.3l0.5,14.4l18.6,3.2c1,0.1,2.1,1.4,2.1,2.4V92.6z M69.3,8.9c-4-4.5-9.8-7.1-15.8-7.1H18.1 c-2.7,0-5,2.5-5,5.6v85.2c0,3.1,2.2,5.6,5,5.6h63.8c2.7,0,5-2.5,5-5.6V31.2c0-1.6-0.6-3.1-1.6-4.3L69.3,8.9z' }),
					_react2['default'].createElement('rect', { x: '25.1', y: '36.8', width: '50.8', height: '6' }),
					_react2['default'].createElement('rect', { x: '25.1', y: '22.9', width: '22.2', height: '6' }),
					_react2['default'].createElement('rect', { x: '24.1', y: '64.9', width: '51.9', height: '6' }),
					_react2['default'].createElement('rect', { x: '24.1', y: '51', width: '51.9', height: '6' }),
					_react2['default'].createElement('rect', { x: '24.1', y: '79.1', width: '25.9', height: '6' })
				)
			);
		}
	}]);

	return _class45;
})(_react2['default'].Component);

Icons.Pages = (function (_React$Component46) {
	_inherits(_class46, _React$Component46);

	function _class46() {
		_classCallCheck(this, _class46);

		_get(Object.getPrototypeOf(_class46.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class46, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M80.2,9.6H19.7c-1.9,0-3.4,1.5-3.4,3.4v79.3c0,1.9,1.5,3.4,3.4,3.4h60.5c1.9,0,3.4-1.5,3.4-3.4V13 C83.6,11.1,82.1,9.6,80.2,9.6z M26.3,60.3h47.1v4.3H26.3V60.3z M57.7,50h15.7v4.3H57.7V50z M57.7,39.7h15.7v4.3H57.7V39.7z M57.7,29.4h15.7v4.3H57.7V29.4z M63.6,83.6H26.1v-4.3h37.5V83.6z M73.9,74H26.1v-4.3h47.7V74z M38.9,56.4 c-6.7,0-12.2-5.6-12.2-12.5V7c0-2.2,1.8-4,4-4h12.6c1.6,0,2.9,1.3,2.9,2.9v32.2c0,4.2-3.3,7.6-7.4,7.6s-7.4-3.4-7.4-7.6v-23h3.3v23 c0,2.4,1.9,4.3,4.1,4.3s4.1-1.9,4.1-4.3V6.2H30.7c-0.4,0-0.8,0.4-0.8,0.8v36.9c0,5.1,4,9.2,8.9,9.2s8.9-4.1,8.9-9.2V15.5H51v28.5 C51,50.8,45.6,56.4,38.9,56.4z' })
			);
		}
	}]);

	return _class46;
})(_react2['default'].Component);

Icons.People = (function (_React$Component47) {
	_inherits(_class47, _React$Component47);

	function _class47() {
		_classCallCheck(this, _class47);

		_get(Object.getPrototypeOf(_class47.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class47, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M59.6,13.7c0-3.2,2.6-5.8,5.8-5.8c3.2,0,5.8,2.6,5.8,5.8c0,3.2-2.6,5.8-5.8,5.8 C62.2,19.5,59.6,16.9,59.6,13.7z M61.2,28.7l0.1,0.1c2.1-3,5.3-5.2,9.1-5.8c-0.2-0.8-0.4-1.6-0.4-2.5c-0.6-0.1-1.2-0.2-1.9-0.3 c-0.8,0.4-1.8,0.7-2.8,0.7c-1,0-2-0.2-2.8-0.7c-0.8,0.1-1.5,0.2-2.2,0.3c-0.1,2.7-1.2,5.1-3,6.9C58.8,27.8,60.1,28.2,61.2,28.7z M29.6,23c0.2-0.8,0.4-1.6,0.4-2.4c0.6-0.1,1.3-0.3,2.1-0.3c0.8,0.4,1.8,0.7,2.8,0.7c1,0,2-0.2,2.8-0.7c0.7,0.1,1.3,0.2,1.8,0.3 c0.1,2.7,1.2,5.2,3,7c-1.4,0.3-2.6,0.7-3.7,1.2l-0.2,0.1C36.6,25.8,33.3,23.6,29.6,23z M34.9,19.5c3.2,0,5.8-2.6,5.8-5.8 c0-3.2-2.6-5.8-5.8-5.8c-3.2,0-5.8,2.6-5.8,5.8C29.1,16.9,31.7,19.5,34.9,19.5z M71.5,79.4v7.4c-1.9,1.3-4.3,2.4-7.1,3.2v-8.8 L63,90.4c-3.8,1-8.2,1.6-12.9,1.6c-4.7,0-9.2-0.6-13-1.6l-1.5-9.3V90c-3-0.9-5.6-2.2-7.6-3.6v-7c0-7.4,2.5-14.2,16.4-15.6 c1.7,0.9,3.6,1.4,5.6,1.4c2,0,3.9-0.5,5.6-1.4C69.7,65.2,71.5,72,71.5,79.4z M50,39.2c-6.4,0-11.6,5.2-11.6,11.6 c0,6.4,5.2,11.6,11.6,11.6c6.4,0,11.6-5.2,11.6-11.6C61.6,44.4,56.4,39.2,50,39.2z M15.6,36.7c0-6.4,5.2-11.6,11.6-11.6 c6.4,0,11.6,5.2,11.6,11.6c0,6.4-5.2,11.6-11.6,11.6C20.8,48.3,15.6,43.1,15.6,36.7z M39.8,61.4c-2.8-2.7-4.5-6.4-4.5-10.6 c0-0.3,0-0.5,0-0.8c-0.8-0.1-1.6-0.2-2.5-0.3c-1.7,0.9-3.6,1.4-5.6,1.4c-2,0-3.9-0.5-5.6-1.4C7.7,51.1,5.2,57.9,5.2,65.3v7 c1.9,1.4,4.5,2.6,7.6,3.6v-8.8l1.5,9.3c3.2,0.8,6.8,1.4,10.6,1.5C25.4,68.8,30.3,63.4,39.8,61.4z M41.8,20.1c0-4.5,3.6-8.1,8.1-8.1 c4.5,0,8.1,3.6,8.1,8.1c0,4.5-3.6,8.1-8.1,8.1C45.5,28.2,41.8,24.6,41.8,20.1z M60.2,30.8c-1.6-0.8-3.6-1.3-6.3-1.6 c-1.2,0.6-2.5,1-3.9,1c-1.4,0-2.8-0.3-3.9-0.9c-2.6,0.3-4.6,0.8-6.2,1.5c0.8,1.8,1.3,3.8,1.3,5.9c0,1.4-0.2,2.7-0.6,4 c2.5-2.3,5.8-3.7,9.5-3.7c3.7,0,7,1.4,9.5,3.7c-0.4-1.3-0.6-2.6-0.6-3.9C58.9,34.6,59.4,32.6,60.2,30.8z M84.5,29.3 c9.7,1,11,5.8,11,10.9v5.2c-1.3,0.9-3,1.6-4.9,2.2v-6.2l-1.1,6.5c-1.3,0.3-2.7,0.6-4.2,0.8c-1.2-0.4-2.6-0.7-4.1-1 c3.3-2.5,5.5-6.6,5.5-11.1C86.7,34,85.9,31.4,84.5,29.3z M83.4,27.7c3-1.2,5.2-4.1,5.2-7.5c0-4.5-3.6-8.1-8.1-8.1 c-4.5,0-8.1,3.6-8.1,8.1c0,0.9,0.2,1.8,0.4,2.6C77,22.8,80.8,24.7,83.4,27.7z M13.3,36.7c0,4.5,2.2,8.5,5.5,11.1 c-1.5,0.2-2.9,0.6-4.1,1c-1.5-0.2-2.9-0.5-4.2-0.8l-1.1-6.5v6.2c-1.9-0.6-3.6-1.4-4.9-2.2v-5.2c0-5.2,1.2-9.9,11-10.9 C14.1,31.4,13.3,34,13.3,36.7z M27.2,22.8c0.3-0.8,0.4-1.7,0.4-2.6c0-4.5-3.6-8.1-8.1-8.1c-4.5,0-8.1,3.6-8.1,8.1 c0,3.4,2.1,6.4,5.2,7.5C19.2,24.7,23,22.8,27.2,22.8z M94.8,65.3v7c-1.9,1.4-4.5,2.6-7.6,3.6v-8.8l-1.5,9.3 c-3.3,0.9-7.1,1.4-11.1,1.6c-0.3-6.7-2.6-14-14.4-16.5c2.8-2.7,4.5-6.4,4.5-10.6c0-0.3,0-0.5,0-0.8c0.8-0.1,1.6-0.2,2.5-0.3 c1.7,0.9,3.6,1.4,5.6,1.4c2,0,3.9-0.5,5.6-1.4C92.3,51.1,94.8,57.9,94.8,65.3z M72.8,48.3c6.4,0,11.6-5.2,11.6-11.6 c0-6.4-5.2-11.6-11.6-11.6c-6.4,0-11.6,5.2-11.6,11.6C61.2,43.1,66.4,48.3,72.8,48.3z' })
			);
		}
	}]);

	return _class47;
})(_react2['default'].Component);

Icons.Phone = (function (_React$Component48) {
	_inherits(_class48, _React$Component48);

	function _class48() {
		_classCallCheck(this, _class48);

		_get(Object.getPrototypeOf(_class48.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class48, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M34.6,70L7.5,85.5c-0.2-0.4-0.5-0.7-0.7-1.1l-1.5-2.6c-0.3-0.5-0.4-1-0.3-1.5c0-0.9,0.5-1.7,1.3-2.2 l22.6-12.9c0.8-0.5,1.8-0.5,2.5,0c0.4,0.2,0.8,0.6,1.1,1l1.5,2.6C34.2,69.3,34.4,69.6,34.6,70z M66.2,36l2.4,1.8 c0.3,0.2,0.7,0.5,1,0.7l18.5-25.2c-0.3-0.3-0.7-0.5-1-0.8l-2.4-1.8c-0.4-0.3-0.9-0.5-1.4-0.5c-0.9,0-1.8,0.3-2.3,1.1l-15.3,21 C65.1,33,65,34,65.3,34.8C65.5,35.2,65.8,35.7,66.2,36z M95.4,31.9c-2.5,9.3-13.4,24.2-29,38.2C52.2,82.9,37.6,91.5,27.9,94.1 c-1.9,0.7-4,1-6.1,0.8c-0.5,0-1-0.1-1.4-0.2c-2-0.4-4.1-1.2-6-2.3C12.1,91,9.9,89,8.2,86.5l26.9-15.4c0.3,0.7,0.6,1.4,0.8,2.2 c3.3,3.4,14-1.1,24.2-10.2c10.2-9.1,15.8-19.4,12.7-23l0,0c-0.7-0.3-1.4-0.7-2.1-1.1l18.4-25c2.2,2,4,4.4,5.1,6.9 c0.9,1.9,1.4,3.9,1.6,5.8C96.1,28.2,95.9,29.9,95.4,31.9C95.4,31.9,95.4,31.9,95.4,31.9z M75.2,49.1c1.6-2.8,2.4-5.3,2.6-7.4 c-1-0.2-2-0.4-3-0.8c1.1,2.2,0.4,5.6-1.9,9.7c-2.5,4.5-6.6,9.4-11.6,13.9c-7.1,6.3-14.7,10.7-20,11.5c-0.6,0.1-1.1,0.1-1.6,0.1 c-1.3,0-2.4-0.3-3.3-0.8l0,0c0.2,1,0.4,2,0.4,3c0.1,0,0.2,0,0.3,0c0.6,0,1.1,0,1.8-0.1C45,77.3,53.8,72.3,61.9,65 C67.6,59.9,72.3,54.2,75.2,49.1z M34.1,51.1c-0.9,0-1.6-0.3-2.1-0.9c-1-1.1-1.2-2.9-1.1-3.8c0.3-5.3,3.2-10,7.8-12.6 c2.4-1.4,5.2-2.2,8-2.2c0.3,0,0.6,0,0.9,0c0.9,0,2.6,0.6,3.5,1.6c0.5,0.6,0.8,1.3,0.7,2.1c-0.1,0.4-0.3,0.8-0.6,1.1 c-0.8,0.6-2.1,0.7-2.4,0.7c-0.2,0-0.4,0-0.6,0c-0.5-0.1-0.9-0.1-1.4-0.1c-1.9,0-3.6,0.5-5.3,1.4c-3.5,2-5.5,6-5.2,10 c0,0.6-0.4,1.5-0.9,2.1C34.9,50.9,34.5,51.1,34.1,51.1L34.1,51.1z M20.7,51c-0.1,0-0.1,0-0.2,0l-0.1,0c-0.8-0.1-1.5-0.4-2.1-1.1 c-0.5-0.5-0.8-1.2-0.8-1.9l0,0l0-0.2c0-0.2,0-0.8,0.1-1.8c0.8-9.8,6.3-18.6,14.8-23.5c4.6-2.7,9.8-4.1,15.1-4.1c0.5,0,1,0,1.5,0 l1.7,0.1l0,0c0.4,0.1,1,0.4,1.4,0.9c0.6,0.6,0.9,1.5,0.9,2.3l0,0.2c0,0.7-0.3,1.3-0.8,1.7c-0.3,0.2-0.6,0.3-1,0.3 c-0.1,0-0.2,0-0.4,0l-1.8-0.1c-0.5,0-1.1-0.1-1.6-0.1c-4.4,0-8.7,1.2-12.5,3.4c-7.2,4.2-11.8,11.8-12.2,20.2l-0.1,1.6 c0.1,0.7-0.1,1.2-0.5,1.6C21.9,50.8,21.3,51,20.7,51z M7.1,50.8c-0.1,0-0.1,0-0.2,0c-0.8-0.1-1.5-0.4-2-1c-0.5-0.5-0.8-1.2-0.8-1.9 v0l0-0.1c0-0.1,0-0.6,0.1-1.8C5.4,31.5,13.5,18.4,26,11.1c6.8-4,14.5-6.1,22.3-6.1c0.7,0,1.4,0,2.1,0.1l1.6,0.1 c0.5,0.1,1,0.4,1.4,0.8c0.5,0.6,0.8,1.4,0.8,2.2c0,0.9-0.3,1.6-0.8,2c-0.3,0.2-0.6,0.3-0.9,0.3c-0.1,0-0.1,0-0.2,0l-1.5-0.1 c-0.8-0.1-1.7-0.1-2.5-0.1c-6.9,0-13.7,1.8-19.6,5.3c-11.1,6.5-18.3,18.1-19.2,31l-0.1,1.7c0,0.7-0.2,1.3-0.7,1.8 C8.3,50.6,7.7,50.8,7.1,50.8z' })
			);
		}
	}]);

	return _class48;
})(_react2['default'].Component);

Icons.Plus = (function (_React$Component49) {
	_inherits(_class49, _React$Component49);

	function _class49() {
		_classCallCheck(this, _class49);

		_get(Object.getPrototypeOf(_class49.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class49, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M50,1C22.9,1,1,22.9,1,50c0,27.1,21.9,49,49,49c27.1,0,49-21.9,49-49C99,22.9,77.1,1,50,1z M74,50.7 c0,2.4-1.5,4.3-3.9,4.3H55v15.1c0,2.4-1.6,4.9-4,4.9h-2.2c-2.4,0-3.8-2.5-3.8-4.9V55H29.9c-2.4,0-4.9-1.8-4.9-4.3v-1.4 c0-2.4,2.5-4.3,4.9-4.3H45V29.9c0-2.4,1.3-3.9,3.8-3.9H51c2.4,0,4,1.5,4,3.9V45h15.1c2.4,0,3.9,1.9,3.9,4.3V50.7z' })
			);
		}
	}]);

	return _class49;
})(_react2['default'].Component);

Icons.Print = (function (_React$Component50) {
	_inherits(_class50, _React$Component50);

	function _class50() {
		_classCallCheck(this, _class50);

		_get(Object.getPrototypeOf(_class50.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class50, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { 'fill-rule': 'evenodd', 'clip-rule': 'evenodd', d: 'M19.1,52.7v7.9h61.8v-7.8c0-0.6,0.3-1.2,0.8-1.6 c0.5-0.4,1.1-0.6,1.7-0.4c6.1,1.2,14,6.5,14,16.2c0,2.8,0,11.6,0,16.6c0,3.7-3,6.6-6.6,6.6H9.3c-3.6,0-6.6-3-6.6-6.6 c0-5,0-13.8,0-16.6c0-8.8,6.7-15.1,14-16.2c0.6-0.1,1.2,0.1,1.7,0.5C18.8,51.5,19.1,52.1,19.1,52.7L19.1,52.7z M76.9,56.6V31.8v-3.3 L58.2,9.8h-3.3H28.5c-2.9,0-5.3,2.4-5.3,5.3v41.5h7.1V17.7c0-0.4,0.4-0.8,0.8-0.8h23.9v5.2v2c0,4.2,3.5,7.7,7.7,7.7h7.2v24.8H76.9 L76.9,56.6z M63.3,17.8l-0.9-0.9h0L63.3,17.8L63.3,17.8z M19.1,84.3h61.8v-3.9H19.1V84.3z' })
			);
		}
	}]);

	return _class50;
})(_react2['default'].Component);

Icons.ReportProblem = (function (_React$Component51) {
	_inherits(_class51, _React$Component51);

	function _class51() {
		_classCallCheck(this, _class51);

		_get(Object.getPrototypeOf(_class51.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class51, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M97.5,87.9L74.8,48.6L52.2,9.4c-0.2-0.5-0.6-0.9-1.1-1.2c-1.4-0.8-3.1-0.3-3.9,1L24.4,48.6l0,0l0,0L1.8,87.7 c-0.3,0.5-0.5,0.9-0.5,1.6c0,1.6,1.3,2.8,2.9,2.8h45.4H95v0.2c1,0,1-0.1,1.4-0.4C97.8,91,98.3,89.3,97.5,87.9z M53,79h-6v-8h6V79z M52.8,65h-6.5l-0.4-26h7.4L52.8,65z' })
			);
		}
	}]);

	return _class51;
})(_react2['default'].Component);

Icons.Right = (function (_React$Component52) {
	_inherits(_class52, _React$Component52);

	function _class52() {
		_classCallCheck(this, _class52);

		_get(Object.getPrototypeOf(_class52.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class52, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M95.2,45.2L62.4,12.4c-2.6-2.6-6.5-2.8-9.1-0.2c-2.6,2.6-2.4,6.5,0.2,9.1l21.8,21.8l-66.1,0 c-3.6,0-6.6,2.9-6.6,6.5c0,3.6,2.9,6.5,6.5,6.5l66.1,0L53.5,78c-2.6,2.6-2.8,6.5-0.2,9.1c2.6,2.6,6.5,2.4,9.1-0.2l33-33 c0,0,2.3-2.2,2.3-4.2C97.7,47.7,95.2,45.2,95.2,45.2L95.2,45.2z' })
			);
		}
	}]);

	return _class52;
})(_react2['default'].Component);

Icons.Salesforce = (function (_React$Component53) {
	_inherits(_class53, _React$Component53);

	function _class53() {
		_classCallCheck(this, _class53);

		_get(Object.getPrototypeOf(_class53.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class53, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement(
					'g',
					null,
					_react2['default'].createElement('path', { d: 'M40,45c-0.7,0-1.2,0.3-1.6,0.8c-0.2,0.3-0.4,0.8-0.4,1.3l3.9,0c0-0.5-0.1-1-0.4-1.3 C41.2,45.3,40.8,45,40,45z' }),
					_react2['default'].createElement('path', { d: 'M84,45c-0.7,0-1.2,0.3-1.6,0.8c-0.2,0.3-0.4,0.8-0.4,1.3l3.9,0c0-0.5-0.1-1-0.4-1.3 C85.2,45.3,84.7,45,84,45z' }),
					_react2['default'].createElement('path', { d: 'M62.1,45c-0.7,0-1.2,0.2-1.6,0.8C60.2,46.3,60,47,60,48c0,0.9,0.2,1.7,0.5,2.2 c0.3,0.5,0.9,0.8,1.6,0.8c0.7,0,1.2-0.3,1.6-0.8c0.3-0.5,0.5-1.3,0.5-2.2c0-0.9-0.2-1.7-0.5-2.2C63.4,45.3,62.8,45,62.1,45z' }),
					_react2['default'].createElement('path', { d: 'M26.2,48.6c-0.3,0.2-0.5,0.6-0.5,1.1c0,0.3,0.1,0.5,0.2,0.7c0.1,0.1,0.1,0.2,0.3,0.3 c0,0,0.5,0.4,1.6,0.3c0.8,0,1.5-0.2,1.5-0.2v-2.5c0,0-0.7-0.1-1.5-0.1C26.7,48.2,26.2,48.6,26.2,48.6z' }),
					_react2['default'].createElement('path', { d: 'M76.9,25.8c-2.9,0-5.7,0.6-8.3,1.8c-2.9-5.2-8.4-8.7-14.6-8.7c-4.7,0-9,2-12,5.2c-3.4-4.4-8.7-7.2-14.6-7.2 c-10.2,0-18.4,8.2-18.4,18.4c0,2.6,0.5,5.1,1.5,7.3c-4.7,2.8-7.9,7.9-7.9,13.8c0,8.8,7.1,16,15.8,16c1.1,0,2.2-0.1,3.2-0.3 c2.4,6.5,8.6,11.1,16,11.1c7,0,13.1-4.3,15.7-10.4c2,1,4.2,1.5,6.5,1.5c5.6,0,10.5-3.1,13-7.6c1.3,0.3,2.6,0.4,4,0.4 c11.3,0,20.4-9.2,20.4-20.6C97.3,35.1,88.2,25.8,76.9,25.8z M22.9,49.7c0,1.7-1.2,2.7-3.1,2.7c-1,0-1.9-0.1-2.8-0.7 c-0.2-0.1-0.4-0.2-0.5-0.3c0,0-0.1-0.1,0-0.2l0.4-1.1C16.8,50,17,50,17,50.1c0.1,0.1,0.2,0.1,0.3,0.2c1.1,0.7,2.2,0.7,2.5,0.7 c0.8,0,1.4-0.4,1.4-1v0c0-0.7-0.8-0.9-1.7-1.2l-0.2-0.1c-1.3-0.4-2.7-0.9-2.7-2.5v0c0-1.5,1.2-2.6,3-2.6l0.2,0c1,0,2.1,0.3,2.8,0.7 c0.1,0,0.1,0.1,0.1,0.2c0,0.1-0.4,1-0.4,1.1c-0.1,0.2-0.3,0.1-0.3,0.1c-0.6-0.4-1.6-0.6-2.5-0.6c-0.8,0-1.2,0.4-1.2,0.9v0 c0,0.6,0.8,0.9,1.8,1.2l0.2,0.1C21.6,47.6,22.9,48.2,22.9,49.7L22.9,49.7z M30.9,51.9c0,0-0.2,0.1-0.4,0.1c-0.2,0-0.8,0.2-1.4,0.3 c-0.5,0.1-1.1,0.1-1.7,0.1c-0.5,0-1-0.1-1.5-0.1c-0.4-0.1-0.8-0.3-1.1-0.5c-0.3-0.2-0.5-0.5-0.7-0.9c-0.2-0.3-0.3-0.8-0.3-1.3 c0-0.5,0.1-0.9,0.3-1.3c0.2-0.4,0.5-0.7,0.8-0.9c0.3-0.2,0.7-0.4,1.1-0.5c0.4-0.1,0.9-0.2,1.4-0.2c0.3,0,0.6,0,0.9,0 c0,0,0.4,0,0.9,0.1v-0.2c0-0.7-0.2-1.1-0.5-1.3C28.5,45.1,28,45,27.5,45c0,0-1.3,0-2.4,0.6c0,0-0.1,0-0.1,0s-0.1,0-0.2-0.1l-0.4-1 c-0.1-0.2,0.1-0.2,0.1-0.2c0.5-0.4,1.7-0.6,1.7-0.6c0.4-0.1,1.1-0.1,1.5-0.1c1.1,0,1.9,0.3,2.5,0.8c0.6,0.5,0.9,1.3,0.9,2.4l0,5 C31,51.7,31,51.9,30.9,51.9z M34.6,52.1c0,0.1-0.1,0.2-0.2,0.2H33c-0.1,0-0.2-0.1-0.2-0.2V40.3c0-0.1,0.1-0.2,0.2-0.2h1.5 c0.1,0,0.2,0.1,0.2,0.2V52.1z M43.7,48.3c0,0.1-0.2,0.1-0.2,0.1l-5.5,0c0,0.8,0.2,1.4,0.6,1.8c0.4,0.4,1,0.6,1.9,0.6 c1.3,0,1.9-0.3,2.3-0.4c0,0,0.2-0.1,0.2,0.1l0.4,1c0.1,0.2,0,0.2,0,0.3c-0.3,0.2-1.2,0.5-2.8,0.5c-0.8,0-1.4-0.1-2-0.3 c-0.6-0.2-1-0.5-1.4-0.9c-0.4-0.4-0.6-0.9-0.8-1.4c-0.2-0.5-0.2-1.1-0.2-1.8c0-0.6,0.1-1.2,0.2-1.8c0.2-0.5,0.4-1,0.7-1.4 c0.3-0.4,0.8-0.7,1.3-1c0.5-0.2,1.1-0.4,1.8-0.4c0.6,0,1.1,0.1,1.6,0.3c0.3,0.1,0.7,0.4,1,0.8c0.2,0.2,0.6,0.8,0.7,1.3 C43.8,47.2,43.7,48.2,43.7,48.3z M48.2,52.4c-1,0-1.9-0.1-2.8-0.7c-0.2-0.1-0.4-0.2-0.5-0.3c0,0-0.1-0.1,0-0.2l0.4-1.1 c0.1-0.2,0.2-0.1,0.3-0.1c0.1,0.1,0.2,0.1,0.3,0.2c1.1,0.7,2.2,0.7,2.5,0.7c0.8,0,1.4-0.4,1.4-1v0c0-0.7-0.8-0.9-1.7-1.2l-0.2-0.1 c-1.3-0.4-2.7-0.9-2.7-2.5v0c0-1.5,1.2-2.6,3-2.6l0.2,0c1,0,2.1,0.3,2.8,0.7c0.1,0,0.1,0.1,0.1,0.2c0,0.1-0.4,1-0.4,1.1 c-0.1,0.2-0.3,0.1-0.3,0.1C49.8,45.2,48.8,45,48,45c-0.8,0-1.2,0.4-1.2,0.9v0c0,0.6,0.8,0.9,1.8,1.2l0.2,0.1c1.3,0.4,2.6,1,2.6,2.5 v0C51.4,51.4,50.2,52.4,48.2,52.4z M57.8,45c0,0.2-0.2,0.2-0.2,0.2h-1.8l-1.2,7c-0.1,0.7-0.3,1.3-0.5,1.8c-0.2,0.5-0.4,0.9-0.7,1.2 c-0.3,0.3-0.6,0.6-1,0.7c-0.4,0.1-0.8,0.2-1.3,0.2c-0.2,0-0.5,0-0.8-0.1C50,56,49.9,56,49.7,55.9c-0.1,0-0.1-0.1-0.1-0.2 c0-0.1,0.4-1,0.4-1.1c0.1-0.1,0.2-0.1,0.2-0.1c0.1,0,0.2,0.1,0.3,0.1c0.1,0,0.3,0,0.4,0c0.2,0,0.5,0,0.6-0.1 c0.2-0.1,0.4-0.2,0.5-0.4c0.1-0.2,0.3-0.4,0.4-0.8c0.1-0.3,0.2-0.8,0.3-1.4l1.2-6.9h-1.2c-0.1,0-0.2-0.1-0.2-0.2l0.2-1.1 c0-0.2,0.2-0.2,0.2-0.2h1.2l0.1-0.4c0.2-1.1,0.6-1.9,1.1-2.5c0.5-0.6,1.3-0.8,2.3-0.8c0.3,0,0.5,0,0.7,0.1c0.2,0,0.4,0.1,0.5,0.1 c0,0,0.1,0.1,0.1,0.2l-0.4,1.2c0,0.1-0.1,0.1-0.2,0.1c0,0-0.1,0-0.3-0.1c-0.1,0-0.3,0-0.5,0c-0.2,0-0.4,0-0.6,0.1 c-0.2,0.1-0.3,0.2-0.5,0.3c-0.1,0.1-0.3,0.3-0.4,0.6c-0.2,0.6-0.3,1.2-0.3,1.2h1.8c0.1,0,0.2,0.1,0.2,0.2L57.8,45z M65.8,49.7 c-0.2,0.5-0.4,1-0.7,1.4c-0.3,0.4-0.8,0.7-1.2,0.9c-0.5,0.2-1.1,0.3-1.7,0.3c-0.7,0-1.2-0.1-1.7-0.3c-0.5-0.2-0.9-0.5-1.2-0.9 c-0.3-0.4-0.6-0.9-0.7-1.4c-0.2-0.5-0.2-1.1-0.2-1.7c0-0.6,0.1-1.2,0.2-1.7c0.2-0.5,0.4-1,0.7-1.4c0.3-0.4,0.7-0.7,1.2-0.9 c0.5-0.2,1.1-0.3,1.7-0.3c0.7,0,1.2,0.1,1.7,0.3c0.5,0.2,0.9,0.5,1.2,0.9c0.3,0.4,0.6,0.9,0.7,1.4c0.2,0.5,0.2,1.1,0.2,1.7 C66.1,48.6,66,49.2,65.8,49.7z M72.6,44c-0.1,0.1-0.3,0.9-0.4,1.2c0,0.1-0.1,0.2-0.2,0.1c0,0-0.3-0.1-0.6-0.1c-0.2,0-0.5,0-0.7,0.1 c-0.3,0.1-0.5,0.2-0.7,0.4c-0.2,0.2-0.4,0.5-0.5,0.8c-0.1,0.3-0.2,0.9-0.2,1.4v4.1c0,0.1-0.1,0.2-0.2,0.2h-1.4 c-0.1,0-0.2-0.1-0.2-0.2v-8.2c0-0.1,0.1-0.2,0.2-0.2h1.4c0.1,0,0.2,0.1,0.2,0.2l0,0.7c0.2-0.3,0.6-0.5,0.9-0.7 c0.3-0.2,0.7-0.3,1.4-0.2c0.4,0,0.8,0.1,0.9,0.2C72.6,43.8,72.7,43.9,72.6,44z M79.5,52c-0.6,0.2-1.5,0.4-2.3,0.4 c-1.4,0-2.5-0.4-3.2-1.2c-0.7-0.8-1.1-1.9-1.1-3.2c0-0.6,0.1-1.2,0.3-1.7c0.2-0.5,0.4-1,0.8-1.4c0.3-0.4,0.8-0.7,1.3-0.9 c0.5-0.2,1.1-0.3,1.8-0.3c0.5,0,0.9,0,1.2,0.1c0.4,0.1,0.9,0.2,1.1,0.3c0,0,0.1,0.1,0.1,0.2c-0.2,0.4-0.3,0.7-0.4,1.1 c-0.1,0.2-0.2,0.1-0.2,0.1c-0.5-0.2-1-0.2-1.7-0.2c-0.8,0-1.4,0.3-1.8,0.8C75,46.4,74.7,47,74.7,48c0,1,0.2,1.8,0.7,2.2 c0.4,0.5,1.1,0.7,1.9,0.7c0.3,0,0.6,0,0.9-0.1c0.3,0,0.5-0.1,0.8-0.2c0,0,0.2-0.1,0.2,0.1l0.4,1.1C79.6,51.9,79.5,52,79.5,52z M87.6,48.3c0,0.1-0.2,0.1-0.2,0.1l-5.5,0c0,0.8,0.2,1.4,0.6,1.8c0.4,0.4,1,0.6,1.9,0.6c1.3,0,1.9-0.3,2.3-0.4c0,0,0.2-0.1,0.2,0.1 l0.4,1c0.1,0.2,0,0.2,0,0.3c-0.3,0.2-1.2,0.5-2.8,0.5c-0.8,0-1.4-0.1-2-0.3c-0.6-0.2-1-0.5-1.4-0.9c-0.4-0.4-0.6-0.9-0.8-1.4 c-0.2-0.5-0.2-1.1-0.2-1.8c0-0.6,0.1-1.2,0.2-1.8c0.2-0.5,0.4-1,0.7-1.4c0.3-0.4,0.8-0.7,1.3-1c0.5-0.2,1.1-0.4,1.8-0.4 c0.6,0,1.1,0.1,1.6,0.3c0.3,0.1,0.7,0.4,1,0.8c0.2,0.2,0.6,0.8,0.7,1.3C87.8,47.2,87.6,48.2,87.6,48.3z' })
				)
			);
		}
	}]);

	return _class53;
})(_react2['default'].Component);

Icons.ScatterPlot = (function (_React$Component54) {
	_inherits(_class54, _React$Component54);

	function _class54() {
		_classCallCheck(this, _class54);

		_get(Object.getPrototypeOf(_class54.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class54, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M93.5,90.3H10V6.8c0-2.2-1.3-4-3.5-4C4.3,2.8,3,4.6,3,6.8v87c0,2.2,1.3,3.6,3.5,3.6h87c2.2,0,4-1.3,4-3.5 C97.5,91.6,95.7,90.3,93.5,90.3z' }),
				_react2['default'].createElement('circle', { cx: '47', cy: '40', r: '7.8' }),
				_react2['default'].createElement('circle', { cx: '77', cy: '26', r: '7.8' }),
				_react2['default'].createElement('circle', { cx: '25', cy: '75', r: '7.8' })
			);
		}
	}]);

	return _class54;
})(_react2['default'].Component);

Icons.Search = (function (_React$Component55) {
	_inherits(_class55, _React$Component55);

	function _class55() {
		_classCallCheck(this, _class55);

		_get(Object.getPrototypeOf(_class55.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class55, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M19.6,50.7c-0.8,0-1.6-0.4-2-1.2c-2.1-3.6-3.2-7.8-3.2-12c0-10.9,7.2-20.4,17.6-23.2 c0.2-0.1,0.4-0.1,0.6-0.1c1,0,1.9,0.7,2.2,1.7c0.3,1.2-0.4,2.5-1.6,2.8c-8.4,2.2-14.2,10-14.2,18.8c0,3.4,0.9,6.8,2.6,9.7 c0.3,0.5,0.4,1.1,0.2,1.7c-0.2,0.6-0.5,1.1-1.1,1.4C20.4,50.6,20,50.7,19.6,50.7z' }),
				_react2['default'].createElement('path', { d: 'M32.2,14.9C22.1,17.6,15,26.9,15,37.6c0,4.1,1.1,8.2,3.1,11.7c0.3,0.6,0.9,0.9,1.5,0.9 c0.3,0,0.6-0.1,0.9-0.2c0.9-0.5,1.2-1.6,0.7-2.4c-1.7-3-2.6-6.5-2.6-10c0-9,6-17,14.6-19.3c0.9-0.3,1.5-1.2,1.3-2.2 C34.2,15.2,33.2,14.6,32.2,14.9z' }),
				_react2['default'].createElement('path', { d: 'M93,98.4c-1.2,0-2.4-0.5-3.3-1.4L68.8,76.1l-9.5-9.5c-6.3,4.7-13.7,7.2-21.6,7.2 c-19.9,0-36.1-16.2-36.1-36.1c0-19.9,16.2-36.1,36.1-36.1c19.9,0,36.1,16.2,36.1,36.1c0,8.2-2.8,16.1-7.9,22.5l9.6,9.5l20.7,20.7 c0.9,0.9,1.4,2,1.4,3.3c0,1.2-0.5,2.4-1.4,3.3C95.3,97.9,94.2,98.4,93,98.4z M37.7,9.7c-15.4,0-28,12.6-28,28s12.6,28,28,28 c15.4,0,28-12.6,28-28S53.1,9.7,37.7,9.7z' })
			);
		}
	}]);

	return _class55;
})(_react2['default'].Component);

Icons.Settings = (function (_React$Component56) {
	_inherits(_class56, _React$Component56);

	function _class56() {
		_classCallCheck(this, _class56);

		_get(Object.getPrototypeOf(_class56.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class56, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement(
					'g',
					null,
					_react2['default'].createElement('path', { d: 'M90.7,38.1l-6.9-0.2l-1.5-3.1l4.6-4.7c1.3-1.3,2-3,2-4.8c0-1.8-0.7-3.5-2-4.8l-7.3-7.3c-1.3-1.3-3-2-4.8-2 c-1.8,0-3.5,0.7-4.8,2l-5.3,4.6L61,16.5V9.9C61,6.2,58.9,2,55.1,2H44.9c-3.7,0-6.8,3.6-6.8,7.3l-0.2,6.9l-3.1,1.5l-4.7-4.6 c-2.6-2.6-7.1-2.5-9.6,0l-7.2,7.3c-1.3,1.3-2,3-2,4.8c0,1.8,0.7,3.5,2,4.8l4.6,5.3L16.5,39H9.9C6.2,39,2,41.1,2,44.9v10.3 c0,3.7,3.6,6.8,7.3,6.8l6.9,0.2l1.5,3.1l-4.6,4.7c-1.3,1.3-2,3-2,4.8c0,1.8,0.7,3.5,2,4.8l7.3,7.3c2.6,2.6,7,2.6,9.6,0l4.8-4.6 l3.1,1.2v6.6c0,3.7,3.1,7.9,6.9,7.9h10.3c3.7,0,6.8-3.6,6.8-7.3l0.2-6.9l3.1-1.5l4.7,4.6c2.6,2.5,7,2.5,9.6,0l7.2-7.3 c1.3-1.3,2-3,2-4.8c0-1.8-0.7-3.5-2-4.8l-4.6-4.8l1.2-3.1h6.6c3.7,0,7.9-3.1,7.9-6.9V44.9C98,41.1,94.4,38.1,90.7,38.1z M90,54 h-6.5c-3.2,0-6.5,2.3-7.4,5.1L75,61.8c-1.4,2.9-0.8,6.8,1.5,9.1l3.8,3.8l-5.6,5.6l-3.8-3.8c-1.4-1.4-3.5-2.3-5.7-2.3 c-1.2,0-2.4,0.3-3.2,0.7L59.3,76c-3.1,1-5.3,4.2-5.3,7.5V90h-8v-6.5c0-3.3-2.2-6.4-5.1-7.4L38.2,75c-2.9-1.4-6.9-0.8-9.1,1.5 l-3.8,3.8l-5.6-5.6l3.9-3.8c2.3-2.3,2.9-6.2,1.6-8.8L24,59.3c-1-3.1-4.2-5.3-7.5-5.3H10v-8h6.5c3.2,0,6.4-2.3,7.4-5.1l1.1-2.7 c1.4-2.9,0.8-6.8-1.5-9.1l-3.8-3.8l5.6-5.6l3.8,3.8c1.4,1.4,3.5,2.3,5.7,2.3c1.2,0,2.4-0.3,3.2-0.7l2.7-1.1c3.1-1,5.4-4.2,5.4-7.5 V10h8v6.5c0,3.2,2.3,6.4,5.1,7.4l2.7,1.1c2.9,1.4,6.8,0.8,9.1-1.5l3.8-3.8l5.6,5.6l-3.9,3.9c-2.3,2.3-2.9,6.2-1.6,8.8l1.1,2.7 c1,3.1,4.2,5.4,7.5,5.4H90V54z' }),
					_react2['default'].createElement('path', { d: 'M50,32.5c-9.6,0-17.5,7.9-17.5,17.5S40.4,67.5,50,67.5c9.7,0,17.5-7.9,17.5-17.5S59.7,32.5,50,32.5z M50,59.5c-5.3,0-9.5-4.3-9.5-9.5s4.3-9.5,9.5-9.5c5.3,0,9.5,4.3,9.5,9.5S55.3,59.5,50,59.5z' })
				)
			);
		}
	}]);

	return _class56;
})(_react2['default'].Component);

Icons.Share = (function (_React$Component57) {
	_inherits(_class57, _React$Component57);

	function _class57() {
		_classCallCheck(this, _class57);

		_get(Object.getPrototypeOf(_class57.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class57, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement(
					'g',
					null,
					_react2['default'].createElement(
						'g',
						null,
						_react2['default'].createElement('path', { d: 'M18,65.6c-8.6,0-15.6-7-15.6-15.6s7-15.6,15.6-15.6c8.6,0,15.6,7,15.6,15.6S26.6,65.6,18,65.6L18,65.6z M18,42.4c-4.2,0-7.6,3.4-7.6,7.6s3.4,7.6,7.6,7.6c4.2,0,7.6-3.4,7.6-7.6S22.1,42.4,18,42.4L18,42.4z' })
					),
					_react2['default'].createElement(
						'g',
						null,
						_react2['default'].createElement(
							'g',
							null,
							_react2['default'].createElement('path', { d: 'M82,31.2c-8.6,0-15.6-7-15.6-15.6C66.4,7,73.4,0,82,0c8.6,0,15.6,7,15.6,15.6 C97.7,24.2,90.7,31.2,82,31.2L82,31.2z M82,8.1c-4.2,0-7.6,3.4-7.6,7.6c0,4.2,3.4,7.6,7.6,7.6c4.2,0,7.6-3.4,7.6-7.6 C89.6,11.4,86.2,8.1,82,8.1L82,8.1z' })
						),
						_react2['default'].createElement(
							'g',
							null,
							_react2['default'].createElement('path', { d: 'M82,100c-8.6,0-15.6-7-15.6-15.6c0-8.6,7-15.6,15.6-15.6c8.6,0,15.6,7,15.6,15.6C97.7,93,90.7,100,82,100 L82,100z M82,76.8c-4.2,0-7.6,3.4-7.6,7.6c0,4.2,3.4,7.6,7.6,7.6c4.2,0,7.6-3.4,7.6-7.6C89.6,80.2,86.2,76.8,82,76.8L82,76.8z' })
						)
					),
					_react2['default'].createElement(
						'g',
						null,
						_react2['default'].createElement(
							'g',
							null,
							_react2['default'].createElement('path', { d: 'M70.1,82.3c-0.7,0-1.4-0.2-2-0.5L27,58c-1.9-1.1-2.6-3.6-1.5-5.5c1.1-1.9,3.6-2.6,5.5-1.5l41.1,23.7 c1.9,1.1,2.6,3.6,1.5,5.5C72.9,81.6,71.5,82.3,70.1,82.3L70.1,82.3z' })
						),
						_react2['default'].createElement(
							'g',
							null,
							_react2['default'].createElement('path', { d: 'M29,49.5c-1.4,0-2.7-0.7-3.5-2c-1.1-1.9-0.5-4.4,1.5-5.5l41.1-23.7c1.9-1.1,4.4-0.5,5.5,1.5 c1.1,1.9,0.4,4.4-1.5,5.5L31,48.9C30.4,49.3,29.7,49.5,29,49.5L29,49.5z' })
						)
					)
				)
			);
		}
	}]);

	return _class57;
})(_react2['default'].Component);

Icons.Shipping = (function (_React$Component58) {
	_inherits(_class58, _React$Component58);

	function _class58() {
		_classCallCheck(this, _class58);

		_get(Object.getPrototypeOf(_class58.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class58, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M50,90c-0.2,0-0.3,0-0.5-0.1L21.4,73c-0.3-0.2-0.4-0.5-0.4-0.8V56.4L4.1,46.7c-0.3-0.2-0.5-0.5-0.5-0.8 s0.2-0.6,0.5-0.8l13.4-7.8L4.1,29.5c-0.3-0.2-0.5-0.5-0.5-0.8s0.2-0.6,0.5-0.8l30.7-17.7c0.1-0.1,0.3-0.1,0.5-0.1s0.3,0,0.5,0.1 L50,18.5l14.3-8.3c0.1-0.1,0.3-0.1,0.5-0.1s0.3,0,0.5,0.1l30.7,17.7c0.3,0.2,0.5,0.5,0.5,0.8s-0.2,0.6-0.5,0.8l-13.4,7.8L95.9,45 c0.3,0.2,0.5,0.5,0.5,0.8s-0.1,0.6-0.4,0.8L79,56.6v15.7c0,0.3-0.3,0.6-0.6,0.8L50.5,89.8C50.4,89.9,50.2,90,50,90z M47,82.6v-25 l-11.6,6.8c-0.1,0.1-0.2,0.1-0.4,0.1c-0.2,0-0.3,0-0.5-0.1l-8.6-5v10.4L47,82.6z M53,82.5l20-12.7V59.6l-8,4.8 c-0.1,0.1-0.2,0.1-0.3,0.1s0,0-0.2-0.1L53,57.5V82.5z M64.8,58.7L87,45.8l-9.7-5.6L55.2,53.1L64.8,58.7z M35.2,58.7l9.7-5.6 L22.6,40.2L13,45.8L35.2,58.7z M50,50.1l22.2-12.8L50,24.4L27.8,37.3L50,50.1z M77.4,34.3l9.7-5.6L64.8,15.8l-9.7,5.6L77.4,34.3z M22.6,34.3l22.2-12.8l-9.7-5.6L13,28.7L22.6,34.3z' })
			);
		}
	}]);

	return _class58;
})(_react2['default'].Component);

Icons.Stack = (function (_React$Component59) {
	_inherits(_class59, _React$Component59);

	function _class59() {
		_classCallCheck(this, _class59);

		_get(Object.getPrototypeOf(_class59.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class59, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement(
					'g',
					null,
					_react2['default'].createElement('path', { d: 'M94.9,44.5l-2.6-1.4L60.1,60.6c-5.5,3-14.6,3-20.2,0L7.7,43.1l-2.6,1.4c-5.5,3-5.5,7.9,0,10.9l34.9,18.9 c5.5,3,14.6,3,20.2,0l34.9-18.9C100.5,52.5,100.5,47.5,94.9,44.5' }),
					_react2['default'].createElement('path', { d: 'M94.9,65.2l-2.6-1.4L60.1,81.2c-5.5,3-14.6,3-20.2,0L7.7,63.8l-2.6,1.4c-5.5,3-5.5,7.9,0,10.9L39.9,95 c5.5,3,14.6,3,20.2,0l34.9-18.9C100.5,73.1,100.5,68.2,94.9,65.2' }),
					_react2['default'].createElement('path', { d: 'M60.1,53.7c-5.5,3-14.6,3-20.2,0L5.1,34.8c-5.5-3-5.5-7.9,0-10.9L39.9,5c5.5-3,14.6-3,20.2,0l34.9,18.9 c5.5,3,5.5,7.9,0,10.9L60.1,53.7z' })
				)
			);
		}
	}]);

	return _class59;
})(_react2['default'].Component);

Icons.Trash = (function (_React$Component60) {
	_inherits(_class60, _React$Component60);

	function _class60() {
		_classCallCheck(this, _class60);

		_get(Object.getPrototypeOf(_class60.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class60, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement(
					'g',
					null,
					_react2['default'].createElement(
						'g',
						null,
						_react2['default'].createElement(
							'g',
							null,
							_react2['default'].createElement('path', { d: 'M73.2,30.4h-46c-4.8,0-8.8,3.9-8.8,8.8l4.7,50.4c0,4.8,3.9,8.8,8.8,8.8h37.2c4.8,0,8.8-3.9,8.8-8.8 l4-50.4C81.9,34.4,78,30.4,73.2,30.4z M38.5,83c0,2.4-2,4.4-4.4,4.4c-2.4,0-4.4-2-4.4-4.4V43.6c0-2.4,2-4.4,4.4-4.4 c2.4,0,4.4,2,4.4,4.4V83L38.5,83z M53.8,83c0,2.4-2,4.4-4.4,4.4s-4.4-2-4.4-4.4V43.6c0-2.4,2-4.4,4.4-4.4c2.4,0,4.4,2,4.4,4.4V83 z M69.2,83c0,2.4-2,4.4-4.4,4.4c-2.4,0-4.4-2-4.4-4.4V43.6c0-2.4,2-4.4,4.4-4.4c2.4,0,4.4,2,4.4,4.4V83z M24.8,26.1l53-13.6 c2.9-0.8,4.7-3.7,3.9-6.7c-0.8-2.9-3.7-4.7-6.7-3.9L58.9,6c-1.5-2.2-4.3-3.4-7.1-2.7l-6.4,1.6c-2.8,0.7-4.6,3.1-4.9,5.8 l-18.4,4.7c-2.9,0.8-4.7,3.7-3.9,6.7C18.9,25.1,21.9,26.8,24.8,26.1z' })
						)
					)
				)
			);
		}
	}]);

	return _class60;
})(_react2['default'].Component);

Icons.Trophy = (function (_React$Component61) {
	_inherits(_class61, _React$Component61);

	function _class61() {
		_classCallCheck(this, _class61);

		_get(Object.getPrototypeOf(_class61.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class61, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M87,32.4c-1.3,1.9-3.3,3.8-6.6,5.3c-2.1,1-3.9,1.8-5.5,2.7c0.3-0.6,0.5-1.2,0.8-1.8 c1.9-4.6,3.2-12.2,4-18.7c0.6-0.2,2-0.5,3.3-0.5c0.9,0,1.8,0.1,2.5,0.5c0.7,0.3,1.3,0.7,1.9,1.6c0.9,1.3,1.4,3.1,1.4,5.1 C88.8,28.5,88.3,30.5,87,32.4 M61.4,29.4l-4.1,3.9l1,5.6c0,0.1,0,0.3,0,0.4c0,0.7-0.3,1.4-0.9,1.8c-0.4,0.3-0.9,0.4-1.3,0.4 c-0.4,0-0.7-0.1-1-0.3l-5-2.6l-5,2.6c-0.3,0.2-0.7,0.3-1,0.3c-0.5,0-0.9-0.1-1.3-0.4c-0.6-0.4-0.9-1.1-0.9-1.8c0-0.1,0-0.3,0-0.4 l1-5.6l-4-3.9c-0.4-0.4-0.7-1-0.7-1.6c0-0.2,0-0.5,0.1-0.7c0.3-0.8,1-1.4,1.8-1.5l5.6-0.8l2.5-5.1c0.4-0.8,1.2-1.3,2-1.3 c0.9,0,1.6,0.5,2,1.3v0l2.5,5.1l5.6,0.8c0.9,0.1,1.6,0.7,1.8,1.5c0.1,0.2,0.1,0.5,0.1,0.7C62,28.4,61.8,29,61.4,29.4 M24.8,40.3 c-1.5-0.8-3.3-1.7-5.2-2.6c-3.3-1.5-5.3-3.4-6.6-5.3c-1.3-1.9-1.8-3.9-1.8-5.8c0-1.9,0.6-3.8,1.4-5.1l0,0c0.6-0.9,1.1-1.3,1.9-1.6 c0.7-0.3,1.6-0.5,2.5-0.5c1,0,2,0.2,2.7,0.3c0.3,0.1,0.5,0.1,0.6,0.2c0.8,6.5,2.1,14.1,4,18.7c0.3,0.6,0.5,1.2,0.8,1.8 C25,40.4,24.9,40.3,24.8,40.3 M93.3,17.6c-1.3-2-3.2-3.5-5-4.2c-1.9-0.8-3.7-1-5.3-1c-0.9,0-1.8,0.1-2.6,0.2c0.2-2,0.3-3.5,0.3-4.5 h0.6c2,0,3.6-1.6,3.6-3.6c0-2-1.6-3.6-3.6-3.6H18.6c-2,0-3.6,1.6-3.6,3.6c0,2,1.6,3.6,3.6,3.6h0.6c0.1,0.9,0.2,2.5,0.3,4.5 c-0.8-0.1-1.6-0.2-2.6-0.2c-1.6,0-3.5,0.2-5.3,1c-1.9,0.8-3.7,2.2-5,4.2C5,20.1,4,23.2,4,26.6c0,3.2,0.9,6.7,3,9.8 c2.1,3.1,5.3,5.9,9.6,7.9c2.9,1.3,5.2,2.5,6.4,3.3c0.4,0.3,0.7,0.5,0.9,0.7c-1,1.7-0.3,3.9,1.4,4.9c1.7,1,3.9,0.3,4.9-1.4 c0.1-0.2,0.2-0.4,0.3-0.6c1.8,3.1,3.9,5.8,6.4,8.3c-1.6,0.3-2.9,1.8-2.9,3.5c0,1.9,1.4,3.4,3.3,3.6L33,84.8h-1.1 c-2.9,0-5.2,2.3-5.2,5.2v3.9c0,2.9,2.3,5.2,5.2,5.2h36.2c2.9,0,5.2-2.3,5.2-5.2V90c0-2.9-2.3-5.2-5.2-5.2H67l-4.2-18.3 c1.8-0.2,3.3-1.7,3.3-3.6c0-1.7-1.2-3.2-2.9-3.5c2.5-2.5,4.6-5.3,6.4-8.3c0.1,0.2,0.2,0.4,0.3,0.6c1,1.7,3.1,2.3,4.9,1.4 c1.7-1,2.3-3.1,1.4-4.9c0.1-0.1,0.1-0.2,0.3-0.3c0.5-0.4,1.4-1,2.6-1.6c1.2-0.6,2.7-1.3,4.4-2.1c4.3-2,7.5-4.7,9.6-7.9 c2.1-3.1,3-6.6,3-9.8C96,23.2,95,20.1,93.3,17.6' })
			);
		}
	}]);

	return _class61;
})(_react2['default'].Component);

Icons.Twitter = (function (_React$Component62) {
	_inherits(_class62, _React$Component62);

	function _class62() {
		_classCallCheck(this, _class62);

		_get(Object.getPrototypeOf(_class62.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class62, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M97.7,20.4c-3.5,1.6-7.3,2.6-11.2,3.1c4-2.4,7.1-6.3,8.6-10.8c-3.8,2.2-8,3.9-12.4,4.8 c-3.6-3.8-8.7-6.2-14.3-6.2c-10.8,0-19.6,8.8-19.6,19.6c0,1.5,0.2,3,0.5,4.5C33,34.4,18.6,26.6,8.9,14.8c-1.7,2.9-2.7,6.3-2.7,9.8 c0,6.8,3.5,12.8,8.7,16.3c-3.2-0.1-6.2-1-8.9-2.4c0,0.1,0,0.2,0,0.2c0,9.5,6.8,17.4,15.7,19.2c-1.6,0.4-3.4,0.7-5.2,0.7 c-1.3,0-2.5-0.1-3.7-0.4c2.5,7.8,9.7,13.4,18.3,13.6c-6.7,5.3-15.1,8.4-24.3,8.4c-1.6,0-3.1-0.1-4.7-0.3c8.7,5.6,19,8.8,30,8.8 c36,0,55.7-29.8,55.7-55.7c0-0.8,0-1.7-0.1-2.5C91.8,27.8,95.1,24.3,97.7,20.4L97.7,20.4z' })
			);
		}
	}]);

	return _class62;
})(_react2['default'].Component);

Icons.Up = (function (_React$Component63) {
	_inherits(_class63, _React$Component63);

	function _class63() {
		_classCallCheck(this, _class63);

		_get(Object.getPrototypeOf(_class63.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class63, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M45.4,5L12.6,37.7c-2.6,2.6-2.8,6.5-0.2,9.1c2.6,2.6,6.5,2.4,9.1-0.2l21.8-21.8l0,66.1 c0,3.6,2.9,6.6,6.5,6.6c3.6,0,6.5-2.9,6.5-6.5l0-66.1l21.8,21.8c2.6,2.6,6.5,2.8,9.1,0.2c2.6-2.6,2.4-6.5-0.2-9.1l-33-33 c0,0-2.2-2.3-4.2-2.3C47.9,2.5,45.4,5,45.4,5L45.4,5z' })
			);
		}
	}]);

	return _class63;
})(_react2['default'].Component);

Icons.UsMap = (function (_React$Component64) {
	_inherits(_class64, _React$Component64);

	function _class64() {
		_classCallCheck(this, _class64);

		_get(Object.getPrototypeOf(_class64.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class64, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M51.6,68.3c0,0.1,0.1,0.1,0.2,0.1c0-0.1,0-0.2,0-0.3C51.6,68.2,51.6,68.2,51.6,68.3 M59.2,67.2 c0.2,0.1,0.6,0.1,0.7-0.1C59.7,66.7,59.2,66.7,59.2,67.2 M82.8,54.8c0.1,0.1,0.3,0.1,0.5,0C83.3,54.5,82.8,54.6,82.8,54.8 M82.4,49.3c0.1-0.2,0-0.5-0.1-0.6C82.3,48.9,82.2,49.3,82.4,49.3 M67.3,31.4c-0.2,0-0.2,0.2-0.4,0.3c-0.3,0.1-0.5,0.1-0.8,0.1 c-0.2,0.1-0.2,0.3-0.3,0.4c-0.1,0.1-0.2,0.1-0.3,0.2c-0.1,0.1-0.1,0.3-0.3,0.3c-0.1,0-0.1-0.3-0.2-0.3c-0.2,0-0.4,0.1-0.5,0.1 c-0.3,0.4-0.4,0.9-0.7,1.3c0,0.6-0.7,0.6-0.6,1.2c0.2-0.1,0.3-0.3,0.4-0.5c0.1-0.1,0.3-0.1,0.4-0.3c0.1-0.1,0.1-0.3,0.1-0.5 c0.4-0.1,0.5-0.6,0.8-0.6c0.1,0.2-0.1,0.3-0.2,0.5c-0.1,0.1,0,0.2-0.1,0.4c-0.2,0.5-0.8,1.2-0.8,1.9c0,0.1,0.1,0.2,0,0.3 c0,0.2-0.2,0.2-0.2,0.4c-0.1,0.3,0,0.6-0.1,0.9c0,0.3-0.3,0.6-0.3,1c-0.1,0.5,0.2,0.9,0.2,1.3c0,0.1-0.1,0.2-0.1,0.4 c0,0.3,0,0.6,0,0.8c0,0.1,0.2,0.3,0.3,0.5c0.1,0.2,0.1,0.4,0.2,0.6c0.3,0.7,1.3,0,1.5-0.3c0.1-0.1,0.1-0.3,0.2-0.5 c0.1-0.2,0.2-0.3,0.3-0.5c0.1-0.4,0.2-1,0.2-1.5c0-0.3-0.2-0.5-0.3-0.8c-0.1-0.2-0.2-0.6-0.2-0.8c0-0.1,0.2-0.3,0.2-0.5 c0-0.2-0.1-0.4-0.1-0.6c0-0.2,0.3-0.4,0.3-0.6c0.1-0.3,0-0.6,0.1-0.8c0-0.1,0.2-0.2,0.2-0.3c0.1-0.2,0-0.3,0.2-0.4 c0.1,0,0.2-0.1,0.3-0.1c0.2-0.1,0.2-0.4,0.5-0.4c0.2,0.1-0.1,0.3,0.1,0.4c0.1-0.1,0-0.2,0-0.4c0-0.3,0.5-0.3,0.5-0.6 c0-0.1,0-0.3,0-0.3c0-0.3,0.3-0.4,0.4-0.7C68.2,31.7,67.7,31.3,67.3,31.4 M55.8,25.4c0.2,0,0.2-0.1,0.4-0.1c0.2,0,0.2,0.2,0.4,0.3 c0.1,0.1,0.2,0.1,0.3,0.2c0.2,0.2,0.2,0.3,0.6,0.3c0.2,0,0.5-0.4,0.7-0.4c0.2,0,0.3,0.3,0.4,0.3c0.2,0.1,0.6,0,0.9,0 c0.2,0,0.2,0.2,0.4,0.3c0.2,0,0.5,0,0.6,0.1c0,0.2-0.2,0.3-0.3,0.3c-0.4,0.2-0.9,0.3-1.3,0.5c-0.3,0.1-0.5,0.3-0.7,0.5 c-0.2,0.2-0.4,0.4-0.6,0.7c-0.2,0.2-0.4,0.4-0.6,0.6c-0.2,0.2-0.5,0.3-0.6,0.6c0.2,0.2,0.5,0,0.7-0.1c0.2-0.1,0.5-0.2,0.7-0.3 c0.3-0.2,0.7-0.6,1.2-0.4c0,0.4-0.3,0.6-0.5,0.8c0.2,0.4,0.6,0.3,1,0.1c0.2-0.1,0.3-0.3,0.5-0.4c0.2-0.1,0.4,0,0.6-0.1 c0.1,0,0.2-0.1,0.3-0.2c0.1-0.1,0.2-0.1,0.3-0.2c0.1-0.1,0.2-0.2,0.3-0.3c0.1-0.1,0.3-0.2,0.4-0.3c0.3-0.3,1-0.8,1.4-0.3 c-0.2,0.2-0.5,0.3-0.7,0.6c-0.2,0.2-0.3,0.4-0.3,0.7c0.4,0,0.8,0,1.1,0.2c0.3,0.2,0.4,0.7,0.7,0.9c0.3-0.2,0.6,0.1,1,0.1 c0.2,0,0.5-0.3,0.8-0.4c0.3-0.1,0.7,0,1.1-0.1c0.3,0,0.6-0.3,0.9-0.2c0.1,0.1-0.1,0.4,0,0.6c0.4,0.4,1,0,1.4,0c0.1,0.3,0,0.9,0.3,1 c0.5-0.1,1,0.1,0.8,0.5c-0.3,0.2-0.8-0.1-1.1-0.1c-0.1,0-0.2,0.1-0.3,0.1c-0.1,0-0.3-0.1-0.4,0c0,0.2,0.3,0.1,0.3,0.3 c0,0.3,0.2,0.3,0.4,0.4c0.1,0.1,0.1,0.2,0.2,0.3c0.1,0,0.2,0,0.3,0.1c0.1,0,0.2,0.1,0.2,0.1c0.2,0.1,0.4,0.1,0.5,0.2 c0.1,0.1,0.3,0.5,0.3,0.7c0,0.2-0.1,0.1-0.2,0.3c0.2,0.4,0.2,1,0.1,1.5c-0.1,0.3-0.4,0.5-0.4,0.8c-0.1,0.1-0.7,0.3-0.6,0.7 c0,0.1,0.1,0.2,0.3,0.2c0.4,0,0.3-0.4,0.5-0.6c0.1-0.1,0.7-0.5,0.9-0.4c0.6,0.1,0.6,1.6,0.7,2.2c0,0.1,0.1,0.3,0.1,0.5 c0,0.3-0.1,0.8-0.2,1c0,0.1-0.2,0.2-0.3,0.3c-0.2,0.2-0.4,0.4-0.7,0.5c-0.1,0.2,0,0.3-0.1,0.5c-0.1,0.3-0.4,0.4-0.4,0.6 c0,0.3,0.4,0.3,0.6,0.5c0.2,0,0.2-0.2,0.4-0.1c0.1,0.1,0.2,0.4,0.4,0.5c0.2,0,0.4-0.2,0.8-0.3c0.2,0,0.3,0,0.4,0 c0.2-0.1,0.6-0.4,0.9-0.6c0.5-0.3,1-0.4,1.5-0.6c0.1-0.1,0.2-0.2,0.3-0.3c0.1-0.1,0.3-0.1,0.4-0.2c0.3-0.1,0.5-0.3,0.7-0.5 c0.2-0.2,0.4-0.3,0.6-0.6c0.1-0.2,0.2-0.2,0.3-0.3c0-0.3-0.4-0.6-0.2-1.1c0.4-0.2,1.4-0.5,2.1-0.2c0.2,0.1,0.3,0.2,0.4,0.2 c0.1,0,0.2,0,0.4-0.1c0.3,0,0.6,0,0.7-0.1c0.2-0.1,0.3-0.3,0.5-0.4s0.5-0.1,0.5-0.3c0.1-0.3-0.1-0.4-0.2-0.6c0.1-0.2-0.1-0.4,0-0.6 c0-0.1,0.3-0.4,0.5-0.6c0.1-0.1,0.3-0.1,0.3-0.2c0.1-0.1,0.1-0.3,0.2-0.4c0.1-0.2,0.6-0.7,0.8-0.8c0.1-0.1,0.2-0.1,0.3-0.2 c0.1-0.1,0.2-0.2,0.3-0.2c0.4-0.1,0.9,0,1.4,0H89c0.4,0,1.1,0.1,1.4,0c0.2-0.1,0.2-0.5,0.4-0.6c0.3,0,0.5-0.1,0.8-0.2 c0.3-0.2,0.3-0.5,0.5-0.8c0.2-0.2,0.3-0.4,0.4-0.7c0-0.2,0-0.7,0.1-0.9c0.1-0.1,0.2-0.3,0.3-0.4c0.1-0.1,0-0.4,0.1-0.5 c0.1-0.2,0.2-0.4,0.3-0.6c0.1-0.2,0.2-0.4,0.3-0.5c0.2-0.3,0.5-1,0.8-0.9c0.3,0.1,0.2,0.4,0.3,0.6c0.6,0.1,0.7-0.3,1.2-0.3 c0.3,0,0.5,0.3,0.7,0.5c0.1,0.1,0.2,0.3,0.2,0.3c0.1,0.3,0,0.9,0,1.4c0,0.5,0,1,0,1.4c0,0.1-0.1,0.3,0,0.4c0.1,0.3,0.4,0.3,0.6,0.4 v0.8c0.1,0.2,0.3,0.1,0.5,0.3c0.1,0.1,0.1,0.3,0.2,0.4c0.1,0.2,0.2,0.2,0.2,0.4c0,0.2-0.3,0.5-0.5,0.6c-0.2,0.1-0.5,0.1-0.6,0.3 c-0.3-0.1-0.4,0.1-0.6,0.2c-0.2,0.1-0.3,0.1-0.4,0.2c-0.1,0.1-0.2,0.3-0.3,0.4c-0.2,0-0.4,0.1-0.5,0.2c-0.2-0.1-0.4,0.1-0.5,0 c-0.2,0.1-0.3,0.3-0.4,0.4c-0.4-0.1-0.6,0.4-0.9,0.4c-0.1,0-0.3,0-0.4,0c-0.1,0-0.2,0.1-0.3,0.2c-0.1,0.1-0.2,0.2-0.2,0.2 c-0.1,0.1-0.1,0.2-0.1,0.3c-0.1,0.1-0.2,0.2-0.3,0.3c0,0.1-0.1,0.2-0.1,0.3c-0.1,0.3-0.3,0.5-0.3,0.7c0,0.2,0.2,0.3,0.3,0.4 c0,0.3-0.5,0.3-0.5,0.6c0,0.1,0.3,0.3,0.4,0.4c0.2,0.3,0.2,0.9,0.5,1c0.2,0.1,0.4-0.1,0.5-0.2c0-0.3-0.2-0.3-0.2-0.5 c0.4-0.1,0.6,0.7,0.4,1.1c-0.3,0-0.7,0-0.9,0.2c0,0.2,0.1,0.2,0.1,0.4c-0.2,0.1-0.4,0.2-0.5,0.1c-0.2-0.1-0.2-0.3-0.3-0.4 c-0.6-0.1-1,0.4-1.6,0.5c-0.1,0-0.3,0-0.4,0c-0.1,0-0.2,0.1-0.3,0.1c-0.3,0-0.7,0-1,0c-0.2,0-0.3,0.1-0.5,0.2 c-0.2,0.1-0.4,0.1-0.4,0.3c0.1,0.2,0.3,0,0.5,0c0.2,0,0.4,0,0.7,0c0.2-0.1,0.4-0.4,0.6-0.4c0.2,0,0.4,0.3,0.6,0.3 c-0.1,0.2-0.4,0.3-0.6,0.4c-0.4,0.2-0.9,0.4-1.4,0.5c-0.4,0.1-0.9,0.2-1.4,0.3c0.1,0.4,0,0.7-0.1,1.1c-0.1,0.5-0.1,0.7-0.3,1.1 c-0.1,0.1-0.1,0.3-0.2,0.4c-0.1,0.2-0.4,0.3-0.5,0.4c-0.2,0.2-0.2,0.7-0.6,0.6c-0.1-0.1,0-0.3-0.1-0.5c-0.2-0.1-0.4-0.2-0.5-0.3 c-0.1,0.3,0,0.5,0.1,0.7c0.1,0.2,0.3,0.2,0.3,0.4c0.1,0.2,0.1,0.7,0,1c0,0.1-0.2,0.3-0.2,0.5c-0.1,0.2-0.2,0.3-0.2,0.4 c-0.1,0.2-0.3,0.2-0.3,0.4c-0.1,0.1-0.1,0.3-0.1,0.5c0,0.1-0.1,0.2-0.2,0.3c-0.1,0.2-0.2,0.8-0.5,0.7c-0.1,0-0.2-0.2-0.2-0.3 c-0.1-0.4,0.3-1,0.4-1.4c0-0.2-0.3-0.1-0.3-0.2c-0.1-0.3-0.1-0.6-0.4-0.7c-0.1,0.2,0.1,0.4-0.1,0.5c0,0.1,0.2,0.2,0.2,0.4 c0,0.1-0.1,0.3-0.1,0.5c0,0.2,0.1,0.4,0.1,0.5c0,0.2-0.1,0.3-0.2,0.4c0,0.2,0.1,0.3,0.2,0.5c0.1,0.1,0.3,0.1,0.4,0.2 c0.2,0.5,0.2,1.2,0.4,1.7c0.1,0.2,0.3,0.4,0.3,0.6c0,0.2-0.2,0.1-0.2,0.2c-0.1,0.2-0.2,0.4-0.4,0.5c-0.1,0.3-0.4,0.5-0.8,0.5 c-0.1,0.1-0.2,0.2-0.1,0.3c0.1,0.2,0.4,0.1,0.5,0.3c-0.1,0.3-0.4,0.5-0.6,0.8c-0.3-0.1-0.6-0.1-1,0c-0.4,0.2-0.9,0.6-1.1,0.9 C80,59,80,59.3,79.8,59.5c-0.5-0.1-1,0-1.3,0.2c-0.2,0.2-0.5,0.5-0.6,0.8c0,0.1,0,0.3-0.1,0.4c-0.1,0.2-0.3,0.4-0.5,0.5 c-0.3,0.3-0.5,0.6-0.8,0.8c-0.2,0.1-0.4,0.1-0.6,0.3c-0.1,0.1-0.1,0.2-0.2,0.3c-0.1,0.2-0.4,0.3-0.5,0.4c-0.1,0.1-0.1,0.3-0.2,0.4 c-0.1,0.2-0.3,0.3-0.3,0.4c-0.1,0.1,0,0.3-0.1,0.4c0,0.1-0.2,0.2-0.2,0.3c0,0.1,0,0.2,0,0.3c-0.1,0.1-0.2,0.2-0.2,0.3 c-0.1,0.3-0.1,0.7,0,1c0.1,0.7,0.3,1.5,0.5,2.2c0.2,0.5,0.4,1,0.7,1.4c0.1,0.2,0.2,0.3,0.3,0.4c0,0.2-0.1,0.4-0.1,0.6 c0,0.2,0.1,0.5,0.2,0.7c0.1,0.2,0.2,0.4,0.3,0.7c0.1,0.5,0.4,0.9,0.5,1.4c0.1,0.5-0.1,1-0.1,1.5c0,0.5,0,0.7-0.3,1 c0.2,0.5-0.1,0.9-0.4,1.1c-0.1-0.1-0.2-0.2-0.4-0.2c-0.2,0-0.5,0.1-0.6,0c-0.1-0.2-0.1-0.4-0.1-0.5c-0.1-0.5-0.4-0.8-0.9-0.9 c-0.2-0.2-0.1-0.7-0.3-0.9c-0.1-0.2-0.3-0.1-0.5-0.2c-0.3-0.7-0.6-1.4-0.9-2c0.1-0.3-0.2-0.5-0.2-0.8c-0.1-0.5,0.3-1,0.3-1.5 c0-0.4-0.1-0.6-0.3-1c-0.1-0.1-0.3,0-0.3-0.1c-0.1-0.1-0.2-0.2-0.3-0.3c-0.1-0.1-0.2-0.2-0.3-0.3c-0.2-0.3-0.4-0.7-0.6-0.8 c-0.2-0.1-0.4-0.3-0.6-0.3c-0.2,0-0.2,0.2-0.3,0.3c-0.4,0.1-0.7,0.6-1.2,0.6c-0.2,0-0.4-0.1-0.6-0.2c0-0.5-0.5-0.7-0.8-1 c-0.4-0.3-0.8-0.4-1.4-0.4c-0.3,0-0.6,0.1-0.8,0.2c-0.3,0.1-0.7,0.2-0.9,0.1c-0.2-0.1-0.2-0.3-0.3-0.4c-0.2,0-0.1,0.3-0.2,0.3 c-0.2,0-0.2-0.1-0.4-0.1c-0.1,0-0.2,0.1-0.4,0.1c-0.3,0-0.7-0.5-0.9,0c-0.2,0-0.3,0-0.3,0.1c0,0.2,0.2,0,0.3,0.1 c0,0.3,0,0.5-0.1,0.8c-0.1,0.3-0.4,0.3-0.4,0.5c0,0.2,0.2,0.2,0.5,0.3c0.1,0.2,0.3,0.2,0.3,0.4c0,0.3-0.3,0.4-0.6,0.3 c-0.2-0.1-0.1-0.3-0.3-0.4c-0.4-0.4-0.8,0-1.1,0.2c-0.2,0-0.5,0-0.6-0.1c-0.2,0.1-0.2,0.2-0.4,0.2c-0.2,0-0.2-0.1-0.4-0.3 c-0.2-0.1-0.3-0.1-0.4-0.2c-0.1-0.3-0.3-0.6-0.5-0.7c-0.1,0-0.1,0.2-0.3,0.3c-0.2,0-0.3-0.1-0.5-0.2c-0.1,0-0.3,0.1-0.4,0.1 c-0.6,0-0.9-0.4-1.4-0.5c-0.3,0-0.5,0-0.8,0c-0.1,0-0.3,0.1-0.4,0.2c-0.1,0-0.2,0-0.2,0c-0.2,0-0.3,0.1-0.5,0.2 c-0.1,0.1-0.3,0.1-0.5,0.2c-0.2,0.1-0.2,0.3-0.3,0.4c-0.1,0.1-0.3,0.2-0.4,0.3c-0.5,0.4-1.2,0.9-1.9,1.1c-0.2,0-0.1-0.1-0.3-0.1 c-0.2,0.1,0.1,0.2,0,0.3c-0.3,0.5-0.8,0.6-1.1,1c0,0.1-0.1,0.2-0.1,0.3c-0.2,0.3-0.6,1.1-0.6,1.7c0,0.1,0.1,0.3,0.1,0.4 c0,0.1,0,0.3,0,0.4c0,0.1,0.1,0.2,0.2,0.3c0,0.1,0.2,0.6,0.2,0.8c0,0.1-0.3,0.3-0.5,0.3c-0.2,0-0.4-0.3-0.5-0.3 c-0.2-0.1-0.5,0-0.8,0c-0.2,0-0.3-0.2-0.5-0.3c-0.1,0-0.2,0-0.3-0.1c-0.2-0.1-0.4-0.3-0.7-0.3c-0.2-0.2-0.2-0.5-0.3-0.7 c-0.1-0.2-0.3-0.4-0.3-0.6c0-0.1,0-0.2,0-0.3c0-0.1-0.1-0.1-0.1-0.2c0-0.1,0-0.3,0-0.4c-0.1-0.2-0.4-0.3-0.6-0.5 c-0.1-0.1-0.1-0.4-0.3-0.5c-0.1-0.2-0.3-0.3-0.4-0.4c-0.1-0.1-0.1-0.3-0.2-0.4c-0.1-0.3-0.2-0.5-0.3-0.8c-0.1-0.3-0.2-0.5-0.4-0.7 c-0.3-0.4-0.8-0.6-1.1-1c-0.5,0-0.9-0.1-1.3-0.2c-0.3,0.2-0.5,0.1-0.7,0.3c-0.2,0.2-0.2,0.6-0.3,0.9c-0.1,0.1-0.4,0.5-0.6,0.5 c-0.3,0.1-0.8-0.4-1.1-0.6c-0.1,0-0.3-0.1-0.3-0.1c-0.1-0.1-0.2-0.2-0.4-0.4c-0.3-0.3-0.4-0.3-0.6-0.7c0-0.1-0.1-0.2-0.2-0.3 c0-0.2,0-0.3,0-0.5c0-0.1-0.2-0.2-0.2-0.4c-0.1-0.1-0.1-0.3-0.2-0.4c-0.2-0.3-0.4-0.3-0.7-0.5c-0.3-0.2-0.6-0.7-0.9-1 c-0.2-0.1-0.4-0.2-0.5-0.3c-0.1-0.2-0.2-0.4-0.4-0.5c-0.3-0.2-1-0.1-1.4-0.1c-0.5,0-0.9,0-1.4,0c-0.1,0.2,0,0.6-0.1,0.8 c-0.3,0.2-0.7,0.1-1.1,0.1h-1.2c-0.8,0-1.6,0.1-2.4,0c-0.1,0-0.1,0-0.2,0c-0.5-0.1-1-0.4-1.5-0.6c-0.5-0.2-1-0.4-1.5-0.6 c-1.1-0.4-2.1-0.8-3-1.2c-0.1-0.1,0-0.3-0.1-0.4c-1.3,0.1-2.4,0.3-3.7,0.3c-0.4-0.2-0.3-0.6-0.4-1c-0.2-0.8-0.9-1.1-1.4-1.5 c-0.1-0.1-0.3,0.1-0.4,0c-0.2-0.1-0.1-0.4-0.3-0.6c-0.5-0.1-0.7,0-1-0.2c-0.3-0.2-0.4-0.5-0.6-0.6c-0.1,0-0.3,0-0.5,0 c-0.2,0-0.3-0.1-0.5-0.1c-0.1,0-0.3,0.1-0.5,0c-0.2,0-0.4-0.2-0.4-0.3c-0.1-0.3,0-0.7-0.1-1c-0.1-0.2-0.2-0.2-0.3-0.3 c-0.1-0.1,0-0.2,0-0.3C8.1,56.1,8,56,7.9,55.9c-0.3-0.3-0.4-0.5-0.7-0.8c-0.1-0.2-0.2-0.3-0.3-0.5c-0.2-0.2-0.6-0.5-0.5-0.9 c0-0.2,0.5-0.6,0.1-0.8c-0.1-0.1-0.2,0-0.3-0.1c-0.1-0.1-0.4-0.4-0.5-0.5c0-0.1,0-0.3-0.1-0.4c0-0.1-0.1-0.2-0.1-0.3 c0-0.2,0-0.4,0-0.5c-0.1-0.3-0.5-0.4-0.7-0.6c0-0.4-0.1-0.6-0.3-0.9c-0.1-0.1-0.2-0.2-0.3-0.3C4,49.1,4,49,3.8,48.8 c-0.1-0.2-0.3-0.3-0.3-0.4c0-0.1,0-0.3,0-0.4c0-0.2-0.2-0.5-0.2-0.7c0-0.1,0.1-0.3,0.1-0.5c0-0.4-0.3-0.8-0.5-1 c-0.2-0.3-0.5-0.4-0.5-0.9c0-0.4,0.4-0.8,0.4-1.1c0-0.2,0-0.4,0-0.5c0-0.4,0.2-0.7,0-1.1c0-0.1-0.1-0.2-0.2-0.3c0-0.1,0-0.3,0-0.4 c0-0.2-0.2-0.3-0.2-0.4c-0.1-0.2-0.1-0.4-0.1-0.6c0-0.1,0.1-0.3,0-0.5c0-0.2-0.2-0.4-0.2-0.6c0-0.1,0.1-0.4,0.2-0.6 c0-0.2,0-0.4,0.1-0.6c0-0.2,0.2-0.3,0.2-0.4c0.2-0.6,0.2-1.2,0.2-1.8c0-0.3,0.1-0.5,0.1-0.8c0-0.2,0-0.4,0-0.5 c0-0.3,0.1-0.6,0.2-0.9c0.1-0.6-0.1-1.3,0-1.9c0-0.1,0.1-0.2,0.1-0.3c0-0.3-0.2-0.4-0.2-0.7c0-0.3,0.1-0.6,0.1-0.9 c0-0.1-0.1-0.2-0.1-0.3c-0.1-0.3-0.1-0.7-0.2-1c-0.1-0.2-0.2-0.4-0.2-0.5c-0.1-0.3-0.1-0.6-0.2-0.8c-0.1-0.2-0.3-0.4-0.4-0.6 c-0.1-0.4-0.1-0.8,0-1.2c0.2-0.1,0.4,0.1,0.6,0.2c0.2,0.1,0.4,0.3,0.6,0.3c0.3,0.1,0.7,0,1,0.1c0.1,0,0.2-0.1,0.3-0.1 C4.7,26,4.8,26,5,26c0.2-0.1,0.2-0.4,0.2-0.6c-0.4-0.1-0.9-0.2-0.8-0.6c0.1-0.2,0.4-0.4,0.7-0.3c0.1-0.2-0.2-0.4-0.1-0.6 c0.1-0.2,0.5-0.2,0.7-0.2c1.8,0,3.7,0,5.5,0c2.4,0,4.9,0.1,7.1,0c0.5,0,0.9,0,1.4,0c2,0.1,4.1-0.1,6.2,0c0.9,0,1.7,0,2.5,0 c1.9,0.1,3.8,0,5.7,0c5.6,0,11.3,0,16.9,0c0.1-0.2,0-0.7,0.1-0.9c0.9-0.4,0.7,1,0.9,1.5c0.1,0,0.1,0.1,0.2,0.2 c0.3,0,0.5,0.1,0.7,0.2c0.1,0,0.3,0,0.4,0.1c0.2,0.1,0.3,0.2,0.4,0.2c0.2,0,0.4-0.2,0.6-0.3c0.1,0,0.4,0,0.5,0.1 c0.2,0,0.4,0.1,0.5,0.2c0,0,0,0.1,0.1,0.2C55.5,25.2,55.7,25.2,55.8,25.4' })
			);
		}
	}]);

	return _class64;
})(_react2['default'].Component);

Icons.Weather = (function (_React$Component65) {
	_inherits(_class65, _React$Component65);

	function _class65() {
		_classCallCheck(this, _class65);

		_get(Object.getPrototypeOf(_class65.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class65, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement(
					'g',
					null,
					_react2['default'].createElement(
						'g',
						null,
						_react2['default'].createElement('path', { d: 'M74.5,79H18c-1.5,0-2.9-0.4-4.2-1.1c-7-2.5-11.7-9.2-11.7-16.7c0-8.9,6.4-16.2,15-17.5 c1.7-9.1,9.7-15.9,19.1-15.9c7,0,13.3,3.7,16.8,9.6c1.1-0.2,2.3-0.3,3.4-0.3c8.5,0,15.7,6,17.3,14.1c8-0.4,14.5,6,14.5,13.8 C88.4,72.8,82.1,79,74.5,79z M36.3,33c-7.5,0-13.8,5.8-14.3,13.3l-0.2,2.3l-2.3,0.1c-6.9,0.2-12.3,5.7-12.3,12.6 c0,5.4,3.4,10.1,8.5,11.9l0.4,0.2c0.6,0.3,1.2,0.5,1.9,0.5h56.5c4.8,0,8.7-3.9,8.7-8.7c0-5.5-5.1-10-10.9-8.4l-3.1,0.8l-0.1-3.2 c-0.3-6.8-5.8-12-12.6-12c-1.3,0-2.7,0.2-4,0.6l-2.2,0.7l-0.9-2.1C47.1,36.4,42,33,36.3,33z' })
					),
					_react2['default'].createElement(
						'g',
						null,
						_react2['default'].createElement('path', { d: 'M87.2,38c-1.5-5.9-6.8-10.2-13.1-10.2c-0.7,0-1.4,0.1-2.1,0.2c-2.7-4.3-7.4-6.9-12.5-6.9 c-4.5,0-8.6,2.1-11.3,5.3c1.6,0.7,3,1.8,4.1,3.1c1.8-2,4.4-3.3,7.2-3.3c3.8,0,7.3,2.3,8.9,5.8l0.9,2.1l2.2-0.7 c0.9-0.3,1.8-0.4,2.7-0.4c4.5,0,8.2,3.5,8.4,8.1l0.1,3.2l3.1-0.8c3.8-1,7.1,1.9,7.1,5.4c0,2.5-1.7,4.7-4,5.4 c1.2,1.3,2,2.8,2.5,4.5c3.9-1.6,6.6-5.4,6.6-9.9C97.9,42.8,93.1,38,87.2,38z' })
					)
				)
			);
		}
	}]);

	return _class65;
})(_react2['default'].Component);

Icons.Web = (function (_React$Component66) {
	_inherits(_class66, _React$Component66);

	function _class66() {
		_classCallCheck(this, _class66);

		_get(Object.getPrototypeOf(_class66.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class66, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement(
					'g',
					null,
					_react2['default'].createElement('polygon', { points: '74.9,60.9 57.4,44.9 57.4,91.7 69.5,79.7 74.9,90.2 78.2,96.5 84.6,93.2 76.2,77  92.4,77 \t' }),
					_react2['default'].createElement('path', { d: 'M93.7,43.2c-0.1-0.7-0.2-1.4-0.3-2.1c-0.1-0.5-0.1-1-0.2-1.5c0,0,0,0,0,0 c-2.1-11.7-8.8-21.8-18.3-28.3c-5-3.5-10.8-5.9-17.1-7.1c0,0,0,0,0,0c-0.6-0.1-1.2-0.2-1.7-0.2c-0.6-0.1-1.3-0.2-1.9-0.3 c-1.4-0.1-2.8-0.2-4.2-0.2h0c-1.4,0-2.8,0.1-4.2,0.2c-0.6,0.1-1.3,0.2-1.9,0.3c-0.6,0.1-1.2,0.1-1.7,0.2c0,0,0,0,0,0 C36,5.3,30.3,7.7,25.3,11.1C15.8,17.6,8.9,27.8,6.8,39.6c0,0,0,0,0,0c-0.1,0.5-0.1,1.1-0.2,1.6c-0.1,0.7-0.2,1.3-0.3,2 c-0.1,1.4-0.2,2.8-0.2,4.2c0,1.4,0.1,2.8,0.2,4.1c0.1,0.7,0.2,1.4,0.3,2.1c0.1,0.5,0.1,1,0.2,1.5c0,0,0,0,0,0 C8.9,67,15.8,77.2,25.3,83.7c5,3.4,10.7,5.8,16.9,6.9c0,0,0,0,0,0c0.5,0.1,1.1,0.1,1.6,0.2c0.7,0.1,1.3,0.2,2,0.3 c1.4,0.1,2.7,0.2,4.1,0.2h0c0,0,0.1,0,0.1,0v-0.4v-9.8c0,0-0.1,0-0.1,0h0c-2,0-3.9-0.2-5.7-0.5c-1.4-4.4-2.8-10.2-3.6-17.4 c3,0.2,6.1,0.3,9.3,0.3h0c0,0,0.1,0,0.1,0v-5.8c0,0-0.1,0-0.1,0h0c-3.5,0-6.8-0.1-9.9-0.3c-0.2-3.1-0.3-6.4-0.3-9.9 c0-3.5,0.1-6.8,0.3-9.9c3.1-0.2,6.4-0.3,9.9-0.3h0c3.5,0,6.8,0.1,9.9,0.3c0,0.2,0,0.3,0,0.5c0.9,0.3,1.7,0.8,2.5,1.5l3.6,3.3 c0-1.6-0.1-3.2-0.2-4.8c3.4,0.4,6.4,0.9,9.2,1.4c3.1,0.6,5.9,1.4,8.2,2.1c0.3,1.9,0.5,3.8,0.5,5.7c0,2-0.2,3.9-0.5,5.7 c-1.4,0.5-2.9,0.9-4.5,1.3l3.4,3.2l8.1,7.4c1.4-3.1,2.3-6.4,3-9.8c0,0,0,0,0,0c0.1-0.6,0.2-1.1,0.2-1.7c0.1-0.6,0.2-1.2,0.3-1.8 c0.1-1.4,0.2-2.8,0.2-4.3C93.9,46,93.8,44.6,93.7,43.2z M16.8,53.2c-0.3-1.9-0.5-3.8-0.5-5.8c0-2,0.2-3.9,0.5-5.7 c2.4-0.8,5.2-1.5,8.4-2.2c2.7-0.5,5.7-1,9-1.4c-0.2,3-0.3,6.1-0.3,9.3c0,3.2,0.1,6.3,0.3,9.3c-3.3-0.4-6.3-0.9-9-1.4 C22.1,54.7,19.2,53.9,16.8,53.2z M25.3,70.2c-2.8-3-5-6.5-6.6-10.4c2.1,0.5,4.2,1,6.6,1.5c3,0.6,6.1,1,9.5,1.4 c0.6,5.9,1.6,11.3,2.8,16C32.9,76.8,28.7,73.9,25.3,70.2z M34.7,32.1c-3.3,0.3-6.5,0.8-9.5,1.4c-2.3,0.4-4.5,0.9-6.6,1.5 c1.5-3.9,3.8-7.4,6.6-10.4c3.4-3.7,7.6-6.6,12.3-8.5C36.3,20.8,35.4,26.2,34.7,32.1z M50,31.3L50,31.3c-3.2,0-6.3,0.1-9.3,0.3 c0.8-7.2,2.1-13,3.6-17.4c1.9-0.3,3.8-0.5,5.7-0.5h0c2,0,3.9,0.2,5.7,0.5c1.4,4.4,2.8,10.2,3.6,17.4C56.3,31.4,53.2,31.3,50,31.3z M74.9,33.5c-3-0.6-6.3-1.1-9.7-1.4c-0.6-5.9-1.6-11.3-2.8-16c4.8,1.9,9.1,4.9,12.5,8.7c2.7,3,4.9,6.4,6.4,10.2 C79.3,34.4,77.2,34,74.9,33.5z' })
				)
			);
		}
	}]);

	return _class66;
})(_react2['default'].Component);

Icons.Wifi = (function (_React$Component67) {
	_inherits(_class67, _React$Component67);

	function _class67() {
		_classCallCheck(this, _class67);

		_get(Object.getPrototypeOf(_class67.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class67, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement(
					'g',
					null,
					_react2['default'].createElement('path', { d: 'M50,73.9c-4.4,0-8,3.6-8,8c0,1,0.2,1.9,0.5,2.8c0.5,1.4,1.5,2.7,2.7,3.6c1.3,1,3,1.6,4.8,1.6 c1.8,0,3.4-0.6,4.8-1.6c1.3-0.9,2.2-2.2,2.8-3.8c0.3-0.8,0.5-1.7,0.5-2.7C58,77.5,54.4,73.9,50,73.9z' }),
					_react2['default'].createElement('path', { d: 'M50,53.3c-9.2,0-17.3,4.3-22.6,11l6.2,8.4C36.9,67,43,63.2,50,63.2c7,0,13.1,3.9,16.4,9.6l6.2-8.4 C67.3,57.6,59.2,53.3,50,53.3z' }),
					_react2['default'].createElement('path', { d: 'M14.1,46.4l5.9,8c7.4-8.1,18.1-13.1,29.9-13.1c11.8,0,22.5,5.1,29.9,13.1l5.9-8C76.7,37.1,64,31.4,50,31.4 C36,31.4,23.3,37.1,14.1,46.4z' }),
					_react2['default'].createElement('path', { d: 'M50,10c-18.8,0-35.8,7.2-48.7,19l5.9,8C18.4,26.4,33.5,19.9,50,19.9c16.5,0,31.6,6.5,42.7,17.1l5.9-8 C85.8,17.2,68.8,10,50,10z' })
				)
			);
		}
	}]);

	return _class67;
})(_react2['default'].Component);

Icons.Yes = (function (_React$Component68) {
	_inherits(_class68, _React$Component68);

	function _class68() {
		_classCallCheck(this, _class68);

		_get(Object.getPrototypeOf(_class68.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(_class68, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'svg',
				{ viewBox: '0 0 100 100' },
				_react2['default'].createElement('path', { d: 'M91.6,13.6c-1.1-0.9-2.4-1.4-3.8-1.4c-1.8,0-3.5,0.8-4.7,2.2L35.4,72.6L16.6,52.8c-1.1-1.2-2.7-1.9-4.4-1.9 c-1.6,0-3,0.6-4.2,1.7c-1.2,1.1-1.8,2.6-1.9,4.2c0,1.6,0.6,3.1,1.7,4.3l23.6,24.7c1.1,1.2,2.7,1.9,4.4,1.9c0.1,0,0.2,0,0.2,0 c1.7-0.1,3.3-0.9,4.4-2.2l52-63.4C94.5,19.6,94.2,15.7,91.6,13.6z' })
			);
		}
	}]);

	return _class68;
})(_react2['default'].Component);

exports['default'] = Icons;
module.exports = exports['default'];

},{"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"classnames":167,"react":364}],22:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var Loading = (function (_React$Component) {
	_inherits(Loading, _React$Component);

	function Loading() {
		_classCallCheck(this, Loading);

		_get(Object.getPrototypeOf(Loading.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(Loading, [{
		key: 'render',

		/*
   *
   *
   */
		value: function render() {
			return _react2['default'].createElement(
				'div',
				{ className: 'loader' },
				_react2['default'].createElement('img', { src: '/assets/images/spinner.gif' })
			);
		}
	}]);

	return Loading;
})(_react2['default'].Component);

exports['default'] = Loading;
module.exports = exports['default'];

},{"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"classnames":167,"react":364}],23:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var Modal = (function (_React$Component) {
	_inherits(Modal, _React$Component);

	function Modal() {
		_classCallCheck(this, Modal);

		_get(Object.getPrototypeOf(Modal.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(Modal, [{
		key: 'render',

		/*
   *
   *
   */
		value: function render() {
			return _react2['default'].createElement(
				'div',
				{ className: 'modal' },
				_react2['default'].createElement(
					'div',
					{ className: 'modal__window bg-c-off-white' },
					_react2['default'].createElement(
						'div',
						{ className: 'modal__content' },
						this.renderContent()
					)
				)
			);
		}

		/*
   * Customize on subclass.
   *
   */
	}, {
		key: 'renderContent',
		value: function renderContent() {
			return _react2['default'].createElement(
				'p',
				null,
				'It is not nice to leave a model empty.'
			);
		}
	}]);

	return Modal;
})(_react2['default'].Component);

exports['default'] = Modal;
module.exports = exports['default'];

},{"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"react":364}],24:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _utilitiesColorsJs = require('./../utilities/colors.js');

var colors = _interopRequireWildcard(_utilitiesColorsJs);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var Setup = (function (_React$Component) {
	_inherits(Setup, _React$Component);

	function Setup() {
		_classCallCheck(this, Setup);

		_get(Object.getPrototypeOf(Setup.prototype), 'constructor', this).apply(this, arguments);
	}

	// Component that defines the color combination patterns needed for
	//   multi-colored striped fill on SVG elements.

	_createClass(Setup, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'div',
				{ className: 'atl__setup' },
				_react2['default'].createElement(
					'svg',
					{ id: 'patterns' },
					_react2['default'].createElement(PatternsSetup, _extends({}, this.props, { size: 30 }))
				)
			);
		}
	}]);

	return Setup;
})(_react2['default'].Component);

var PatternsSetup = (function (_React$Component2) {
	_inherits(PatternsSetup, _React$Component2);

	function PatternsSetup(props) {
		_classCallCheck(this, PatternsSetup);

		_get(Object.getPrototypeOf(PatternsSetup.prototype), 'constructor', this).call(this, props);
		this.state = {
			data: []
		};
	}

	// Single pattern element.

	_createClass(PatternsSetup, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'defs',
				null,
				this.renderList()
			);
		}
	}, {
		key: 'renderList',
		value: function renderList() {
			var _this = this;

			// Need to start with a set number of empty patterns and modify as new patterns are requested.
			//   it does not work when they are generated from scratch on the fly.
			// this.state.data.map (colorCodes, id) =>
			var arr = [];
			for (var i = 0; i < this.props.size; i += 1) {
				arr.push(i);
			}
			return arr.map(function (i) {
				var colorCodes = _this.state.data[i];
				return _react2['default'].createElement(Pattern, {
					radio: _this.props.radio,
					id: i,
					key: i,
					colorCodes: colorCodes
				});
			});
		}
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {
			var radio = this.props.radio;

			radio.commands.setHandler('reset:patterns', this.resetPatterns.bind(this));
			radio.reqres.setHandler('get:pattern:id', this.ensureAndGetPattern.bind(this));
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			var radio = this.props.radio.radio;

			radio.commands.clearHandler('reset:patterns');
		}
	}, {
		key: 'resetPatterns',
		value: function resetPatterns() {
			this.setState({ data: [] });
		}

		// Ensures a pattern is defined and returns its id.
		// this.param {array} colorCodes
		// this.returns {number} id
	}, {
		key: 'ensureAndGetPattern',
		value: function ensureAndGetPattern(colorCodes) {
			var data;
			// Loop through existing patterns to see if the combination has been defined before.
			for (var i = 0; i < this.state.data.length; i += 1) {
				var existingColorCodes = this.state.data[i];
				if (colorCodes.join('-') === existingColorCodes.join('-')) {
					return i;
				}
			}
			// If the pattern is not found, define it on the fly.
			data = this.state.data;
			// If the size is exceeded, erase all patterns (suboptimal).
			if (data.length > this.props.size - 2) {
				data = [];
			}
			data.push(colorCodes);
			this.setState({ data: data });
			// Return the index of the newly defined color code.
			return this.state.data.length - 1;
		}

		// These are the readily assembled pattern templates are assembled programatically by the child component.
	}, {
		key: '__testRenderTwoColorPattern',
		value: function __testRenderTwoColorPattern() {
			return _react2['default'].createElement(
				'pattern',
				{ id: 'diagonal-stripes', x: '0', y: '0', width: '8', height: '8', patternUnits: 'userSpaceOnUse', patternTransform: 'rotate(45)' },
				_react2['default'].createElement('rect', { x: '0', y: '0', width: '2', height: '8', style: "stroke:none; fill:#{ 'roed' };" }),
				_react2['default'].createElement('rect', { x: '2', y: '0', width: '2', height: '8', style: "stroke:none; fill:#{ 'roed' };" }),
				_react2['default'].createElement('rect', { x: '4', y: '0', width: '2', height: '8', style: "stroke:none; fill:#{ 'hvid' };" }),
				_react2['default'].createElement('rect', { x: '6', y: '0', width: '2', height: '8', style: "stroke:none; fill:#{ 'hvid' };" })
			);
		}
	}, {
		key: '__testRenderThreeColorPattern',
		value: function __testRenderThreeColorPattern() {
			return _react2['default'].createElement(
				'pattern',
				{ id: 'diagonal-stripes', x: '0', y: '0', width: '18', height: '18', patternUnits: 'userSpaceOnUse', patternTransform: 'rotate(45)' },
				_react2['default'].createElement('rect', { x: '0', y: '0', width: '6', height: '18', style: "stroke:none; fill:#{ 'schwarz' };" }),
				_react2['default'].createElement('rect', { x: '6', y: '0', width: '6', height: '18', style: "stroke:none; fill:#{ 'rot' };" }),
				_react2['default'].createElement('rect', { x: '12', y: '0', width: '6', height: '18', style: "stroke:none; fill:#{ 'gold' };" })
			);
		}
	}]);

	return PatternsSetup;
})(_react2['default'].Component);

var Pattern = (function (_React$Component3) {
	_inherits(Pattern, _React$Component3);

	function Pattern() {
		_classCallCheck(this, Pattern);

		_get(Object.getPrototypeOf(Pattern.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(Pattern, [{
		key: 'render',
		value: function render() {
			var colorCount, dim, className;
			if (this.props.colorCodes == null) {
				return _react2['default'].createElement('pattern', null);
			}
			colorCount = this.props.colorCodes.length;
			dim = colorCount === 2 ? 12 : 18;
			className = 'striped-pattern-' + this.props.colorCodes.join('-');
			return _react2['default'].createElement(
				'pattern',
				{
					id: 'stripe-pattern-' + this.props.id,
					className: className,
					x: '0',
					y: '0',
					width: dim,
					height: dim,
					patternUnits: 'userSpaceOnUse',
					patternTransform: 'rotate(45)'
				},
				this._getPatternRects()
			);
		}

		// Custom color function that translates a color code into an rgb value.
		// TODO: this function needs to be provided as props to the parent component.
		//   this will make the component more general.
	}, {
		key: 'getColor',
		value: function getColor(colorCode) {
			return colors.toRgb(colorCode - 1);
		}
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {
			this.setPatternTransform();
		}
	}, {
		key: 'componentDidUpdate',
		value: function componentDidUpdate() {
			this.setPatternTransform();
		}

		// React does not support patternTransform as an attribute.
		//   Need to set with vanilla JavaScript instead (jQuery lowercases it by default).
	}, {
		key: 'setPatternTransform',
		value: function setPatternTransform() {
			_react2['default'].findDOMNode(this).setAttribute('patternTransform', 'rotate(45)');
		}

		// this.param {number} n - Number of rectangles defining the pattern.
	}, {
		key: '_getPatternRects',
		value: function _getPatternRects(n) {
			var _this2 = this;

			var n, arr;
			if (this.props.colorCodes == null) {
				return;
			}
			n = this.props.colorCodes.length;
			arr = n === 3 ? [0, 1, 2] : [0, 1];
			return arr.map(function (i) {
				var height = n === 2 ? 12 : 18;
				var color = _this2.getColor(_this2.props.colorCodes[i]);
				var style = { 'stroke': 'none', 'fill': color };
				return _react2['default'].createElement('rect', { key: i, x: 6 * i, y: '0', width: '6', height: height, style: style });
			});
		}
	}]);

	return Pattern;
})(_react2['default'].Component);

exports['default'] = Setup;
module.exports = exports['default'];

},{"./../utilities/colors.js":59,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/extends":91,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"babel-runtime/helpers/interop-require-wildcard":95,"classnames":167,"react":364}],25:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _iconsJsx = require('./icons.jsx');

var _iconsJsx2 = _interopRequireDefault(_iconsJsx);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

/*
 * The SideBar component renders a list of buttons with the same appearance but different markup - buttons, links, forms - and functionality - navigate to an inner route, to an outer route, trigger a download through a form, or simple send a custom message to SideBar's parent.
 * It does so by taking an object for each button using the following syntax:
 * obj = {
 *   title: 'Explore Atlas',
 *   contentType: 'inner-link', // options: inner-link (react-router's Link component), outer-link or form
 *   url: '/menu', // if content type is a link, this is the url it will point to
 *   reactIconName: 'Grid',
 *   clickMessage: 'delete-project', // message sent to SideBar's parent which can then handle the click event accordingly.
 *   isToggleable: false 
 * };
 */

var SideBar = (function (_React$Component) {
	_inherits(SideBar, _React$Component);

	function SideBar(props) {
		_classCallCheck(this, SideBar);

		_get(Object.getPrototypeOf(SideBar.prototype), 'constructor', this).call(this, props);
		this.state = {
			isActive: false
		};
		this.props.buttons = this.props.buttons || defaultButtons;
	}

	/*
  *
  *
  */

	_createClass(SideBar, [{
		key: 'render',
		value: function render() {
			var className = (0, _classnames2['default'])({
				'atl__side-bar': true,
				'atl__side-bar--active': this.state['isActive']
			});
			return _react2['default'].createElement(
				'div',
				{ className: className },
				_react2['default'].createElement(
					'div',
					{ className: 'atl__side-bar__toggler', onClick: this.toggle.bind(this) },
					this.renderDropdownIcon()
				),
				_react2['default'].createElement(
					'div',
					{ className: 'atl__side-bar__title' },
					this.state['hoveredButtonTitle']
				),
				this.renderButtons()
			);
		}

		/*
   *
   *
   */
	}, {
		key: 'renderDropdownIcon',
		value: function renderDropdownIcon() {
			return this.state.isActive ? _react2['default'].createElement(_iconsJsx.DropdownUp, null) : _react2['default'].createElement(_iconsJsx.DropdownDown, null);
		}

		/*
   *
   *
   */
	}, {
		key: 'setHoveredButtonTitle',
		value: function setHoveredButtonTitle(title) {
			this.setState({ hoveredButtonTitle: title });
		}

		/*
   *
   *
   */
	}, {
		key: 'toggle',
		value: function toggle() {
			this.setState({ isActive: !this.state['isActive'] });
		}

		/*
   *
   *
   */
	}, {
		key: 'renderButtons',
		value: function renderButtons() {
			var _this = this;

			if (this.props.buttons == null) {
				return;
			}
			var list = this.props.buttons.map(function (options, i) {
				if (options.isHidden) {
					return;
				}
				return _react2['default'].createElement(SideBarButton, _extends({}, _this.props, {
					options: options,
					setHoveredButtonTitle: _this.setHoveredButtonTitle.bind(_this),
					key: i
				}));
			});
			return _react2['default'].createElement(
				'ul',
				{ className: 'atl__side-bar__icons' },
				list
			);
		}
	}]);

	return SideBar;
})(_react2['default'].Component);

var SideBarButton = (function (_React$Component2) {
	_inherits(SideBarButton, _React$Component2);

	function SideBarButton() {
		_classCallCheck(this, SideBarButton);

		_get(Object.getPrototypeOf(SideBarButton.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(SideBarButton, [{
		key: 'render',

		/*
   *
   *
   */
		value: function render() {
			return _react2['default'].createElement(
				'li',
				{ className: 'atl__side-bar__icon',
					onMouseEnter: this.onButtonMouseEnter.bind(this),
					onMouseLeave: this.onButtonMouseLeave.bind(this),
					onClick: this.handleClick.bind(this)
				},
				this.renderContent()
			);
		}

		/*
   * Render different types of content.
   *
   */
	}, {
		key: 'renderContent',
		value: function renderContent() {
			var contentType = this.props.options.contentType;
			if (contentType === 'form') {
				return this.renderFormContent();
			}
			if (contentType === 'inner-link') {
				return this.renderInnerLinkContent();
			}
			if (contentType === 'outer-link') {
				return this.renderOuterLinkContent();
			}
			return this.renderDefaultContent();
		}

		/*
   * Render default content.
   *
   */
	}, {
		key: 'renderDefaultContent',
		value: function renderDefaultContent() {
			var IconComp = this.getIconComp();
			return _react2['default'].createElement(
				'div',
				null,
				_react2['default'].createElement(IconComp, null)
			);
		}

		/*
   * Render inner link content (React Router link).
   *
   */
	}, {
		key: 'renderInnerLinkContent',
		value: function renderInnerLinkContent() {
			var IconComp = this.getIconComp();
			return _react2['default'].createElement(
				_reactRouter.Link,
				{ to: this.props.options.url },
				_react2['default'].createElement(IconComp, null)
			);
		}

		/*
   * Render inner outer content (simple HTML5 link).
   *
   */
	}, {
		key: 'renderOuterLinkContent',
		value: function renderOuterLinkContent() {
			var IconComp = this.getIconComp();
			return _react2['default'].createElement(
				'a',
				{ href: this.props.options.url },
				_react2['default'].createElement(IconComp, null)
			);
		}

		/*
   * Render form content with a single submit button and hidden input fields.
   * Use case: force download of a file server-generated on the fly.
   */
	}, {
		key: 'renderFormContent',
		value: function renderFormContent() {
			var IconComp = this.getIconComp();
			return _react2['default'].createElement(
				'form',
				{ action: this.props.options.url, method: 'post' },
				_react2['default'].createElement(IconComp, null),
				_react2['default'].createElement('input', { type: 'hidden', name: this.props.options.hiddenInputKey, value: this.props.options.hiddenInputValue }),
				_react2['default'].createElement('input', { type: 'submit', value: '' })
			);
		}
	}, {
		key: 'getIconComp',
		value: function getIconComp() {
			var iconName = this.props.options.reactIconNames[0] || 'Build';
			return _iconsJsx2['default'][iconName];
		}
	}, {
		key: 'handleClick',
		value: function handleClick() {
			// If the parent of the SideBar component passed down its own method to handle a message from the button and if the button has a click message set, call this method.
			if (this.props.options.clickMessage && this.props.sendMessageToParent) {
				this.props.sendMessageToParent(this.props.options.clickMessage);
			}
		}

		/*
   *
   *
   */
	}, {
		key: 'onButtonMouseEnter',
		value: function onButtonMouseEnter() {
			this.props.setHoveredButtonTitle(this.props.options.title);
		}

		/*
   * 
   *
   */
	}, {
		key: 'onButtonMouseLeave',
		value: function onButtonMouseLeave() {
			this.props.setHoveredButtonTitle('');
		}
	}]);

	return SideBarButton;
})(_react2['default'].Component);

exports['default'] = SideBar;
module.exports = exports['default'];

},{"./icons.jsx":21,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/extends":91,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"classnames":167,"react":364,"react-router":195}],26:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var Slider = (function (_React$Component) {
    _inherits(Slider, _React$Component);

    function Slider(props) {
        _classCallCheck(this, Slider);

        _get(Object.getPrototypeOf(Slider.prototype), 'constructor', this).call(this, props);
        this.state = {
            valueIndex: 1
        };
    }

    _createClass(Slider, [{
        key: 'render',
        value: function render() {
            return _react2['default'].createElement('div', { className: 'atl__slider', ref: 'root' });
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.buildSlider();
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.destroySlider();
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
            this.setSliderValueText();
        }
    }, {
        key: 'buildSlider',
        value: function buildSlider() {
            var _this = this;

            var $el = $(_react2['default'].findDOMNode(this.refs.root));
            $el.slider({
                value: this.state.valueIndex,
                min: 0,
                max: this.props.values.length - 1,
                step: 1,
                slide: function slide(e, ui) {
                    _this.setState({ valueIndex: ui.value });
                    _this.props.setUiState({ specifier: _this.getSliderValueText() });
                }
            });
            this.setSliderValueText();
        }
    }, {
        key: 'destroySlider',
        value: function destroySlider() {
            var $el = $(_react2['default'].findDOMNode(this.refs.root));
            $el.unbind();
        }
    }, {
        key: 'setSliderValueText',
        value: function setSliderValueText() {
            var $el = $(_react2['default'].findDOMNode(this.refs.root));
            $el.find('span').html(this.getSliderValueText());
        }
    }, {
        key: 'getSliderValueText',
        value: function getSliderValueText() {
            return this.props.values[this.state.valueIndex];
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            var $el = $(_react2['default'].findDOMNode(this.refs.root));
            $el.unbind();
        }
    }]);

    return Slider;
})(_react2['default'].Component);

exports['default'] = Slider;
module.exports = exports['default'];

},{"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"classnames":167,"react":364}],27:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

/*
 * This a base class and example setup for a standard, static page.
 * It has several sub-render methods that can be overridden on the subclass, or left along on the superclass.
 */

var Static = (function (_React$Component) {
	_inherits(Static, _React$Component);

	function Static(props) {
		_classCallCheck(this, Static);

		_get(Object.getPrototypeOf(Static.prototype), 'constructor', this).call(this, props);
		// Make sure there is a scrollTop state value on the subclass.
		// Otherwise, setting sticky page layout will not work.
		this.state = {
			scrollTop: 0
		};
	}

	_createClass(Static, [{
		key: 'render',
		value: function render() {
			var style = { 'overflowY': 'scroll' };
			return _react2['default'].createElement(
				'div',
				{ className: 'atl__main', style: style, onScroll: this.setStickyPageNav.bind(this) },
				this.renderTitleBar(this.getTitleBarType()),
				this.renderContentBar()
			);
		}
	}, {
		key: 'renderTitleBar',
		value: function renderTitleBar(state) {
			var cls = (0, _classnames2['default'])({
				'atl__title-bar': true,
				'atl__title-bar--image': state === 'image',
				'atl__title-bar--solid': state === 'solid'
			});
			return _react2['default'].createElement(
				'div',
				{ className: cls, ref: 'title-bar' },
				this.renderTitleBarBackground(),
				this.renderTitleBarContent()
			);
		}
	}, {
		key: 'renderTitleBarBackground',
		value: function renderTitleBarBackground() {
			return _react2['default'].createElement('div', { className: 'atl__title-bar__background', ref: 'title-bar__background', style: { backgroundColor: this.props.radio.currentThemeColor } });
		}
	}, {
		key: 'renderTitleBarContent',
		value: function renderTitleBarContent() {
			return _react2['default'].createElement(
				'div',
				{ className: 'atl__title-bar__content' },
				_react2['default'].createElement(
					'h1',
					{ className: 'title' },
					this.getTitle()
				),
				_react2['default'].createElement(
					'ul',
					null,
					this.renderWebsite()
				)
			);
		}
	}, {
		key: 'renderContentBar',
		value: function renderContentBar() {
			return _react2['default'].createElement(
				'div',
				{ className: 'atl__content-bar bg-c-off-white' },
				_react2['default'].createElement(
					'div',
					{ className: 'atl-grid' },
					_react2['default'].createElement(
						'div',
						{ className: 'atl-grid__1-3' },
						this.renderPageNav()
					),
					_react2['default'].createElement(
						'div',
						{ className: 'atl-grid__2-3' },
						this.renderPageContent()
					),
					_react2['default'].createElement('div', { className: 'atl-grid__3-3' })
				)
			);
		}
	}, {
		key: 'renderPageNav',
		value: function renderPageNav() {
			var cls = (0, _classnames2['default'])({
				'atl__page-nav': true,
				'atl__page-nav--fixed': this.state.scrollTop > 300
			});
			return _react2['default'].createElement(
				'div',
				{ className: cls, ref: 'page-nav' },
				this.renderPageNavContent()
			);
		}
	}, {
		key: 'renderPageNavContent',
		value: function renderPageNavContent() {
			return _react2['default'].createElement(
				'p',
				null,
				'Page Nav Content'
			);
		}
	}, {
		key: 'renderPageContent',
		value: function renderPageContent() {
			return _react2['default'].createElement(
				'p',
				null,
				'Page Content'
			);
		}

		// This method should not be overridden on the subclass in order to keep sticky page nav logic DRY.
	}, {
		key: 'setStickyPageNav',
		value: function setStickyPageNav(e) {
			this.setState({ scrollTop: e.target.scrollTop });
		}
	}]);

	return Static;
})(_react2['default'].Component);

exports['default'] = Static;
module.exports = exports['default'];

},{"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"classnames":167,"react":364}],28:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _reactRouter2 = _interopRequireDefault(_reactRouter);

var _generalSetupJsx = require('./general/setup.jsx');

var _generalSetupJsx2 = _interopRequireDefault(_generalSetupJsx);

var _generalHeaderJsx = require('./general/header.jsx');

var _generalHeaderJsx2 = _interopRequireDefault(_generalHeaderJsx);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var Layout = (function (_React$Component) {
	_inherits(Layout, _React$Component);

	function Layout() {
		_classCallCheck(this, Layout);

		_get(Object.getPrototypeOf(Layout.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(Layout, [{
		key: 'render',

		/*
   *
   *
   */
		value: function render() {
			return _react2['default'].createElement(
				'div',
				{ className: this.getClassName() },
				_react2['default'].createElement(_generalSetupJsx2['default'], this.props),
				_react2['default'].createElement(_generalHeaderJsx2['default'], _extends({}, this.props, { title: this.getHeaderTitle(), isTransparent: this.isHeaderTransparent() })),
				_react2['default'].createElement(_reactRouter.RouteHandler, this.props)
			);
		}

		/*
   * Add a route-specific class modifiers on the wrapper.
   * TODO: get route name to clean up this method.
   */
	}, {
		key: 'getClassName',
		value: function getClassName() {
			var pth = this.props.state.path;
			return (0, _classnames2['default'])({
				'wrapper': true,
				'atl-route--welcome_index': ['/', '/welcome'].indexOf(pth) > -1,
				'atl-route--projects_index': ['/menu'].indexOf(pth) > -1,
				'atl-route--projects_show': ['/', '/welcome', '/menu'].indexOf(pth) === -1
			});
		}

		/*
   * 
   *
   */
	}, {
		key: 'isHeaderTransparent',
		value: function isHeaderTransparent() {
			var pth = this.props.state.path;
			if (['/', '/welcome'].indexOf(pth) > -1) {
				return true;
			}
			return false;
		}

		/*
   * 
   *
   */
	}, {
		key: 'getHeaderTitle',
		value: function getHeaderTitle() {
			var pth = this.props.state.path;
			if (['/', '/welcome'].indexOf(pth) > -1) {
				return 'New America';
			}
			return 'Atlas';
		}
	}]);

	return Layout;
})(_react2['default'].Component);

exports['default'] = Layout;
module.exports = exports['default'];

},{"./general/header.jsx":19,"./general/setup.jsx":24,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/extends":91,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"classnames":167,"react":364,"react-router":195}],29:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _crudDelete_baseJs = require('./../../../crud/delete_base.js');

var _crudDelete_baseJs2 = _interopRequireDefault(_crudDelete_baseJs);

var _modelsImageJs = require('./../../../../models/image.js');

var _modelsImageJs2 = _interopRequireDefault(_modelsImageJs);

var Delete = (function (_DeleteBase) {
	_inherits(Delete, _DeleteBase);

	function Delete() {
		_classCallCheck(this, Delete);

		_get(Object.getPrototypeOf(Delete.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(Delete, [{
		key: 'getResourceConstructor',
		value: function getResourceConstructor() {
			return _modelsImageJs2['default'].Model;
		}
	}]);

	return Delete;
})(_crudDelete_baseJs2['default']);

Delete.contextTypes = {
	router: _react2['default'].PropTypes.func
};

exports['default'] = Delete;
module.exports = exports['default'];

},{"./../../../../models/image.js":66,"./../../../crud/delete_base.js":4,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"classnames":167,"react":364}],30:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _crudEdit_baseJs = require('./../../../crud/edit_base.js');

var _crudEdit_baseJs2 = _interopRequireDefault(_crudEdit_baseJs);

var _modelsImageJs = require('./../../../../models/image.js');

var _modelsImageJs2 = _interopRequireDefault(_modelsImageJs);

var Edit = (function (_EditBase) {
	_inherits(Edit, _EditBase);

	function Edit() {
		_classCallCheck(this, Edit);

		_get(Object.getPrototypeOf(Edit.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(Edit, [{
		key: 'getResourceName',
		value: function getResourceName() {
			return 'image';
		}
	}, {
		key: 'getResourceConstructor',
		value: function getResourceConstructor() {
			return _modelsImageJs2['default'].Model;
		}
	}]);

	return Edit;
})(_crudEdit_baseJs2['default']);

Edit.contextTypes = {
	router: _react2['default'].PropTypes.func
};

exports['default'] = Edit;
module.exports = exports['default'];

},{"./../../../../models/image.js":66,"./../../../crud/edit_base.js":5,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"react":364}],31:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _generalStaticJsx = require('./../../../general/static.jsx');

var _generalStaticJsx2 = _interopRequireDefault(_generalStaticJsx);

var _reactRouter = require('react-router');

var _modelsImageJs = require('./../../../../models/image.js');

var _modelsImageJs2 = _interopRequireDefault(_modelsImageJs);

var Index = (function (_Static) {
	_inherits(Index, _Static);

	function Index(props) {
		_classCallCheck(this, Index);

		_get(Object.getPrototypeOf(Index.prototype), 'constructor', this).call(this, props);
		this.state = {
			scrollTop: 0,
			images: 0
		};
	}

	_createClass(Index, [{
		key: 'getTitleBarType',
		value: function getTitleBarType() {
			return 'solid';
		}
	}, {
		key: 'renderTitleBarContent',
		value: function renderTitleBarContent() {
			return _react2['default'].createElement(
				'div',
				{ className: 'atl__title-bar__content' },
				_react2['default'].createElement(
					'h1',
					{ className: 'title' },
					'All Images'
				)
			);
		}
	}, {
		key: 'renderPageContent',
		value: function renderPageContent() {
			return _react2['default'].createElement(
				'div',
				null,
				_react2['default'].createElement(
					'p',
					null,
					'All images.'
				),
				this.state.images ? this.renderImages() : null
			);
		}
	}, {
		key: 'renderImages',
		value: function renderImages() {
			return this.state.images.map(function (image, i) {
				return _react2['default'].createElement(
					_reactRouter.Link,
					{ to: image.getEditUrl(), className: 'feature-box', style: { margin: '20px', display: 'inline-block' } },
					_react2['default'].createElement(
						'div',
						{ className: 'feature-box__top-content' },
						_react2['default'].createElement(
							'p',
							null,
							image.get('name')
						)
					)
				);
			});
		}
	}, {
		key: 'fetchImages',
		value: function fetchImages() {
			var _this = this;

			new _modelsImageJs2['default'].Collection().getClientFetchPromise({}, { encoded: 0 }).then(function (coll) {
				_this.setState({ images: coll });
			});
		}
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {
			this.fetchImages();
		}
	}]);

	return Index;
})(_generalStaticJsx2['default']);

Index.contextTypes = {
	router: _react2['default'].PropTypes.func
};

exports['default'] = Index;
module.exports = exports['default'];

},{"./../../../../models/image.js":66,"./../../../general/static.jsx":27,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"react":364,"react-router":195}],32:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _crudNew_baseJs = require('./../../../crud/new_base.js');

var _crudNew_baseJs2 = _interopRequireDefault(_crudNew_baseJs);

var _modelsImageJs = require('./../../../../models/image.js');

var _modelsImageJs2 = _interopRequireDefault(_modelsImageJs);

var New = (function (_NewBase) {
	_inherits(New, _NewBase);

	function New() {
		_classCallCheck(this, New);

		_get(Object.getPrototypeOf(New.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(New, [{
		key: 'getResourceName',
		value: function getResourceName() {
			return 'image';
		}
	}, {
		key: 'getResourceConstructor',
		value: function getResourceConstructor() {
			return _modelsImageJs2['default'].Model;
		}
	}]);

	return New;
})(_crudNew_baseJs2['default']);

exports['default'] = New;
module.exports = exports['default'];

},{"./../../../../models/image.js":66,"./../../../crud/new_base.js":6,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"react":364}],33:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _crudDelete_baseJs = require('./../../../crud/delete_base.js');

var _crudDelete_baseJs2 = _interopRequireDefault(_crudDelete_baseJs);

var _modelsProjectJs = require('./../../../../models/project.js');

var _modelsProjectJs2 = _interopRequireDefault(_modelsProjectJs);

var Delete = (function (_DeleteBase) {
	_inherits(Delete, _DeleteBase);

	function Delete() {
		_classCallCheck(this, Delete);

		_get(Object.getPrototypeOf(Delete.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(Delete, [{
		key: 'getResourceConstructor',
		value: function getResourceConstructor() {
			return _modelsProjectJs2['default'].Model;
		}
	}]);

	return Delete;
})(_crudDelete_baseJs2['default']);

Delete.contextTypes = {
	router: _react2['default'].PropTypes.func
};

exports['default'] = Delete;
module.exports = exports['default'];

},{"./../../../../models/project.js":68,"./../../../crud/delete_base.js":4,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"classnames":167,"react":364}],34:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _crudEdit_baseJs = require('./../../../crud/edit_base.js');

var _crudEdit_baseJs2 = _interopRequireDefault(_crudEdit_baseJs);

var _modelsProjectJs = require('./../../../../models/project.js');

var _modelsProjectJs2 = _interopRequireDefault(_modelsProjectJs);

var Edit = (function (_EditBase) {
	_inherits(Edit, _EditBase);

	function Edit() {
		_classCallCheck(this, Edit);

		_get(Object.getPrototypeOf(Edit.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(Edit, [{
		key: 'getResourceName',
		value: function getResourceName() {
			return 'project';
		}
	}, {
		key: 'getResourceConstructor',
		value: function getResourceConstructor() {
			return _modelsProjectJs2['default'].Model;
		}
	}]);

	return Edit;
})(_crudEdit_baseJs2['default']);

Edit.contextTypes = {
	router: _react2['default'].PropTypes.func
};

exports['default'] = Edit;
module.exports = exports['default'];

},{"./../../../../models/project.js":68,"./../../../crud/edit_base.js":5,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"react":364}],35:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _subcomponentsProjectsJsx = require('./subcomponents/projects.jsx');

var _subcomponentsProjectsJsx2 = _interopRequireDefault(_subcomponentsProjectsJsx);

var _subcomponentsProject_sectionsJsx = require('./subcomponents/project_sections.jsx');

var _subcomponentsProject_sectionsJsx2 = _interopRequireDefault(_subcomponentsProject_sectionsJsx);

var _subcomponentsProject_templatesJsx = require('./subcomponents/project_templates.jsx');

var _subcomponentsProject_templatesJsx2 = _interopRequireDefault(_subcomponentsProject_templatesJsx);

var _generalSide_barJsx = require('./../../../general/side_bar.jsx');

var _generalSide_barJsx2 = _interopRequireDefault(_generalSide_barJsx);

var _modelsProjectJs = require('./../../../../models/project.js');

var _modelsProjectJs2 = _interopRequireDefault(_modelsProjectJs);

var _modelsProject_sectionJs = require('./../../../../models/project_section.js');

var _modelsProject_sectionJs2 = _interopRequireDefault(_modelsProject_sectionJs);

var _modelsProject_templateJs = require('./../../../../models/project_template.js');

var _modelsProject_templateJs2 = _interopRequireDefault(_modelsProject_templateJs);

var defaultButtons = [{
	title: 'Submit Comment',
	contentType: 'outer-link',
	method: 'comment',
	url: 'mailto:atlas@newamerica.org',
	reactIconNames: ['Comment'],
	isToggleable: false
}];

var Index = (function (_React$Component) {
	_inherits(Index, _React$Component);

	function Index(props) {
		_classCallCheck(this, Index);

		_get(Object.getPrototypeOf(Index.prototype), 'constructor', this).call(this, props);
		this.state = {};
	}

	_createClass(Index, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'div',
				{ className: 'atl fill-parent' },
				_react2['default'].createElement(_generalSide_barJsx2['default'], { buttons: defaultButtons }),
				_react2['default'].createElement(
					'div',
					{ id: 'atl__main', className: '-id-atl__main fill-parent' },
					_react2['default'].createElement(
						'div',
						{ className: 'atl__main' },
						_react2['default'].createElement(
							'div',
							{ className: 'atl__nav bg-c-off-white' },
							_react2['default'].createElement(
								'h1',
								{ className: 'title title--compact' },
								'Explore Atlas'
							),
							_react2['default'].createElement(_subcomponentsProject_templatesJsx2['default'], {
								radio: this.props.radio,
								projectTemplates: this.state.projectTemplates,
								updateProjectsIndex: this.forceUpdate.bind(this)
							}),
							_react2['default'].createElement(_subcomponentsProject_sectionsJsx2['default'], {
								radio: this.props.radio,
								projectSections: this.state.projectSections,
								updateProjectsIndex: this.forceUpdate.bind(this)
							})
						),
						_react2['default'].createElement(_subcomponentsProjectsJsx2['default'], {
							radio: this.props.radio,
							projects: this.state.projects,
							projectTemplates: this.state.projectTemplates,
							projectSections: this.state.projectSections,
							updateProjectsIndex: this.forceUpdate.bind(this)
						})
					)
				)
			);
		}
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {
			this.fetchProjects();
			this.fetchProjectSections();
			this.fetchProjectTemplates();
		}
	}, {
		key: 'fetchProjects',
		value: function fetchProjects() {
			var _this = this;

			var coll = new _modelsProjectJs2['default'].Collection();
			coll.getClientFetchPromise({}, { data: 0, body_text: 0, encoded_image: 0 }).then(function (coll) {
				_this.setState({ projects: coll });
			});
		}
	}, {
		key: 'fetchProjectSections',
		value: function fetchProjectSections() {
			var _this2 = this;

			var coll = new _modelsProject_sectionJs2['default'].Collection();
			coll.getClientFetchPromise().then(function (coll) {
				coll.initializeActiveStates();
				_this2.setState({ projectSections: coll });
			});
		}
	}, {
		key: 'fetchProjectTemplates',
		value: function fetchProjectTemplates() {
			var _this3 = this;

			var coll = new _modelsProject_templateJs2['default'].Collection();
			coll.getClientFetchPromise().then(function (coll) {
				coll.initializeActiveStates();
				_this3.setState({ projectTemplates: coll });
			});
		}
	}]);

	return Index;
})(_react2['default'].Component);

Index.contextTypes = {
	router: _react2['default'].PropTypes.func
};

exports['default'] = Index;
module.exports = exports['default'];

},{"./../../../../models/project.js":68,"./../../../../models/project_section.js":69,"./../../../../models/project_template.js":70,"./../../../general/side_bar.jsx":25,"./subcomponents/project_sections.jsx":36,"./subcomponents/project_templates.jsx":37,"./subcomponents/projects.jsx":38,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"classnames":167,"react":364}],36:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _generalIconsJsx = require('./../../../../general/icons.jsx');

var _generalIconsJsx2 = _interopRequireDefault(_generalIconsJsx);

var ProjectSections = (function (_React$Component) {
	_inherits(ProjectSections, _React$Component);

	function ProjectSections() {
		_classCallCheck(this, ProjectSections);

		_get(Object.getPrototypeOf(ProjectSections.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(ProjectSections, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'ul',
				{ className: 'atl__project-section-filter' },
				this.renderList()
			);
		}
	}, {
		key: 'renderList',
		value: function renderList() {
			var _this = this;

			if (this.props.projectSections == null) {
				return;
			}
			return this.props.projectSections.map(function (item, i) {
				return _react2['default'].createElement(ProjectSection, _extends({}, _this.props, {
					projectSection: item,
					key: i
				}));
			});
		}
	}]);

	return ProjectSections;
})(_react2['default'].Component);

var ProjectSection = (function (_React$Component2) {
	_inherits(ProjectSection, _React$Component2);

	function ProjectSection() {
		_classCallCheck(this, ProjectSection);

		_get(Object.getPrototypeOf(ProjectSection.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(ProjectSection, [{
		key: 'render',
		value: function render() {
			var projectSection = this.props.projectSection;
			return _react2['default'].createElement(
				'li',
				{ className: "toggle-button toggle-button--black " + this.getModifierClass(), onClick: this.toggleActiveState.bind(this) },
				_react2['default'].createElement(_generalIconsJsx2['default'].Hex, { className: 'toggle-button__icon' }),
				_react2['default'].createElement(
					'div',
					{ className: 'toggle-button__text' },
					_react2['default'].createElement(
						'p',
						null,
						projectSection.get('name')
					)
				)
			);
		}
	}, {
		key: 'getModifierClass',
		value: function getModifierClass() {
			if (!this.props.projectSection.get('_isActive')) {
				return 'toggle-button--inactive';
			}
			return '';
		}
	}, {
		key: 'toggleActiveState',
		value: function toggleActiveState() {
			this.props.projectSection.toggleActiveState();
			this.props.updateProjectsIndex();
		}
	}]);

	return ProjectSection;
})(_react2['default'].Component);

exports['default'] = ProjectSections;
module.exports = exports['default'];

},{"./../../../../general/icons.jsx":21,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/extends":91,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"classnames":167,"react":364}],37:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _generalIconsJsx = require('./../../../../general/icons.jsx');

var _generalIconsJsx2 = _interopRequireDefault(_generalIconsJsx);

var ProjectTemplates = (function (_React$Component) {
	_inherits(ProjectTemplates, _React$Component);

	function ProjectTemplates() {
		_classCallCheck(this, ProjectTemplates);

		_get(Object.getPrototypeOf(ProjectTemplates.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(ProjectTemplates, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'ul',
				{ className: 'atl__project-template-filter' },
				this.renderList()
			);
		}
	}, {
		key: 'renderList',
		value: function renderList() {
			var _this = this;

			if (this.props.projectTemplates == null) {
				return;
			}
			return this.props.projectTemplates.map(function (item, i) {
				return _react2['default'].createElement(ProjectTemplate, _extends({}, _this.props, {
					projectTemplate: item,
					key: i
				}));
			});
		}
	}]);

	return ProjectTemplates;
})(_react2['default'].Component);

var ProjectTemplate = (function (_React$Component2) {
	_inherits(ProjectTemplate, _React$Component2);

	function ProjectTemplate() {
		_classCallCheck(this, ProjectTemplate);

		_get(Object.getPrototypeOf(ProjectTemplate.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(ProjectTemplate, [{
		key: 'render',
		value: function render() {
			var projectTemplate = this.props.projectTemplate,
			    IconComp = _generalIconsJsx2['default'][this.getIconName()];
			return _react2['default'].createElement(
				'li',
				{ className: "icon-button " + this.getModifierClasses(), onClick: this.toggleActiveState.bind(this) },
				_react2['default'].createElement(
					'div',
					{ className: 'icon-button__icon' },
					_react2['default'].createElement(IconComp, null)
				),
				_react2['default'].createElement(
					'p',
					{ className: 'icon-button__text' },
					projectTemplate.get('display_name')
				)
			);
		}
	}, {
		key: 'getModifierClasses',
		value: function getModifierClasses() {
			var classes, projectTemplate;
			classes = [];
			projectTemplate = this.props.projectTemplate;
			if (projectTemplate.get('id') === '2') {
				classes.push('hidden');
			}
			if (projectTemplate.get('_isActive')) {
				classes.push('icon-button--active');
			}
			if (classes.length === 0) {
				return '';
			}
			return classes.join(' ');
		}
	}, {
		key: 'getIconName',
		value: function getIconName() {
			var templateName = this.props.projectTemplate.get('name'),
			    dictionary = {
				'Tilemap': 'Map',
				'Explainer': 'Dictionary',
				'Policy Brief': 'Dictionary',
				'Polling': 'Graph'
			};
			return dictionary[templateName];
		}
	}, {
		key: 'toggleActiveState',
		value: function toggleActiveState() {
			this.props.projectTemplate.toggleActiveState();
			this.props.updateProjectsIndex();
		}
	}]);

	return ProjectTemplate;
})(_react2['default'].Component);

exports['default'] = ProjectTemplates;
module.exports = exports['default'];

},{"./../../../../general/icons.jsx":21,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/extends":91,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"classnames":167,"react":364}],38:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _reactRouter = require('react-router');

var _utilitiesColorsJs = require('./../../../../utilities/colors.js');

var colors = _interopRequireWildcard(_utilitiesColorsJs);

var _generalIconsJsx = require('./../../../../general/icons.jsx');

var Icons = _interopRequireWildcard(_generalIconsJsx);

var Projects = (function (_React$Component) {
	_inherits(Projects, _React$Component);

	function Projects(props) {
		_classCallCheck(this, Projects);

		_get(Object.getPrototypeOf(Projects.prototype), 'constructor', this).call(this, props);
		this.state = {
			shouldDisplayImage: false,
			hasDisplayedImage: false
		};
	}

	/*
  *
  *
  */

	_createClass(Projects, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'div',
				{ className: 'atl__projects' },
				this.renderList()
			);
		}

		/*
   *
   *
   */
	}, {
		key: 'renderList',
		value: function renderList() {
			var _this = this;

			var projects = this.props.projects;
			if (projects == null) {
				return;
			}
			return projects.map(function (project, i) {
				return _react2['default'].createElement(Project, _extends({}, _this.props, {
					key: i,
					project: project,
					shouldDisplayImage: _this.state.shouldDisplayImage
				}));
			});
		}

		/*
   *
   *
   */
	}, {
		key: 'componentDidUpdate',
		value: function componentDidUpdate() {
			var projects = this.props.projects;
			if (projects == null) {
				return;
			}
			this.ensureProjectImages();
		}

		/*
   *
   *
   */
	}, {
		key: 'ensureProjectImages',
		value: function ensureProjectImages() {
			var _this2 = this;

			var projects = this.props.projects;
			if (projects == null) {
				return;
			}
			if (this.state.hasDisplayedImage) {
				return;
			}
			if (projects.hasImages) {
				return this.setState({ shouldDisplayImage: true, hasDisplayedImage: true });
			}

			$.ajax({
				url: 'api/v1/projects?fields=atlas_url,encoded_image,image_credit',
				type: 'get',
				success: function success(data) {
					// filter projects that don't have an image.
					var dataWithImage = [];
					data.forEach(function (datum) {
						var project;
						if (datum.encoded_image != null) {
							project = projects.findWhere({ atlas_url: datum.atlas_url });
							project.set('encoded_image', datum.encoded_image);
							project.set('image_credit', datum.image_credit);
						}
					});
					projects.hasImages = true;
					_this2.setState({ shouldDisplayImage: true, hasDisplayedImage: true });
				}
			});
		}
	}]);

	return Projects;
})(_react2['default'].Component);

Projects.contextTypes = {
	router: _react2['default'].PropTypes.func
};

var Project = (function (_React$Component2) {
	_inherits(Project, _React$Component2);

	/*
  *
  *
  */

	function Project(props) {
		_classCallCheck(this, Project);

		_get(Object.getPrototypeOf(Project.prototype), 'constructor', this).call(this, props);
		this.state = {
			highlightBackgroundColor: 'none'
		};
	}

	/*
  *
  *
  */

	_createClass(Project, [{
		key: 'render',
		value: function render() {
			var project, cls;
			if (!this.isVisible()) {
				return _react2['default'].createElement('div', null);
			}
			project = this.props.project;
			cls = (0, _classnames2['default'])({
				'atl__project': true,
				'atl__project--explainer': project.get('project_template_id') === '1',
				'atl__project--overview': project.get('is_section_overview') === 'Yes'
			});
			return _react2['default'].createElement(
				_reactRouter.Link,
				{
					className: cls,
					onMouseEnter: this.applyBackgroundColor.bind(this),
					onMouseLeave: this.removeBackgroundColor.bind(this),
					onClick: this.launch.bind(this),
					to: '/' + project.get('atlas_url'),
					'data-id': project.get('id')
				},
				_react2['default'].createElement(
					'div',
					{ className: 'atl__project__background', style: this.getBackgroundStyle() },
					_react2['default'].createElement(
						'div',
						{ className: 'center--content' },
						_react2['default'].createElement(
							'p',
							{ className: 'atl__project__background__initials' },
							this.getInitials()
						)
					)
				),
				_react2['default'].createElement(
					'div',
					{ className: 'atl__project__text', style: { backgroundColor: this.state.highlightBackgroundColor }, ref: 'project-text' },
					_react2['default'].createElement(
						'div',
						{ className: 'center--content' },
						_react2['default'].createElement(
							'h1',
							null,
							project.get('title')
						)
					)
				),
				this.renderAttribution()
			);
		}

		/*
   *
   *
   */
	}, {
		key: 'renderAttribution',
		value: function renderAttribution() {
			return null;
			var project = this.props.project,
			    imageCredit = project.get('image_credit'),
			    InfoComp = Icons.Info;
			if (imageCredit == null || imageCredit === '') {
				return;
			}
			return _react2['default'].createElement(
				'div',
				{ className: 'atl__attribution' },
				_react2['default'].createElement(InfoComp, null),
				_react2['default'].createElement(
					'div',
					{ className: 'atl__attribution__link' },
					_react2['default'].createElement(
						'p',
						null,
						'Image Credit'
					),
					_react2['default'].createElement(
						'div',
						null,
						'Shutterstock'
					)
				)
			);
		}

		/*
   *
   *
   */
	}, {
		key: 'getBackgroundStyle',
		value: function getBackgroundStyle() {
			var project = this.props.project;
			if (project == null || !this.props.shouldDisplayImage) {
				return;
			}
			var style = { 'backgroundImage': project.getImageUrl() };
			return style;
		}

		/*
   *
   *
   */
	}, {
		key: 'getInitials',
		value: function getInitials() {
			var project = this.props.project,
			    title,
			    initials;
			if (project.get('encoded_image') != null) {
				return '';
			}
			title = project.get('title');
			if (title == null) {
				return '';
			}
			initials = title.substring(0, 1) + title.substring(1, 2).toLowerCase();
			return initials;
		}

		/*
   *
   *
   */
	}, {
		key: 'isVisible',
		value: function isVisible() {
			var project = this.props.project,
			    projectSections = this.props.projectSections,
			    projectTemplates = this.props.projectTemplates;
			if (projectSections == null || projectTemplates == null) {
				return false;
			}
			return projectSections.test(project, 'project_section') && projectTemplates.test(project, 'project_template');
		}

		/*
   *
   *
   */
	}, {
		key: 'launch',
		value: function launch(e) {
			var href;
			href = this.props.project.get('atlas_url');
			// When the following page is rendered, its theme color is set to
			//   current highlight color.
			// TODO refactor current theme color assignments
			var radio = this.props.radio;

			radio.currentThemeColor = this.getColor().replace('0.8', '1.0');
		}

		/*
   *
   *
   */
	}, {
		key: 'applyBackgroundColor',
		value: function applyBackgroundColor() {
			var color;
			color = this.getColor();
			this.setState({ highlightBackgroundColor: color });
			var radio = this.props.radio;

			radio.commands.execute('set:header:strip:color', { color: color });
		}

		/*
   *
   *
   */
	}, {
		key: 'removeBackgroundColor',
		value: function removeBackgroundColor() {
			this.setState({ highlightBackgroundColor: '' });
			var radio = this.props.radio;

			radio.commands.execute('set:header:strip:color', 'none');
		}

		/*
   *
   *
   */
	}, {
		key: 'getColor',
		value: function getColor() {
			var project, projects, index, color;
			project = this.props.project;
			projects = this.props.projects;
			if (project == null || projects == null) {
				return;
			}
			index = projects.indexOf(project);
			color = colors.toRgba(index % 15, 0.8);
			return color;
		}
	}]);

	return Project;
})(_react2['default'].Component);

Project.contextTypes = {
	router: _react2['default'].PropTypes.func
};

exports['default'] = Projects;
module.exports = exports['default'];

},{"./../../../../general/icons.jsx":21,"./../../../../utilities/colors.js":59,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/extends":91,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"babel-runtime/helpers/interop-require-wildcard":95,"classnames":167,"react":364,"react-router":195}],39:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _crudNew_baseJs = require('./../../../crud/new_base.js');

var _crudNew_baseJs2 = _interopRequireDefault(_crudNew_baseJs);

var _modelsProjectJs = require('./../../../../models/project.js');

var _modelsProjectJs2 = _interopRequireDefault(_modelsProjectJs);

var New = (function (_NewBase) {
	_inherits(New, _NewBase);

	function New() {
		_classCallCheck(this, New);

		_get(Object.getPrototypeOf(New.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(New, [{
		key: 'getResourceName',
		value: function getResourceName() {
			return 'project';
		}
	}, {
		key: 'getResourceConstructor',
		value: function getResourceConstructor() {
			return _modelsProjectJs2['default'].Model;
		}
	}]);

	return New;
})(_crudNew_baseJs2['default']);

exports['default'] = New;
module.exports = exports['default'];

},{"./../../../../models/project.js":68,"./../../../crud/new_base.js":6,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"react":364}],40:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});

exports['default'] = function (project, isResearcherAuthenticated, isCollapsedDueToOverflow) {

	var atlas_url = project ? project.get('atlas_url') : '';
	var id = project ? project.get('id') : '';

	var publicButtons = [

	// {
	// 	title: 'Explore Atlas',
	// 	contentType: 'inner-link',
	// 	url: '/menu',
	// 	reactIconNames: [ 'Grid' ]
	// },
	{
		title: 'Collapse/Expand',
		contentType: 'button',
		clickMessage: 'toggle-collapsed-state',
		reactIconNames: ['Contract', 'Expand'],
		isHidden: isCollapsedDueToOverflow
	}, {
		title: 'Help',
		contentType: 'button',
		clickMessage: 'toggle-help',
		reactIconNames: ['Help']
	}, {
		title: 'Print',
		contentType: 'button',
		clickMessage: 'print',
		reactIconNames: ['Print']
	}, {
		title: 'Download Data',
		contentType: 'form',
		hiddenInputKey: 'atlas_url',
		hiddenInputValue: atlas_url,
		url: '/api/v1/projects/print',
		reactIconNames: ['Download']
	}, {
		title: 'Search',
		contentType: 'button',
		reactIconNames: ['Search'],
		clickMessage: 'toggle-search-bar'
	}];

	var authButtons = [{
		title: 'Edit Project',
		contentType: 'inner-link',
		url: '/projects/' + id + '/edit',
		reactIconNames: ['Build']
	}, {
		title: 'Delete Project',
		contentType: 'inner-link',
		url: '/projects/' + id + '/delete',
		reactIconNames: ['Trash']
	}];

	if (!isResearcherAuthenticated) {
		return publicButtons;
	}
	return publicButtons.concat(authButtons);
};

;
module.exports = exports['default'];

},{}],41:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _generalStaticJsx = require('./../../../../general/static.jsx');

var _generalStaticJsx2 = _interopRequireDefault(_generalStaticJsx);

var _subcomponentsRelatedJsx = require('./subcomponents/related.jsx');

var _subcomponentsRelatedJsx2 = _interopRequireDefault(_subcomponentsRelatedJsx);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var Explainer = (function (_Static) {
	_inherits(Explainer, _Static);

	function Explainer() {
		_classCallCheck(this, Explainer);

		_get(Object.getPrototypeOf(Explainer.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(Explainer, [{
		key: 'getTitleBarType',
		value: function getTitleBarType() {
			return 'solid';
		}
	}, {
		key: 'renderTitleBarContent',
		value: function renderTitleBarContent() {
			return _react2['default'].createElement(
				'div',
				{ className: 'atl__title-bar__content' },
				_react2['default'].createElement(
					'h1',
					{ className: 'title' },
					this.getTitle()
				),
				_react2['default'].createElement(
					'ul',
					null,
					_react2['default'].createElement(
						'li',
						null,
						'Updated: ',
						this.getUpdateMoment()
					)
				)
			);
		}
	}, {
		key: 'renderPageNavContent',
		value: function renderPageNavContent() {
			return _react2['default'].createElement(
				'div',
				{ className: 'atl__toc' },
				_react2['default'].createElement(
					'p',
					null,
					'Page Contents'
				),
				_react2['default'].createElement(
					'div',
					{ id: 'atl__toc__list' },
					_react2['default'].createElement(
						'ul',
						null,
						this.renderTocList()
					)
				)
			);
		}
	}, {
		key: 'renderPageContent',
		value: function renderPageContent() {
			return _react2['default'].createElement(
				'div',
				null,
				_react2['default'].createElement('div', { className: 'static-content', dangerouslySetInnerHTML: { __html: this.getBodyText() } }),
				_react2['default'].createElement(_subcomponentsRelatedJsx2['default'], { related: this.props.related })
			);
		}
	}, {
		key: 'renderTocList',
		value: function renderTocList() {
			var tocItems = this.props.project.get('body_text_toc');
			if (tocItems == null || tocItems.length === 0) {
				return;
			}
			return tocItems.map(function (item, i) {
				return _react2['default'].createElement(
					'li',
					{ className: 'toc-' + item.tagName, key: 'toc-' + i },
					_react2['default'].createElement(
						'a',
						{ href: "#toc-" + item.id },
						item.content
					)
				);
			});
		}
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {
			this.buildAtlasCharts();
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			this.destroyAtlasCharts();
		}
	}, {
		key: 'getTitle',
		value: function getTitle() {
			var project = this.props.project;
			return project != null ? project.get('title') : '';
		}
	}, {
		key: 'getBodyText',
		value: function getBodyText() {
			var project = this.props.project;
			return project != null ? project.get('body_text') : '';
		}
	}, {
		key: 'getUpdateMoment',
		value: function getUpdateMoment() {
			if (_moment2['default'] == null) {
				return;
			}
			return (0, _moment2['default'])(this.props.project.get('updated_at')).format("MMMM Do YYYY");
		}
	}, {
		key: 'buildAtlasCharts',
		value: function buildAtlasCharts() {
			if (ChartistHtml == null) {
				return;
			}
			this.chartManager = new ChartistHtml.ChartCollectionManager($('.atlas-chart'));
			this.chartManager.render();
		}
	}, {
		key: 'destroyAtlasCharts',
		value: function destroyAtlasCharts() {
			if (this.chartManager != null) {
				this.chartManager.destroy();
				delete this.chartManager;
			}
		}
	}]);

	return Explainer;
})(_generalStaticJsx2['default']);

exports['default'] = Explainer;
module.exports = exports['default'];

},{"./../../../../general/static.jsx":27,"./subcomponents/related.jsx":42,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"classnames":167,"moment":169,"react":364}],42:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var Related = (function (_React$Component) {
	_inherits(Related, _React$Component);

	function Related() {
		_classCallCheck(this, Related);

		_get(Object.getPrototypeOf(Related.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(Related, [{
		key: 'render',
		value: function render() {
			if (this.isListEmpty()) {
				return _react2['default'].createElement('div', { className: 'atl__related' });
			}
			return _react2['default'].createElement(
				'div',
				{ className: 'atl__related' },
				_react2['default'].createElement(
					'p',
					null,
					'Related Pages'
				),
				_react2['default'].createElement(
					'ul',
					null,
					this.renderList()
				)
			);
		}
	}, {
		key: 'renderList',
		value: function renderList() {
			var relatedItems = this.props.related;
			if (relatedItems == null) {
				return;
			}
			return relatedItems.map(function (item, i) {
				return _react2['default'].createElement(
					'li',
					{ key: 'related-' + i },
					_react2['default'].createElement(RelatedItem, { relatedItem: item })
				);
			});
		}
	}, {
		key: 'isListEmpty',
		value: function isListEmpty() {
			var relatedItems = this.props.related;
			if (relatedItems == null) {
				return true;
			}
			return relatedItems.length === 0;
		}
	}]);

	return Related;
})(_react2['default'].Component);

var RelatedItem = (function (_React$Component2) {
	_inherits(RelatedItem, _React$Component2);

	function RelatedItem() {
		_classCallCheck(this, RelatedItem);

		_get(Object.getPrototypeOf(RelatedItem.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(RelatedItem, [{
		key: 'render',
		value: function render() {
			var item = this.props.relatedItem;
			return _react2['default'].createElement(
				'a',
				{ className: 'link', href: "/" + item.get('atlas_url'), onClick: this.navigate.bind(this) },
				item.get('title')
			);
		}
	}, {
		key: 'navigate',
		value: function navigate(e) {
			e.preventDefault();
			var item = this.props.relatedItem;
			Backbone.history.navigate('/' + item.get('atlas_url'), { trigger: true });
		}
	}]);

	return RelatedItem;
})(_react2['default'].Component);

exports['default'] = Related;
module.exports = exports['default'];

},{"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"classnames":167,"react":364}],43:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _tilemapRootJsx = require('./tilemap/root.jsx');

var _tilemapRootJsx2 = _interopRequireDefault(_tilemapRootJsx);

var _explainerRootJsx = require('./explainer/root.jsx');

var _explainerRootJsx2 = _interopRequireDefault(_explainerRootJsx);

var _generalLoadingJsx = require('./../../../general/loading.jsx');

var _generalLoadingJsx2 = _interopRequireDefault(_generalLoadingJsx);

var _generalSide_barJsx = require('./../../../general/side_bar.jsx');

var _generalSide_barJsx2 = _interopRequireDefault(_generalSide_barJsx);

var _modelsProjectJs = require('./../../../../models/project.js');

var _modelsProjectJs2 = _interopRequireDefault(_modelsProjectJs);

var _buttons_data_generatorJs = require('./buttons_data_generator.js');

var _buttons_data_generatorJs2 = _interopRequireDefault(_buttons_data_generatorJs);

var Show = (function (_React$Component) {
	_inherits(Show, _React$Component);

	function Show(props) {
		_classCallCheck(this, Show);

		_get(Object.getPrototypeOf(Show.prototype), 'constructor', this).call(this, props);
		this.state = {
			ui: {
				specifier: '2012', // if time-dependent data is visualized, this field holds the active specifier, such as the year
				searchTerm: '',
				isSearchBarActive: false,
				itemsDisplayMode: 'map',
				isCollapsedDueToOverflow: false, // depends on screen size
				isCollapsedMaster: false, // master toggle
				isInfoBoxActive: false, // stores whether the info box is active
				isInfoBoxNarrow: false, // stores whether the info box is narrow
				isHelpActive: false,
				isMapDragging: false,
				isOptionsTabActive: false
			}
		};
	}

	/*
  *
  *
  */

	_createClass(Show, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'div',
				{ className: this.getClassName() },
				_react2['default'].createElement(_generalSide_barJsx2['default'], {
					radio: this.props.radio,
					project: this.state.project,
					sendMessageToParent: this.handleMessageFromButtons.bind(this),
					uiState: this.state.ui,
					setUiState: this.setUiState.bind(this),
					buttons: this.getButtons()
				}),
				this.renderProject()
			);
		}

		/*
   * Pick and render template-specific project.
   *
   */
	}, {
		key: 'renderProject',
		value: function renderProject() {
			if (this.state.project == null) {
				return _react2['default'].createElement(_generalLoadingJsx2['default'], null);
			}
			var Comp = this._isModelTilemap() ? _tilemapRootJsx2['default'] : _explainerRootJsx2['default'];
			return _react2['default'].createElement(Comp, {
				radio: this.props.radio,
				uiState: this.state.ui,
				setUiState: this.setUiState.bind(this),
				project: this.state.project,
				related: this.state.related
			});
		}

		/*
   *
   *
   */
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {
			this.fetchProject();
		}

		/*
   * This is a method passed down to all deep children so they can modify the state of the ui.
   *
   */
	}, {
		key: 'setUiState',
		value: function setUiState(uiStateChanges) {
			var currentUiState = this.state.ui;
			for (var key in uiStateChanges) {
				currentUiState[key] = uiStateChanges[key];
			}
			this.forceUpdate();
		}

		/*
   * This method is bound to the component and passed to the side bar buttons subcomponent that call it with a message. Each type of message is handled appropriately.
   *
   */
	}, {
		key: 'handleMessageFromButtons',
		value: function handleMessageFromButtons(message) {

			if (message === 'toggle-search-bar') {
				return this.setUiState({ isSearchBarActive: !this.state.ui.isSearchBarActive });
			}

			if (message === 'toggle-collapsed-state') {
				this.state.ui.isCollapsedMaster = !this.state.ui.isCollapsedMaster;
				return this.forceUpdate();
			}

			if (message === 'toggle-help') {
				this.state.ui.isHelpActive = !this.state.ui.isHelpActive;
				return this.forceUpdate();
			}

			if (message === 'print') {
				window.print();
			}
		}

		/*
   * Get side bar buttons.
   *
   */
	}, {
		key: 'getButtons',
		value: function getButtons() {
			return (0, _buttons_data_generatorJs2['default'])(this.state.project, window.isResearcherAuthenticated, this.state.ui.isCollapsedDueToOverflow);
		}

		/*
   *
   *
   */
	}, {
		key: 'getClassName',
		value: function getClassName() {

			var cls, project, data;

			project = this.state.project;
			data = project != null ? project.get('data') : null;

			// boolean classnames
			cls = (0, _classnames2['default'])({
				'atl': true,
				'atl--help': this.state.ui.isHelpActive,
				'atl--collapsed': this.state.ui.isCollapsedMaster || !this.state.ui.isCollapsedMaster && this.state.ui.isCollapsedDueToOverflow,
				'atl__info-box--active': this.state.ui.isInfoBoxActive,
				'atl__info-box--narrow': data && data.variables.getInfoBoxVariableCount() < 2
			});

			return cls;
		}

		/*
   *
   *
   */
	}, {
		key: '_isModelTilemap',
		value: function _isModelTilemap() {
			var project = this.state.project;
			if (project == null) {
				return false;
			}
			return project.get('project_template_name') === 'Tilemap';
		}

		/*
   * Send separate network request fetching related projects.
   *
   */
	}, {
		key: 'fetchRelatedProjects',
		value: function fetchRelatedProjects() {
			var _this = this;

			var prj = this.state.project;

			new _modelsProjectJs2['default'].Collection().getClientFetchPromise({
				related_to: prj.get('id'),
				special_query_params: 'related_to'
			}, {
				data: 0,
				body_text: 0,
				encoded_image: 0
			}).then(function (coll) {
				_this.setState({ related: coll });
			});
		}

		/*
   * Send network request to get project data.
   *
   */
	}, {
		key: 'fetchProject',
		value: function fetchProject() {
			var _this2 = this;

			var atlas_url = this.getAtlasUrl();

			new _modelsProjectJs2['default'].Collection().getClientFetchPromise({ atlas_url: atlas_url }).then(function (coll) {
				var project = coll.models[0];
				if (project && project.exists()) {
					project.prepOnClient();
					_this2.setState({ project: project });
					_this2.fetchRelatedProjects();
				}
			});
		}

		/*
   * Get project's atlas URL either from props or from props passed from router.
   *
   */
	}, {
		key: 'getAtlasUrl',
		value: function getAtlasUrl() {
			return this.props.atlas_url || this.props.params.atlas_url;
		}
	}]);

	return Show;
})(_react2['default'].Component);

Show.contextTypes = {
	router: _react2['default'].PropTypes.func
};

exports['default'] = Show;
module.exports = exports['default'];

},{"./../../../../models/project.js":68,"./../../../general/loading.jsx":22,"./../../../general/side_bar.jsx":25,"./buttons_data_generator.js":40,"./explainer/root.jsx":41,"./tilemap/root.jsx":44,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"classnames":167,"react":364}],44:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _subcomponentsMapRootJsx = require('./subcomponents/map/root.jsx');

var _subcomponentsMapRootJsx2 = _interopRequireDefault(_subcomponentsMapRootJsx);

var _subcomponentsTop_barJsx = require('./subcomponents/top_bar.jsx');

var _subcomponentsTop_barJsx2 = _interopRequireDefault(_subcomponentsTop_barJsx);

var _subcomponentsSettings_barJsx = require('./subcomponents/settings_bar.jsx');

var _subcomponentsSettings_barJsx2 = _interopRequireDefault(_subcomponentsSettings_barJsx);

var _subcomponentsPopupJsx = require('./subcomponents/popup.jsx');

var _subcomponentsPopupJsx2 = _interopRequireDefault(_subcomponentsPopupJsx);

var _subcomponentsInfo_boxJsx = require('./subcomponents/info_box.jsx');

var _subcomponentsInfo_boxJsx2 = _interopRequireDefault(_subcomponentsInfo_boxJsx);

var _subcomponentsListJsx = require('./subcomponents/list.jsx');

var _subcomponentsListJsx2 = _interopRequireDefault(_subcomponentsListJsx);

var _subcomponentsSearchJsx = require('./subcomponents/search.jsx');

var _subcomponentsSearchJsx2 = _interopRequireDefault(_subcomponentsSearchJsx);

var _subcomponentsOptions_tabJsx = require('./subcomponents/options_tab.jsx');

var _subcomponentsOptions_tabJsx2 = _interopRequireDefault(_subcomponentsOptions_tabJsx);

var Tilemap = (function (_React$Component) {
	_inherits(Tilemap, _React$Component);

	function Tilemap(props) {
		_classCallCheck(this, Tilemap);

		_get(Object.getPrototypeOf(Tilemap.prototype), 'constructor', this).call(this, props);
		this.state = {
			ignoreMapItemsOnUpdate: false
		};
	}

	_createClass(Tilemap, [{
		key: 'render',
		value: function render() {
			if (!this.isHealthy()) {
				return _react2['default'].createElement(
					'div',
					{ className: 'bg-c-off-white' },
					_react2['default'].createElement(
						'p',
						{ className: 'title' },
						'Project data is invalid.'
					)
				);
			}
			return _react2['default'].createElement(
				'div',
				{ className: 'atl__main fill-parent' },
				this.renderItems(),
				_react2['default'].createElement(_subcomponentsTop_barJsx2['default'], this.props),
				_react2['default'].createElement(_subcomponentsSettings_barJsx2['default'], this.props),
				_react2['default'].createElement(_subcomponentsPopupJsx2['default'], this.props),
				this.props.uiState.isSearchBarActive ? _react2['default'].createElement(_subcomponentsSearchJsx2['default'], this.props) : null,
				_react2['default'].createElement(_subcomponentsInfo_boxJsx2['default'], _extends({}, this.props, { activeItem: this.getActiveItem() })),
				this.renderOptionsTab()
			);
		}
	}, {
		key: 'isHealthy',
		value: function isHealthy() {
			var project = this.props.project;
			if (!project) {
				return false;
			}
			if (!project.get('data')) {
				return false;
			}
			if (!project.get('data').items) {
				return false;
			}
			return true;
		}
	}, {
		key: 'renderOptionsTab',
		value: function renderOptionsTab() {
			if (!this.props.uiState.isOptionsTabActive) {
				return;
			}
			var project = this.props.project;
			if (!project) {
				return;
			}
			var filter = project.get('data').filter;
			return _react2['default'].createElement(_subcomponentsOptions_tabJsx2['default'], _extends({}, this.props, { filter: filter }));
		}
	}, {
		key: 'renderItems',
		value: function renderItems() {
			if (this.props.uiState.itemsDisplayMode === 'map') {
				return _react2['default'].createElement(_subcomponentsMapRootJsx2['default'], _extends({}, this.props, { ignoreMapItemsOnUpdate: this.state.ignoreMapItemsOnUpdate }));
			} else {
				return _react2['default'].createElement(_subcomponentsListJsx2['default'], this.props);
			}
		}
	}, {
		key: 'getActiveItem',
		value: function getActiveItem() {
			return this.props.project.get('data').items.active;
		}
	}, {
		key: 'componentWillMount',
		value: function componentWillMount() {
			var _this = this;

			var radio = this.props.radio;

			radio.commands.setHandler('update:tilemap', function () {
				var args = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

				_this.setState({ ignoreMapItemsOnUpdate: args.ignoreMapItems });
			});
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			var radio = this.props.radio;

			radio.commands.removeHandler('update:tilemap');
		}
	}]);

	return Tilemap;
})(_react2['default'].Component);

exports['default'] = Tilemap;
module.exports = exports['default'];

},{"./subcomponents/info_box.jsx":49,"./subcomponents/list.jsx":50,"./subcomponents/map/root.jsx":51,"./subcomponents/options_tab.jsx":53,"./subcomponents/popup.jsx":54,"./subcomponents/search.jsx":55,"./subcomponents/settings_bar.jsx":56,"./subcomponents/top_bar.jsx":57,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/extends":91,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"classnames":167,"react":364}],45:[function(require,module,exports){
// Base class holding utility methods needed for project overview components.

'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var Base = (function (_React$Component) {
	_inherits(Base, _React$Component);

	function Base() {
		_classCallCheck(this, Base);

		_get(Object.getPrototypeOf(Base.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(Base, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement('div', null);
		}
	}, {
		key: 'getName',
		value: function getName() {
			var hoveredItem = this.getHoveredItem();
			if (hoveredItem == null) {
				return '';
			}
			return hoveredItem.get('name');
		}
	}, {
		key: 'getValue',
		value: function getValue() {
			var hoveredItem = this.getHoveredItem(),
			    filter = this.getFilter(),
			    filterActiveChild = filter.getActiveChild(),
			    variable;
			if (!hoveredItem || !filter || !filterActiveChild) {
				return;
			}
			variable = filter.getActiveChild().get('variable');
			return variable.getFormattedField(hoveredItem);
		}
	}, {
		key: 'getKey',
		value: function getKey() {
			var filter = this.getFilter(),
			    filterActiveChild = filter.getActiveChild();
			if (!filterActiveChild) {
				return '';
			}
			return filterActiveChild.get('variable').get('display_title');
		}
	}, {
		key: 'getHoveredItem',
		value: function getHoveredItem() {
			return this.props.project.get('data').items.hovered;
		}
	}, {
		key: 'getFilter',
		value: function getFilter() {
			return this.props.project.get('data').filter;
		}
	}]);

	return Base;
})(_react2['default'].Component);

exports['default'] = Base;
module.exports = exports['default'];

},{"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"react":364}],46:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _generalIconsJsx = require('./../../../../../general/icons.jsx');

var _generalIconsJsx2 = _interopRequireDefault(_generalIconsJsx);

var _baseJsx = require('./base.jsx');

var _baseJsx2 = _interopRequireDefault(_baseJsx);

var buttons = [{ name: 'filter', iconName: 'Filter' }, { name: 'search', iconName: 'Search' }];

var DisplayToggle = (function (_Base) {
	_inherits(DisplayToggle, _Base);

	function DisplayToggle() {
		_classCallCheck(this, DisplayToggle);

		_get(Object.getPrototypeOf(DisplayToggle.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(DisplayToggle, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'div',
				{ className: 'atl__display-toggle binary-toggle' },
				this.renderHalves()
			);
		}
	}, {
		key: 'renderHalves',
		value: function renderHalves() {
			var _this = this;

			return buttons.map(function (half, i) {
				var IconComp = _generalIconsJsx2['default'][half.iconName],
				    cls = (0, _classnames2['default'])({
					'binary-toggle__link': true,
					'binary-toggle__link--active': _this.props.uiState.display === half.name
				});
				return _react2['default'].createElement(
					'div',
					{ className: 'binary-toggle__half', key: i },
					_react2['default'].createElement(
						'a',
						{
							href: '#',
							onClick: _this.setUiDisplay.bind(_this, half.name),
							className: cls
						},
						_react2['default'].createElement(IconComp, null)
					)
				);
			});
		}

		//
	}, {
		key: 'setUiDisplay',
		value: function setUiDisplay(name) {
			if (this.props.uiState.display === name) {
				return;
			}
			this.props.setUiState({ display: name });
		}
	}]);

	return DisplayToggle;
})(_baseJsx2['default']);

exports['default'] = DisplayToggle;
module.exports = exports['default'];

},{"./../../../../../general/icons.jsx":21,"./base.jsx":45,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"classnames":167,"react":364}],47:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _generalHelpJsx = require('./../../../../../general/help.jsx');

var _generalHelpJsx2 = _interopRequireDefault(_generalHelpJsx);

var _generalIconsJsx = require('./../../../../../general/icons.jsx');

var _generalIconsJsx2 = _interopRequireDefault(_generalIconsJsx);

var _baseJsx = require('./base.jsx');

var _baseJsx2 = _interopRequireDefault(_baseJsx);

var _utilitiesColorsJs = require('./../../../../../utilities/colors.js');

var colors = _interopRequireWildcard(_utilitiesColorsJs);

var _utilitiesFormattersJs = require('./../../../../../../utilities/formatters.js');

var formatters = _interopRequireWildcard(_utilitiesFormattersJs);

var Filter = (function (_Base) {
	_inherits(Filter, _Base);

	function Filter(props) {
		_classCallCheck(this, Filter);

		_get(Object.getPrototypeOf(Filter.prototype), 'constructor', this).call(this, props);
		this.maxHeight = 0;
	}

	_createClass(Filter, [{
		key: 'render',
		value: function render() {
			var MoreIcon = _generalIconsJsx2['default'].More;
			return _react2['default'].createElement(
				'div',
				{ className: 'atl__filter', ref: 'root' },
				_react2['default'].createElement(
					'div',
					{ className: 'atl__filter__keys' },
					_react2['default'].createElement(
						'ul',
						null,
						this.renderKeys(),
						_react2['default'].createElement(
							'li',
							{ className: 'button', onClick: this.toggleOptionsTab.bind(this) },
							_react2['default'].createElement(MoreIcon, null)
						)
					),
					_react2['default'].createElement(_generalHelpJsx2['default'], { position: 'right', text: 'Select the variable you want to filter by.', id: 'filter-keys' })
				),
				_react2['default'].createElement(
					'div',
					{ className: 'atl__filter__values' },
					_react2['default'].createElement('div', { className: 'atl__filter__values__heading',
						dangerouslySetInnerHTML: { __html: this.getKeyDescriptionHtml() }
					}),
					_react2['default'].createElement(
						'ul',
						null,
						this.renderValues()
					),
					_react2['default'].createElement(_generalHelpJsx2['default'], { position: 'right', text: 'Select the values you want to filter out. Corresponding map colors are indicated.', id: 'filter-values' })
				)
			);
		}
	}, {
		key: 'getHeight',
		value: function getHeight() {
			var $el = $(_react2['default'].findDOMNode(this.refs.root));
			var height = $el.height();
			if (height > this.maxHeight) {
				this.maxHeight = height;
			} else {
				height = this.maxHeight;
			}
			return height;
		}
	}, {
		key: 'toggleOptionsTab',
		value: function toggleOptionsTab() {
			this.props.setUiState({ isOptionsTabActive: !this.props.uiState.isOptionsTabActive });
		}
	}, {
		key: 'componentDidUpdate',
		value: function componentDidUpdate() {
			this.props.cacheHeight(this.getHeight());
		}

		// Render only three around the current active key.
	}, {
		key: 'renderKeys',
		value: function renderKeys() {
			var _this = this;

			var keys = this.props.filter.children,
			    activeKey = this.props.filter.getActiveChild(),
			    index = keys.indexOf(activeKey),
			    neighborHood = this.props.filter.getActiveChildNeighborhood(0);
			return neighborHood.map(function (key, i) {
				return _react2['default'].createElement(FilterKey, { radio: _this.props.radio, filterKey: key, key: i });
			});
		}
	}, {
		key: 'getKeyDescriptionHtml',
		value: function getKeyDescriptionHtml() {
			var keys = this.props.filter.children,
			    activeKey = this.props.filter.getActiveChild();

			if (activeKey) {
				var longDescription = activeKey.get('variable').get('long_description');
				return formatters.markdown(longDescription);
			}
		}
	}, {
		key: 'renderValues',
		value: function renderValues() {
			var _this2 = this;

			var activeChild = this.props.filter.getActiveChild();
			if (!activeChild) {
				return;
			}
			var values = activeChild.children;
			return values.map(function (value, i) {
				return _react2['default'].createElement(FilterValue, { radio: _this2.props.radio, filterValue: value, key: i });
			});
		}
	}]);

	return Filter;
})(_baseJsx2['default']);

var FilterKey = (function (_React$Component) {
	_inherits(FilterKey, _React$Component);

	function FilterKey() {
		_classCallCheck(this, FilterKey);

		_get(Object.getPrototypeOf(FilterKey.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(FilterKey, [{
		key: 'render',
		value: function render() {
			var cls = (0, _classnames2['default'])({
				'button': 'true',
				'button--active': this.props.filterKey.isActive()
			});
			return _react2['default'].createElement(
				'li',
				{ className: cls, onClick: this.toggle.bind(this) },
				_react2['default'].createElement(
					'p',
					null,
					this.getContent()
				)
			);
		}
	}, {
		key: 'getContent',
		value: function getContent() {
			return this.props.filterKey.get('variable').get('display_title');
		}
	}, {
		key: 'toggle',
		value: function toggle() {
			var radio = this.props.radio;

			this.props.filterKey.clickToggle();
			radio.commands.execute('update:tilemap');
		}
	}]);

	return FilterKey;
})(_react2['default'].Component);

var FilterValue = (function (_React$Component2) {
	_inherits(FilterValue, _React$Component2);

	function FilterValue() {
		_classCallCheck(this, FilterValue);

		_get(Object.getPrototypeOf(FilterValue.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(FilterValue, [{
		key: 'render',
		value: function render() {
			var IconComp = _generalIconsJsx2['default'].Hex,
			    className = (0, _classnames2['default'])({
				'toggle-button': true,
				'toggle-button--inactive': !this.props.filterValue.isActive()
			});
			return _react2['default'].createElement(
				'li',
				{
					className: className,
					onClick: this.toggle.bind(this),
					onMouseEnter: this.setHovered.bind(this),
					onMouseLeave: this.clearHovered.bind(this)
				},
				_react2['default'].createElement(IconComp, { className: 'toggle-button__icon', fillColor: this.getColor() }),
				_react2['default'].createElement(
					'div',
					{ className: 'toggle-button__text' },
					_react2['default'].createElement(
						'p',
						null,
						this.props.filterValue.get('value')
					)
				)
			);
		}
	}, {
		key: 'getColor',
		value: function getColor() {
			if (!this.props.filterValue.isActive()) {
				return;
			}
			var i = this.props.filterValue.getFriendlySiblingIndex(15);
			return colors.toRgba(i - 1);
		}
	}, {
		key: 'setHovered',
		value: function setHovered() {
			var radio = this.props.radio;

			var modelIndex, color;
			modelIndex = this.getFilterValueIndex();
			this.props.filterValue.parent.parent.state.valueHoverIndex = modelIndex;
			radio.commands.execute('update:tilemap');
			color = this.getColor();
			radio.commands.execute('set:header:strip:color', { color: color });
		}
	}, {
		key: 'clearHovered',
		value: function clearHovered() {
			var radio = this.props.radio;

			this.props.filterValue.parent.parent.state.valueHoverIndex = -1;
			radio.commands.execute('update:tilemap');
			radio.commands.execute('set:header:strip:color', 'none');
		}
	}, {
		key: 'getFilterValueIndex',
		value: function getFilterValueIndex() {
			return this.props.filterValue.parent.children.indexOf(this.props.filterValue);
		}
	}, {
		key: 'toggle',
		value: function toggle() {
			var radio = this.props.radio;

			this.props.filterValue.toggle();
			radio.commands.execute('update:tilemap');
		}
	}]);

	return FilterValue;
})(_react2['default'].Component);

exports['default'] = Filter;
module.exports = exports['default'];

},{"./../../../../../../utilities/formatters.js":76,"./../../../../../general/help.jsx":20,"./../../../../../general/icons.jsx":21,"./../../../../../utilities/colors.js":59,"./base.jsx":45,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"babel-runtime/helpers/interop-require-wildcard":95,"classnames":167,"react":364}],48:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _baseJsx = require('./base.jsx');

var _baseJsx2 = _interopRequireDefault(_baseJsx);

var Headline = (function (_Base) {
	_inherits(Headline, _Base);

	function Headline(props) {
		_classCallCheck(this, Headline);

		_get(Object.getPrototypeOf(Headline.prototype), 'constructor', this).call(this, props);
		this.maxHeight = 0;
	}

	_createClass(Headline, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'div',
				{ className: 'atl__headline', ref: 'root' },
				_react2['default'].createElement('p', { className: 'atl__headline__sections', dangerouslySetInnerHTML: { __html: this.getSectionText() } }),
				_react2['default'].createElement(
					'h1',
					{ className: 'atl__headline__title' },
					this.getTitle()
				),
				_react2['default'].createElement(
					'h2',
					{ className: 'atl__headline__description' },
					this.getShortDescription(),
					_react2['default'].createElement(
						'a',
						{ href: '#', className: 'link', onClick: this.openInfoBox.bind(this) },
						'More...'
					)
				)
			);
		}
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {
			this.props.cacheHeight(this.getHeight());
		}
	}, {
		key: 'componentDidUpdate',
		value: function componentDidUpdate() {
			this.props.cacheHeight(this.getHeight());
		}
	}, {
		key: 'getHeight',
		value: function getHeight() {
			var $el = $(_react2['default'].findDOMNode(this.refs.root));
			var height = $el.height();
			if (height > this.maxHeight) {
				this.maxHeight = height;
			} else {
				height = this.maxHeight;
			}
			return height;
		}
	}, {
		key: 'openInfoBox',
		value: function openInfoBox(e) {
			var project = this.props.project;
			if (project == null) {
				return;
			}
			e.preventDefault();
			this.props.project.get('data').items.active = undefined;
			this.props.setUiState({ isInfoBoxActive: true });
		}
	}, {
		key: 'getShortDescription',
		value: function getShortDescription() {
			var project = this.props.project;
			if (project == null) {
				return;
			}
			return project.get('short_description');
		}
	}, {
		key: 'getSectionText',
		value: function getSectionText() {
			var project, projectSectionNames;
			project = this.props.project;
			if (project == null) {
				return;
			}
			projectSectionNames = project.get('project_section_names');
			if (projectSectionNames == null) {
				return '';
			}
			return projectSectionNames.join(',<br>').toUpperCase();
		}
	}, {
		key: 'getTitle',
		value: function getTitle() {
			var project = this.props.project;
			if (project == null) {
				return;
			}
			return project.get('title');
		}
	}]);

	return Headline;
})(_baseJsx2['default']);

exports['default'] = Headline;
module.exports = exports['default'];

},{"./base.jsx":45,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"classnames":167,"react":364}],49:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _generalStaticJsx = require('./../../../../../general/static.jsx');

var _generalStaticJsx2 = _interopRequireDefault(_generalStaticJsx);

var _generalIconsJsx = require('./../../../../../general/icons.jsx');

var _generalIconsJsx2 = _interopRequireDefault(_generalIconsJsx);

var _modelsImageJs = require('./../../../../../../models/image.js');

var _modelsImageJs2 = _interopRequireDefault(_modelsImageJs);

var _baseJsx = require('./base.jsx');

var _baseJsx2 = _interopRequireDefault(_baseJsx);

var InfoBox = (function (_Static) {
	_inherits(InfoBox, _Static);

	/*
  *
  *
  */

	function InfoBox(props) {
		_classCallCheck(this, InfoBox);

		_get(Object.getPrototypeOf(InfoBox.prototype), 'constructor', this).call(this, props);
		this.state = {
			transitionEventNamespace: 0
		};
	}

	/*
  *
  *
  */

	_createClass(InfoBox, [{
		key: 'render',
		value: function render() {
			var NoIcon = _generalIconsJsx2['default'].No;
			return _react2['default'].createElement(
				'div',
				{ className: 'atl__info-box', ref: 'main', onScroll: this.setStickyPageNav.bind(this) },
				_react2['default'].createElement(
					'a',
					{ href: '#', className: 'atl__info-box__close', onClick: this.close.bind(this) },
					_react2['default'].createElement(NoIcon, null)
				),
				this.renderTitleBar('image'),
				this.renderContentBar()
			);
		}

		/*
   *
   *
   */
	}, {
		key: 'renderTitleBarBackground',
		value: function renderTitleBarBackground() {
			return _react2['default'].createElement('div', {
				className: 'atl__title-bar__background',
				style: this.getTitleBarBackgroundStyle(),
				ref: 'title-bar-background'
			});
		}

		/*
   *
   *
   */
	}, {
		key: 'getTitleBarBackgroundStyle',
		value: function getTitleBarBackgroundStyle() {

			var project = this.props.project;
			var activeItem = project.get('data').items.active;

			if (!activeItem) {
				if (project.getImageUrl()) {
					return { 'backgroundImage': project.getImageUrl() };
				}
				return { 'backgroundColor': 'rgba(50, 50, 50, 0.1)' };
			}

			// The image field is set to 'not available' if there was already a network request for the image and it returned empty.
			if (activeItem.image && activeItem.image !== 'not available') {
				return { 'backgroundImage': activeItem.image.getUrl() };
			}

			return { 'backgroundColor': 'rgba(50, 50, 50, 0.1)' };
		}

		/*
   *
   *
   */
	}, {
		key: 'renderTitleBarContent',
		value: function renderTitleBarContent() {
			return _react2['default'].createElement(
				'div',
				{ className: 'atl__title-bar__content' },
				_react2['default'].createElement(
					'h1',
					{ className: 'title' },
					this.getTitle()
				),
				_react2['default'].createElement(
					'ul',
					null,
					this.renderWebsiteLink()
				)
			);
		}

		/*
   *
   *
   */
	}, {
		key: 'renderPageNavContent',
		value: function renderPageNavContent() {
			return _react2['default'].createElement(
				'div',
				{ className: 'atl__toc' },
				_react2['default'].createElement(
					'p',
					null,
					'Page Contents'
				),
				_react2['default'].createElement(
					'div',
					{ id: 'atl__toc__list' },
					this.renderTocList()
				)
			);
		}

		/*
   *
   *
   */
	}, {
		key: 'renderPageContent',
		value: function renderPageContent() {
			var content = this.getContent();
			return _react2['default'].createElement('div', { className: 'static-content', dangerouslySetInnerHTML: { __html: content.body } });
		}

		/*
   	 * 
   	 *
   	 */
	}, {
		key: 'renderTocList',
		value: function renderTocList() {
			var tocItems = this.getContent().toc;
			if (!tocItems) {
				return;
			}
			if (tocItems.length < 2) {
				return;
			}
			return tocItems.map(function (item, i) {
				return _react2['default'].createElement(
					'li',
					{ className: 'toc-' + item.tagName, key: 'toc-' + i },
					_react2['default'].createElement(
						'a',
						{ href: "#toc-" + item.id },
						item.content
					)
				);
			});
		}

		/*
   *
   *
   */
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {
			this.setImage();
		}

		/*
   *
   *
   */
	}, {
		key: 'componentDidUpdate',
		value: function componentDidUpdate() {
			var activeItem = this.props.project ? this.props.project.get('data').items.active : undefined;
			if (this.state.image == null) {
				return this.setImage();
			}
			if (activeItem == null || activeItem.getImageName() !== this.state.image.get('name')) {
				this.setImage();
			}
		}

		/*
   *
   *
   */
	}, {
		key: 'getTitle',
		value: function getTitle() {
			var activeItem, project;
			project = this.props.project;
			activeItem = project.get('data').items.active;
			if (activeItem != null) {
				return activeItem.get('name');
			}
			return project.get('title');
		}

		/*
   *
   *
   */
	}, {
		key: 'getBodyHtml',
		value: function getBodyHtml() {
			var activeItem, project;
			project = this.props.project;
			activeItem = project.get('data').items.active;
			if (activeItem != null) {
				return '<p>Active Data Html</p>';
			}
			return project.get('body_text');
		}

		/*
   *
   *
   */
	}, {
		key: 'close',
		value: function close(e) {
			var radio = this.props.radio;

			var $el, transitionEventName, items;
			items = this.props.project.get('data').items;
			e.preventDefault();
			transitionEventName = this.getTransitionEventName();
			$el = $(_react2['default'].findDOMNode(this.refs.main));
			$el.on(transitionEventName, function () {
				delete items.active;
				$el.off(transitionEventName);
				radio.commands.execute('set:header:strip:color', {});
				radio.commands.execute('update:tilemap');
			});
			this.props.setUiState({ isInfoBoxActive: false });
		}

		/*
   * Get a list of transition event names.
   * Each event is namespaced with an incremental id so that the same events are not reattached over and over again.
   */
	}, {
		key: 'getTransitionEventName',
		value: function getTransitionEventName() {
			var _this = this;

			var eventName, events;
			events = ['webkitTransitionEnd', 'otransitionend', 'oTransitionEnd', 'msTransitionEnd', 'transitionend'];
			this.setState({
				transitionEventNamespace: this.state.transitionEventNamespace + 1
			});
			eventName = events.map(function (evnt) {
				return evnt + "." + _this.state.transitionEventNamespace;
			}).join(' ');
			return eventName;
		}

		/*
   * Fetch image related to the current active item.
   *
   */
	}, {
		key: 'setImage',
		value: function setImage() {
			var _this2 = this;

			var project = this.props.project,
			    activeItem = project.get('data').items.active;

			if (!activeItem) {
				return;
			}

			if (!activeItem.image) {
				var imageName = activeItem.getImageName();
				var coll = new _modelsImageJs2['default'].Collection();
				coll.getClientFetchPromise({ name: imageName }).then(function (coll) {
					var img = coll.models[0];
					if (img) {
						activeItem.image = img;
						_this2.forceUpdate();
					} else {
						activeItem.image = 'not available';
					}
				});
			}
		}

		/*
   * 
   *
   */
	}, {
		key: 'renderWebsiteLink',
		value: function renderWebsiteLink() {
			var LinkComp = _generalIconsJsx2['default'].Link;
			var project = this.props.project;
			if (!project) {
				return;
			}
			var activeItem = project.get('data').items.active;
			if (!activeItem) {
				return;
			}
			var url = activeItem.get('website') || activeItem.get('state_website');
			if (!url) {
				return;
			}
			return _react2['default'].createElement(
				'li',
				null,
				_react2['default'].createElement(
					'a',
					{ className: 'icon-button', href: url },
					_react2['default'].createElement(
						'div',
						{ className: 'icon-button__icon' },
						_react2['default'].createElement(LinkComp, null)
					),
					_react2['default'].createElement(
						'div',
						{ className: 'icon-button__text' },
						'Website'
					)
				)
			);
		}

		/*
   * Get info box body and table of contents.
   *
   */
	}, {
		key: 'getContent',
		value: function getContent() {
			var activeItem, body, cntnt, project, toc;
			body = '';
			toc = '';
			project = this.props.project;
			activeItem = this.props.activeItem;
			if (activeItem != null) {
				this.ensureActiveItemContent();
				body = activeItem.get('info_box_content');
				toc = activeItem.get('info_box_content_toc');
			} else {
				body = project.get('body_text');
				toc = project.get('body_text_toc');
			}
			return cntnt = {
				body: body,
				toc: toc
			};
		}

		/*
   *
   *
   */
	}, {
		key: 'getFilteredVariables',
		value: function getFilteredVariables(field) {

			var project = this.props.project,
			    variables = project.get('data').variables,
			    filtered;

			filtered = variables.filter(function (variable) {
				return !!variable.get(field);
			});

			filtered = filtered.sort(function (a, b) {
				return a.get(field) - b.get(field);
			});

			return filtered;
		}

		/*
   *
   *
   */
	}, {
		key: 'getSummaryContent',
		value: function getSummaryContent() {

			var activeItem, html, summaryVar;

			activeItem = this.props.activeItem;

			if (activeItem.get('summary') || activeItem.get('summarytable')) {
				return;
			}

			summaryVar = this.getFilteredVariables('summary_order');

			if (summaryVar.length === 0) {
				return;
			}

			html = '<table>';

			summaryVar.forEach(function (variable) {
				html += '\n\t\t\t\t<tr>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t' + variable.get('display_title') + '\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t' + variable.getFormattedField(activeItem) + '\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t';
			});

			html += '</table>';

			return html;
		}

		/*
   *
   *
   */
	}, {
		key: 'ensureActiveItemContent',
		value: function ensureActiveItemContent() {
			var radio = this.props.radio;

			var activeItem, html, infoBoxVar, project, variables;

			project = this.props.project;

			activeItem = this.props.activeItem;

			var summaryContent = this.getSummaryContent();
			html = summaryContent ? '<h1>Overview</h1>' + summaryContent : '';

			if (!activeItem) {
				return;
			}
			if (activeItem.get('info_box_content')) {
				return;
			}

			infoBoxVar = this.getFilteredVariables('infobox_order');

			infoBoxVar.forEach(function (variable) {
				html += '\n\t\t\t\t<h1>\n\t\t\t\t\t' + (variable.get('display_title') || 'Overview') + '\n\t\t\t\t</h1>\n\t\t\t\t' + variable.getFormattedField(activeItem) + '\n\t\t\t';
			});

			activeItem.set('info_box_content', html);

			return activeItem.setHtmlToc('info_box_content');
		}
	}]);

	return InfoBox;
})(_generalStaticJsx2['default']);

exports['default'] = InfoBox;
module.exports = exports['default'];

},{"./../../../../../../models/image.js":66,"./../../../../../general/icons.jsx":21,"./../../../../../general/static.jsx":27,"./base.jsx":45,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"classnames":167,"react":364}],50:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _baseJsx = require('./base.jsx');

var _baseJsx2 = _interopRequireDefault(_baseJsx);

var List = (function (_Base) {
	_inherits(List, _Base);

	function List() {
		_classCallCheck(this, List);

		_get(Object.getPrototypeOf(List.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(List, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'div',
				{ className: 'atl__list fill-parent bg-c-off-white' },
				this.renderItems()
			);
		}
	}, {
		key: 'renderItems',
		value: function renderItems() {
			var project = this.props.project;
			if (project == null) {
				return;
			}
			return project.get('data').items.map(function (item, i) {
				return _react2['default'].createElement(
					'p',
					{ key: i },
					item.get('name')
				);
			});
		}
	}]);

	return List;
})(_baseJsx2['default']);

exports['default'] = List;
module.exports = exports['default'];

},{"./base.jsx":45,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"classnames":167,"react":364}],51:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _utilitiesColorsJs = require('./../../../../../../utilities/colors.js');

var colors = _interopRequireWildcard(_utilitiesColorsJs);

var _utilitiesSvg_pathsJs = require('./../../../../../../utilities/svg_paths.js');

var svgPaths = _interopRequireWildcard(_utilitiesSvg_pathsJs);

var _subcomponentsControlJsx = require('./subcomponents/control.jsx');

var _subcomponentsControlJsx2 = _interopRequireDefault(_subcomponentsControlJsx);

var Map = (function (_React$Component) {
	_inherits(Map, _React$Component);

	function Map(props) {
		_classCallCheck(this, Map);

		_get(Object.getPrototypeOf(Map.prototype), 'constructor', this).call(this, props);
		this.state = {
			map: undefined
		};
	}

	_createClass(Map, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'div',
				{ className: 'fill-parent', id: 'atl__map' },
				_react2['default'].createElement(_subcomponentsControlJsx2['default'], { map: this.state.map })
			);
		}
	}, {
		key: 'shouldComponentUpdate',
		value: function shouldComponentUpdate(nextProps, nextState) {
			return !nextProps.ignoreMapItemsOnUpdate;
		}
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {
			var Map = window.Map;
			Map.props = {
				radio: this.props.radio,
				project: this.props.project,
				uiState: this.props.uiState,
				setUiState: this.props.setUiState,
				setMap: this.setMap.bind(this)
			};
			Map.colors = colors;
			Map.svgPaths = svgPaths;
			Map.start();
		}

		// Set Mapbox map instance. On the component state.
	}, {
		key: 'setMap',
		value: function setMap(map) {
			this.setState({ map: map });
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			var Map = window.Map;
			Map.props = {};
			Map.stop();
		}
	}, {
		key: 'componentDidUpdate',
		value: function componentDidUpdate() {
			var Map = window.Map;
			if (!this.props.uiState.isMapDragged && Map.overlayView) {
				Map.overlayView.update();
			}
		}
	}]);

	return Map;
})(_react2['default'].Component);

exports['default'] = Map;
module.exports = exports['default'];

},{"./../../../../../../utilities/colors.js":59,"./../../../../../../utilities/svg_paths.js":60,"./subcomponents/control.jsx":52,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"babel-runtime/helpers/interop-require-wildcard":95,"classnames":167,"react":364}],52:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _generalIconsJsx = require('./../../../../../../../general/icons.jsx');

var Control = (function (_React$Component) {
	_inherits(Control, _React$Component);

	function Control(props) {
		_classCallCheck(this, Control);

		_get(Object.getPrototypeOf(Control.prototype), 'constructor', this).call(this, props);
	}

	_createClass(Control, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'div',
				{ className: 'atl__map-control' },
				_react2['default'].createElement(
					'div',
					{ onClick: this.showAttribution.bind(this), className: 'atl__map-control__button' },
					_react2['default'].createElement(_generalIconsJsx.Info, null)
				),
				_react2['default'].createElement(
					'div',
					{ onClick: this.zoom.bind(this, +1), className: 'atl__map-control__button' },
					_react2['default'].createElement(_generalIconsJsx.Plus, null)
				),
				_react2['default'].createElement(
					'div',
					{ onClick: this.zoom.bind(this, -1), className: 'atl__map-control__button' },
					_react2['default'].createElement(_generalIconsJsx.Minus, null)
				),
				_react2['default'].createElement(
					'div',
					{ className: 'atl__help atl__help--left' },
					'View ',
					_react2['default'].createElement(
						'b',
						null,
						'copyright'
					),
					' information about the map and ',
					_react2['default'].createElement(
						'b',
						null,
						'zoom'
					),
					' in and out.'
				)
			);
		}
	}, {
		key: 'zoom',
		value: function zoom(zoomChange) {
			if (this.props.map) {
				this.props.map.changeZoom(zoomChange);
			}
		}
	}, {
		key: 'showAttribution',
		value: function showAttribution() {
			$('.leaflet-control-attribution').toggle();
		}
	}]);

	return Control;
})(_react2['default'].Component);

exports['default'] = Control;
module.exports = exports['default'];

},{"./../../../../../../../general/icons.jsx":21,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"classnames":167,"react":364}],53:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _generalIconsJsx = require('./../../../../../general/icons.jsx');

var _underscore = (window._);

var _underscore2 = _interopRequireDefault(_underscore);

var _baseJsx = require('./base.jsx');

var _baseJsx2 = _interopRequireDefault(_baseJsx);

var OptionsTab = (function (_Base) {
	_inherits(OptionsTab, _Base);

	function OptionsTab() {
		_classCallCheck(this, OptionsTab);

		_get(Object.getPrototypeOf(OptionsTab.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(OptionsTab, [{
		key: 'render',

		/*
   *
   *
   */
		value: function render() {
			return _react2['default'].createElement(
				'div',
				{ className: 'atl__options-tab' },
				_react2['default'].createElement(
					'a',
					{ href: '#', className: 'atl__options-tab__close', onClick: this.close.bind(this) },
					_react2['default'].createElement(_generalIconsJsx.No, null)
				),
				_react2['default'].createElement(
					'div',
					{ className: 'atl__options-tab__content' },
					_react2['default'].createElement(
						'ul',
						null,
						this.renderKeyGroups()
					)
				)
			);
		}

		/*
   *
   *
   */
	}, {
		key: 'close',
		value: function close(e) {
			e.preventDefault();
			this.props.setUiState({ isOptionsTabActive: false });
		}

		/*
   * 
   *
   */
	}, {
		key: 'renderKeyGroups',
		value: function renderKeyGroups() {
			var _this = this;

			var keys = this.props.filter.children;

			var groups = this.props.filter.group(this.props.project.get('data').variable_groups);

			var areVariablesGrouped = groups.length > 1;

			return groups.map(function (group) {

				var groupName,
				    groupDescription,
				    varGroup = group.variable_group;

				if (_underscore2['default'].isObject(varGroup)) {
					groupName = varGroup.get('display_title') || varGroup.get('id');
					groupDescription = varGroup.get('long_description');
				} else {
					groupName = varGroup || 'Other variables';
					groupDescription = '';
				}

				return _react2['default'].createElement(
					'li',
					null,
					areVariablesGrouped ? _react2['default'].createElement(
						'p',
						{ className: 'title' },
						groupName
					) : null,
					areVariablesGrouped ? _react2['default'].createElement(
						'p',
						null,
						groupDescription
					) : null,
					_react2['default'].createElement(
						'ul',
						null,
						_this.renderKeys(group.filterKeys)
					)
				);
			});
		}

		/*
   * Render only three around the current active key.
   *
   */
	}, {
		key: 'renderKeys',
		value: function renderKeys(keys) {
			var _this2 = this;

			return keys.map(function (key, i) {
				return _react2['default'].createElement(FilterKey, { radio: _this2.props.radio, filterKey: key, key: i });
			});
		}
	}]);

	return OptionsTab;
})(_baseJsx2['default']);

var FilterKey = (function (_React$Component) {
	_inherits(FilterKey, _React$Component);

	function FilterKey() {
		_classCallCheck(this, FilterKey);

		_get(Object.getPrototypeOf(FilterKey.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(FilterKey, [{
		key: 'render',

		/*
   *
   *
   */
		value: function render() {
			var cls = (0, _classnames2['default'])({
				'button': 'true',
				'button--active': this.props.filterKey.isActive()
			});
			return _react2['default'].createElement(
				'li',
				{ className: cls, onClick: this.toggle.bind(this) },
				_react2['default'].createElement(
					'p',
					null,
					this.getContent()
				)
			);
		}

		/*
   *
   *
   */
	}, {
		key: 'getContent',
		value: function getContent() {
			return this.props.filterKey.get('variable').get('display_title');
		}

		/*
   *
   *
   */
	}, {
		key: 'toggle',
		value: function toggle() {
			var radio = this.props.radio;

			this.props.filterKey.clickToggle();
			radio.commands.execute('update:tilemap');
		}
	}]);

	return FilterKey;
})(_react2['default'].Component);

exports['default'] = OptionsTab;
module.exports = exports['default'];

},{"./../../../../../general/icons.jsx":21,"./base.jsx":45,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"classnames":167,"react":364}],54:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _baseJsx = require('./base.jsx');

var _baseJsx2 = _interopRequireDefault(_baseJsx);

var Popup = (function (_Base) {
	_inherits(Popup, _Base);

	function Popup() {
		_classCallCheck(this, Popup);

		_get(Object.getPrototypeOf(Popup.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(Popup, [{
		key: 'render',
		value: function render() {
			var style = this.getStyle();
			var hoveredItem = this.getHoveredItem();
			if (this.props.uiState.isMapDragged || !hoveredItem) {
				return null;
			}
			var cls = (0, _classnames2['default'])({
				'atl__popup': true,
				'atl__popup--clear-middle': hoveredItem.get('_itemType') === 'pin'
			});
			return _react2['default'].createElement(
				'div',
				{ className: cls, style: style },
				_react2['default'].createElement(
					'div',
					{ className: 'atl__popup__wrapper' },
					_react2['default'].createElement(
						'div',
						{ className: 'atl__popup__content' },
						_react2['default'].createElement(
							'div',
							{ id: 'atl__popup__content__logo', className: 'atl__popup__content__logo' },
							this.renderLogo()
						),
						_react2['default'].createElement(
							'div',
							{ className: 'atl__popup__content__text' },
							_react2['default'].createElement(
								'p',
								null,
								this.getName()
							),
							_react2['default'].createElement(
								'p',
								null,
								this.getValue()
							)
						)
					)
				)
			);
		}
	}, {
		key: 'renderLogo',
		value: function renderLogo() {
			return _react2['default'].createElement(
				'svg',
				{ className: 'hex-button', viewBox: '0 0 100 100' },
				_react2['default'].createElement(
					'g',
					{ className: 'hex-button__border' },
					_react2['default'].createElement('path', { d: 'M86.9,77.3L56,94.4c-3.3,1.9-8.7,1.9-12.1,0L13.1,77.3c-3.3-1.9-6-6.4-6-10.2V32.9c0-3.8,2.7-8.3,6-10.2L44,5.6c3.3-1.9,8.7-1.9,12.1,0l30.9,17.2c3.3,1.9,6,6.4,6,10.2v34.1C93,70.8,90.3,75.4,86.9,77.3' })
				),
				_react2['default'].createElement(
					'g',
					{ className: 'hex-button__down' },
					_react2['default'].createElement('path', { d: 'M61.6,47c1.7-1.7,4.5-1.7,6.2,0c1.7,1.7,1.7,4.5,0,6.2L53.5,67.6l0,0L53.1,68c-0.8,0.8-2,1.3-3.1,1.3c-1.2,0-2.3-0.5-3.1-1.3l-0.3-0.3l0,0L32.2,53.3c-1.7-1.7-1.7-4.5,0-6.2c1.7-1.7,4.5-1.7,6.2,0l7.2,7.2V35.1c0-1.2,0.5-2.3,1.3-3.1c0.8-0.8,1.9-1.3,3.1-1.3c1.2,0,2.3,0.5,3.1,1.3c0.8,0.8,1.3,1.9,1.3,3.1v19.1L61.6,47z' })
				)
			);
		}
	}, {
		key: 'getStyle',
		value: function getStyle() {
			var radio = this.props.radio;

			var hoveredItem, App, position;
			hoveredItem = this.getHoveredItem();
			if (hoveredItem == null) {
				return;
			}
			position = radio.reqres.request('item:map:position', hoveredItem);
			return {
				left: position.x,
				top: position.y,
				type: hoveredItem.get('_itemType')
			};
		}
	}]);

	return Popup;
})(_baseJsx2['default']);

exports['default'] = Popup;
module.exports = exports['default'];

},{"./base.jsx":45,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"classnames":167,"react":364}],55:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _generalIconsJsx = require('./../../../../../general/icons.jsx');

var _baseJsx = require('./base.jsx');

var _baseJsx2 = _interopRequireDefault(_baseJsx);

var Search = (function (_Base) {
	_inherits(Search, _Base);

	/*
  *
  *
  */

	function Search(props) {
		_classCallCheck(this, Search);

		_get(Object.getPrototypeOf(Search.prototype), 'constructor', this).call(this, props);
	}

	/*
  *
  *
  */

	_createClass(Search, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'div',
				{ className: 'atl__search' },
				_react2['default'].createElement(
					'a',
					{ href: '#', className: 'atl__search__close', onClick: this.close.bind(this) },
					_react2['default'].createElement(_generalIconsJsx.No, null)
				),
				_react2['default'].createElement(
					'form',
					{ onSubmit: this.close.bind(this) },
					_react2['default'].createElement('input', {
						type: 'text',
						placeholder: 'Search Project',
						autofocus: true,
						value: this.props.uiState.searchTerm,
						onChange: this.setSearchTerm.bind(this)
					})
				)
			);
		}

		/*
   *
   *
   */
	}, {
		key: 'setSearchTerm',
		value: function setSearchTerm(e) {
			this.props.setUiState({ searchTerm: e.target.value });
		}

		/*
   *
   *
   */
	}, {
		key: 'close',
		value: function close(e) {
			if (e) {
				e.preventDefault();
			}
			this.props.setUiState({ isSearchBarActive: false });
		}
	}]);

	return Search;
})(_baseJsx2['default']);

exports['default'] = Search;
module.exports = exports['default'];

},{"./../../../../../general/icons.jsx":21,"./base.jsx":45,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"classnames":167,"react":364}],56:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _headlineJsx = require('./headline.jsx');

var _headlineJsx2 = _interopRequireDefault(_headlineJsx);

var _display_toggleJsx = require('./display_toggle.jsx');

var _display_toggleJsx2 = _interopRequireDefault(_display_toggleJsx);

var _filterJsx = require('./filter.jsx');

var _filterJsx2 = _interopRequireDefault(_filterJsx);

var _baseJsx = require('./base.jsx');

var _baseJsx2 = _interopRequireDefault(_baseJsx);

var SettingsBar = (function (_Base) {
	_inherits(SettingsBar, _Base);

	function SettingsBar(props) {
		_classCallCheck(this, SettingsBar);

		_get(Object.getPrototypeOf(SettingsBar.prototype), 'constructor', this).call(this, props);
		this.state = {
			dummy: 'dummy'
		};
		this.heights = {
			window: 0,
			headline: 0,
			filter: 0,
			header: 80
		};
	}

	_createClass(SettingsBar, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'div',
				{ className: 'atl__settings-bar', ref: 'root' },
				_react2['default'].createElement(_headlineJsx2['default'], _extends({}, this.props, { cacheHeight: this.cacheHeight.bind(this, 'headline') })),
				_react2['default'].createElement(_filterJsx2['default'], _extends({}, this.props, { cacheHeight: this.cacheHeight.bind(this, 'filter'), filter: this.getFilter() }))
			);
		}
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {
			var _this = this;

			// make sure overflow is checked even after render lags
			setTimeout(this.checkOverflow.bind(this), 300);
			setTimeout(this.checkOverflow.bind(this), 600);
			setTimeout(this.checkOverflow.bind(this), 900);
			// namespace resize event for convenient removal
			$(window).on('resize.settings-bar-overflow', function () {
				_this.checkOverflow();
			});
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			// remove namespaced event
			$(window).off('resize.settings-bar-overflow');
		}

		// If content is overflowing, set global collapsed state.
	}, {
		key: 'checkOverflow',
		value: function checkOverflow() {
			var totalHeight, isCollapsed;
			this.heights.window = $(window).height();
			totalHeight = this.getTotalHeight();
			isCollapsed = totalHeight > this.heights.window;
			if (this.props.uiState.isCollapsedDueToOverflow !== isCollapsed) {
				this.props.setUiState({ isCollapsedDueToOverflow: isCollapsed });
			}
		}

		// Method passed to child components so they can log their heights on the current
		//   component's state. Current component can then check whether its contents are overflowing.
	}, {
		key: 'cacheHeight',
		value: function cacheHeight(elementName, height) {
			this.heights[elementName] = height;
		}
	}, {
		key: 'getTotalHeight',
		value: function getTotalHeight() {
			return this.heights.headline + this.heights.filter + this.heights.header;
		}
	}]);

	return SettingsBar;
})(_baseJsx2['default']);

exports['default'] = SettingsBar;
module.exports = exports['default'];

// <div className='atl__settings-bar__item-summary'>
// 	<p>{ this.getName() }</p>
// 	<p>{ this.getValue() }</p>
// </div>

},{"./base.jsx":45,"./display_toggle.jsx":46,"./filter.jsx":47,"./headline.jsx":48,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/extends":91,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"classnames":167,"react":364}],57:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _generalSliderJsx = require('./../../../../../general/slider.jsx');

var _generalSliderJsx2 = _interopRequireDefault(_generalSliderJsx);

var _generalIconsJsx = require('./../../../../../general/icons.jsx');

var _generalIconsJsx2 = _interopRequireDefault(_generalIconsJsx);

var _baseJsx = require('./base.jsx');

var _baseJsx2 = _interopRequireDefault(_baseJsx);

var TopBar = (function (_Base) {
	_inherits(TopBar, _Base);

	function TopBar(props) {
		_classCallCheck(this, TopBar);

		_get(Object.getPrototypeOf(TopBar.prototype), 'constructor', this).call(this, props);
	}

	_createClass(TopBar, [{
		key: 'render',
		value: function render() {
			var MoreIcon = _generalIconsJsx2['default'].More;
			return _react2['default'].createElement(
				'div',
				{ className: 'atl__top-bar' },
				_react2['default'].createElement(
					'div',
					{ className: this.getContentClassName() },
					false ? _react2['default'].createElement(TopBarIcons, this.props) : null,
					this.renderTimeline(),
					_react2['default'].createElement(
						'div',
						{ className: 'atl__top-bar__title' },
						_react2['default'].createElement(
							'div',
							null,
							_react2['default'].createElement(
								'p',
								null,
								this.props.project.get('title')
							)
						)
					),
					_react2['default'].createElement(
						'div',
						{ className: 'atl__top-bar__summary' },
						_react2['default'].createElement(
							'div',
							{ className: 'atl__top-bar__summary__item' },
							_react2['default'].createElement(
								'div',
								{ className: 'button button--active' },
								_react2['default'].createElement(
									'p',
									null,
									this.getKey()
								)
							),
							_react2['default'].createElement(
								'div',
								{ className: 'button', onClick: this.toggleOptionsTab.bind(this) },
								_react2['default'].createElement(MoreIcon, null)
							)
						)
					)
				)
			);
		}
	}, {
		key: 'toggleOptionsTab',
		value: function toggleOptionsTab() {
			this.props.setUiState({ isOptionsTabActive: !this.props.uiState.isOptionsTabActive });
		}
	}, {
		key: 'getContentClassName',
		value: function getContentClassName() {
			return (0, _classnames2['default'])({
				'atl__top-bar__content': true
			}, this.getBackgroundColorClass());
		}
	}, {
		key: 'renderTimeline',
		value: function renderTimeline() {
			return;
			return _react2['default'].createElement(
				'div',
				{ className: 'atl__top-bar__timeline' },
				_react2['default'].createElement(_generalSliderJsx2['default'], _extends({}, this.props, { values: ['2003', '2004', '2005', '2006'] }))
			);
		}
	}, {
		key: 'getBackgroundColorClass',
		value: function getBackgroundColorClass() {
			var hoveredItem, indeces, cls;
			indeces = this.props.project.getFriendlyIndeces();
			if (indeces == null || indeces.length === 0) {
				return 'bg-c-grey--light';
			}
			cls = 'bg-c-' + indeces[0];
			return cls;
		}
	}]);

	return TopBar;
})(_baseJsx2['default']);

var TopBarIcons = (function (_React$Component) {
	_inherits(TopBarIcons, _React$Component);

	function TopBarIcons() {
		_classCallCheck(this, TopBarIcons);

		_get(Object.getPrototypeOf(TopBarIcons.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(TopBarIcons, [{
		key: 'render',
		value: function render() {
			return _react2['default'].createElement(
				'div',
				{ className: 'atl__top-bar__icons' },
				_react2['default'].createElement(
					'ul',
					{ className: 'icons' },
					this.renderIcons()
				)
			);
		}
	}, {
		key: 'getIconData',
		value: function getIconData() {
			return [{
				id: 'map',
				reactIconName: 'UsMap'
			}, {
				id: 'info',
				reactIconName: 'Dictionary'
			}];
		}
	}, {
		key: 'renderIcons',
		value: function renderIcons() {
			var _this = this;

			return this.getIconData().map(function (icon, i) {
				return _react2['default'].createElement(TopBarIcon, _extends({}, _this.props, { icon: icon, key: i }));
			});
		}
	}]);

	return TopBarIcons;
})(_react2['default'].Component);

var TopBarIcon = (function (_React$Component2) {
	_inherits(TopBarIcon, _React$Component2);

	function TopBarIcon() {
		_classCallCheck(this, TopBarIcon);

		_get(Object.getPrototypeOf(TopBarIcon.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(TopBarIcon, [{
		key: 'render',
		value: function render() {
			var Icon = _generalIconsJsx2['default'][this.props.icon.reactIconName],
			    cls = (0, _classnames2['default'])({
				'icons__icon': true,
				'icons__icon--active': this.isActive()
			});
			return _react2['default'].createElement(
				'li',
				{ className: cls, onClick: this.changeGlobalItemsDisplayMode.bind(this) },
				_react2['default'].createElement(Icon, null)
			);
		}
	}, {
		key: 'changeGlobalItemsDisplayMode',
		value: function changeGlobalItemsDisplayMode() {
			this.props.setUiState({
				itemsDisplayMode: this.props.icon.id
			});
		}
	}, {
		key: 'isActive',
		value: function isActive() {
			return this.props.uiState.itemsDisplayMode === this.props.icon.id;
		}
	}]);

	return TopBarIcon;
})(_react2['default'].Component);

exports['default'] = TopBar;
module.exports = exports['default'];

},{"./../../../../../general/icons.jsx":21,"./../../../../../general/slider.jsx":26,"./base.jsx":45,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/extends":91,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"classnames":167,"react":364}],58:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _reactRouter = require('react-router');

var _generalLoadingJsx = require('./../../general/loading.jsx');

var _generalLoadingJsx2 = _interopRequireDefault(_generalLoadingJsx);

var _generalIconsJsx = require('./../../general/icons.jsx');

var _generalIconsJsx2 = _interopRequireDefault(_generalIconsJsx);

var imageSource = "/assets/images/iStock_000065438623_720.jpg";

var Welcome = (function (_React$Component) {
	_inherits(Welcome, _React$Component);

	function Welcome(props) {
		_classCallCheck(this, Welcome);

		_get(Object.getPrototypeOf(Welcome.prototype), 'constructor', this).call(this, props);
		this.state = {
			hasImageLoaded: false
		};
	}

	_createClass(Welcome, [{
		key: 'render',
		value: function render() {
			var GridIcon = _generalIconsJsx2['default'].Grid;
			if (!this.state.hasImageLoaded) {
				return _react2['default'].createElement(_generalLoadingJsx2['default'], null);
			}
			return _react2['default'].createElement(
				'div',
				{ className: 'welcome fill-parent', style: this.getRootVisibilityStyle() },
				_react2['default'].createElement('div', { className: 'welcome__background' }),
				_react2['default'].createElement('div', { className: 'welcome__terrain', style: this.getBackgroundImageStyle() }),
				_react2['default'].createElement(
					'div',
					{ className: 'welcome__title' },
					_react2['default'].createElement(
						'h1',
						{ className: 'welcome__title__name' },
						'ATLAS'
					),
					_react2['default'].createElement(
						'h1',
						{ className: 'welcome__title__alias c-2-0' },
						'=ANALYSIS'
					)
				),
				_react2['default'].createElement('div', { className: 'welcome__strip bg-c-2-0' }),
				_react2['default'].createElement(
					'div',
					{ className: 'welcome__subtitle' },
					"A policy analysis tool from New America's Education Program"
				),
				_react2['default'].createElement(
					'div',
					{ className: 'welcome__main-nav' },
					_react2['default'].createElement(
						_reactRouter.Link,
						{ to: '/menu' },
						_react2['default'].createElement(GridIcon, null)
					),
					_react2['default'].createElement(
						'p',
						{ className: 'center' },
						'View All Projects'
					)
				)
			);
		}
	}, {
		key: 'getBackgroundImageStyle',
		value: function getBackgroundImageStyle() {
			return { 'backgroundImage': 'url(\'' + imageSource + '\')' };
		}
	}, {
		key: 'getRootVisibilityStyle',
		value: function getRootVisibilityStyle() {
			if (this.state.hasImageLoaded === false) {
				return { display: 'none' };
			}
			return { display: 'block' };
		}
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {
			var _this = this;

			$('<img>').attr({ src: imageSource }).load(function () {
				_this.setState({ hasImageLoaded: true });
			});
			this.clearHeaderStripColoring();
		}
	}, {
		key: 'clearHeaderStripColoring',
		value: function clearHeaderStripColoring() {
			var radio = this.props.radio;

			radio.commands.execute('set:header:strip:color', {});
		}
	}]);

	return Welcome;
})(_react2['default'].Component);

Welcome.contextTypes = {
	router: _react2['default'].PropTypes.func
};

exports['default'] = Welcome;
module.exports = exports['default'];

},{"./../../general/icons.jsx":21,"./../../general/loading.jsx":22,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"classnames":167,"react":364,"react-router":195}],59:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _underscore = (window._);

var _underscore2 = _interopRequireDefault(_underscore);

exports['default'] = {

    _list: [[133, 2, 106], [138, 1, 135], [140, 2, 165], [129, 10, 166], [118, 18, 167], [106, 23, 167], [93, 43, 171], [79, 56, 173], [77, 72, 177], [73, 87, 182], [67, 102, 186], [58, 116, 191], [44, 130, 195], [11, 144, 199], [50, 161, 217]],

    _hash: {},

    get: function get(index) {
        return this._list[index];
    },

    interpolate: function interpolate(f) {
        var first, interpolated, last;
        first = this._list[0];
        last = this._list[this._list.length - 1];
        interpolated = [];
        interpolated.push(Math.round(first[0] * f + last[0] * (1 - f)));
        interpolated.push(Math.round(first[1] * f + last[1] * (1 - f)));
        interpolated.push(Math.round(first[2] * f + last[2] * (1 - f)));
        return "rgba(" + interpolated.join(',') + "," + 1. + ")";
    },

    interpolateRgb: function interpolateRgb(f) {
        var first, interpolated, last;
        first = this._list[0];
        last = this._list[this._list.length - 1];
        interpolated = [];
        interpolated.push(Math.round(first[0] * f + last[0] * (1 - f)));
        interpolated.push(Math.round(first[1] * f + last[1] * (1 - f)));
        interpolated.push(Math.round(first[2] * f + last[2] * (1 - f)));
        return "rgb(" + interpolated.join(',') + ")";
    },

    toRgba: function toRgba(index) {
        var opacity = arguments.length <= 1 || arguments[1] === undefined ? 1 : arguments[1];

        if (index != null && this.get(index)) {
            return 'rgba(' + this.get(index).join(',') + ', ' + opacity + ')';
        }
    },

    toRgb: function toRgb(index) {
        if (index != null && this.get(index)) {
            return 'rgb(' + this.get(index).join(',') + ')';
        }
    }

};
module.exports = exports['default'];

},{"babel-runtime/helpers/interop-require-default":94}],60:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports["default"] = {

    shapes: {
        pindrop_illustrator: {
            dim: {
                width: 612,
                height: 792
            },
            paths: {
                outer: "M306,14.8c145.2,0,262.2,117.9,262.2,262.2S449.4,569.2,306,788.3C160.8,570.1,43.8,421.4,43.8,277C43.8,131.8,160.8,14.8,306,14.8z",
                inner: "M306,175.8c-60.7,0-111.8,51.1-111.8,112.7S244.4,401.1,306,401.1S417.8,350,417.8,288.4S367.6,175.8,306,175.8z",
                slice_1_of_2: "M306,788.3C160.8,568.3,43.8,420.5,43.8,276.1C43.8,130.9,161.7,14.8,306,14.8v161c-60.7,0-111.8,50.2-111.8,111.8S244.4,401.1,306,401.1V788.3z",
                slice_2_of_2: "M306,401.1c60.7,0,111.8-50.2,111.8-111.8S367.6,175.8,306,175.8v-161c145.2,0,262.2,117.9,262.2,262.2S449.4,569.2,306,788.3V401.1z",
                slice_1_of_3: "M194.2,288.5c0-21.4,6.2-41.5,16.8-58.5V32.4C113,70.4,43.8,165.3,43.8,277c0,111,69.2,224.6,167.2,370.4V347.3C200.4,330.2,194.2,310.1,194.2,288.5z",
                slice_2_of_3_a: "M306,176.7c40,0,75.2,21.2,95,52.9v-197c-29.4-11.5-61.5-17.8-95-17.8s-65.6,6.3-95,17.6V230C230.9,198.1,266.4,176.7,306,176.7z",
                slice_2_of_3_b: "M306,400.2c-40,0-75.2-21.2-95-52.9v300.1c29.4,43.8,61.5,90.5,95,140.9c33.4-51,65.5-98.2,95-142.4V347.2C381.2,379,346,400.2,306,400.2z",
                slice_3_of_3: "M401,32.6v197c10.6,17.1,16.8,37.2,16.8,58.8s-6.2,41.7-16.8,58.8v298.7C498.3,500.5,568.2,387.7,568.2,277C568.2,166,499,70.7,401,32.6z"
            }
        },
        pindrop: {
            dim: {
                width: 30,
                height: 38.8235294117647
            },
            paths: {
                inner: "M15,8.618c-2.975,0-5.48,2.505-5.48,5.525S11.98,19.662,15,19.662S20.48,17.157,20.48,14.137S18.02,8.618,15,8.618z",
                outer: "M15,0.725c7.118,0,12.853,5.779,12.853,12.853S22.029,27.902,15,38.642C7.882,27.946,2.147,20.657,2.147,13.578C2.147,6.461,7.882,0.725,15,0.725z",
                slice_1_of_2: "M15,38.642C7.882,27.858,2.147,20.613,2.147,13.534C2.147,6.417,7.926,0.725,15,0.725v7.892c-2.975,0-5.48,2.461-5.48,5.48S11.98,19.662,15,19.662V38.642z",
                slice_1_of_3: "M9.52,14.142c0-1.049,0.304-2.034,0.824-2.868V1.588C5.539,3.451,2.147,8.103,2.147,13.578c0,5.441,3.392,11.01,8.196,18.157V17.025C9.824,16.186,9.52,15.201,9.52,14.142z",
                slice_2_of_2: "M15,19.662c2.975,0,5.48-2.461,5.48-5.48S18.02,8.618,15,8.618v-7.892c7.118,0,12.853,5.779,12.853,12.853S22.029,27.902,15,38.642V19.662z",
                slice_2_of_3_a: "M15,8.662c1.961,0,3.686,1.039,4.657,2.593v-9.657c-1.441-0.564-3.015-0.873-4.657-0.873s-3.216,0.309-4.657,0.863V11.275C11.319,9.711,13.059,8.662,15,8.662z",
                slice_2_of_3_b: "M15,19.618c-1.961,0-3.686-1.039-4.657-2.593v14.711c1.441,2.147,3.015,4.436,4.657,6.907c1.637-2.5,3.211-4.814,4.657-6.98V17.02C18.686,18.578,16.961,19.618,15,19.618z",
                slice_3_of_3: "M19.657,1.598v9.657c0.52,0.838,0.824,1.824,0.824,2.882s-0.304,2.044-0.824,2.882v14.642C24.426,24.534,27.853,19.005,27.853,13.578C27.853,8.137,24.461,3.466,19.657,1.598z"
            }
        },
        hex: {
            border: "M86.9,77.3L56,94.4c-3.3,1.9-8.7,1.9-12.1,0L13.1,77.3c-3.3-1.9-6-6.4-6-10.2V32.9c0-3.8,2.7-8.3,6-10.2L44,5.6c3.3-1.9,8.7-1.9,12.1,0l30.9,17.2c3.3,1.9,6,6.4,6,10.2v34.1C93,70.8,90.3,75.4,86.9,77.3",
            yes: "70.3,31.9 44.3,57.8 30.1,43.6 22.5,51.2 36.7,65.4 36.7,65.4 44.3,73 77.9,39.5",
            no: "72,35.8 64.4,28.2 50.2,42.4 35.9,28.2 28.3,35.8 42.6,50 28.3,64.2 35.9,71.8 50.2,57.6 64.4,71.8 72,64.2,57.8,50",
            down: "M61.6,47c1.7-1.7,4.5-1.7,6.2,0c1.7,1.7,1.7,4.5,0,6.2L53.5,67.6l0,0L53.1,68c-0.8,0.8-2,1.3-3.1,1.3c-1.2,0-2.3-0.5-3.1-1.3l-0.3-0.3l0,0L32.2,53.3c-1.7-1.7-1.7-4.5,0-6.2c1.7-1.7,4.5-1.7,6.2,0l7.2,7.2V35.1c0-1.2,0.5-2.3,1.3-3.1c0.8-0.8,1.9-1.3,3.1-1.3c1.2,0,2.3,0.5,3.1,1.3c0.8,0.8,1.3,1.9,1.3,3.1v19.1L61.6,47z",
            up: "M38.4,53c-1.7,1.7-4.5,1.7-6.2,0c-1.7-1.7-1.7-4.5,0-6.2l14.4-14.4l0,0l0.3-0.3c0.8-0.8,2-1.3,3.1-1.3c1.2,0,2.3,0.5,3.1,1.3l0.3,0.3l0,0l14.4,14.4c1.7,1.7,1.7,4.5,0,6.2c-1.7,1.7-4.5,1.7-6.2,0l-7.2-7.2v19.1c0,1.2-0.5,2.3-1.3,3.1c-0.8,0.8-1.9,1.3-3.1,1.3c-1.2,0-2.3-0.5-3.1-1.3c-0.8-0.8-1.3-1.9-1.3-3.1V45.8L38.4,53z",
            left: "M53,61.6c1.7,1.7,1.7,4.5,0,6.2c-1.7,1.7-4.5,1.7-6.2,0L32.4,53.5l0,0L32,53.1c-0.8-0.8-1.3-2-1.3-3.1c0-1.2,0.5-2.3,1.3-3.1l0.3-0.3l0,0l14.4-14.4c1.7-1.7,4.5-1.7,6.2,0c1.7,1.7,1.7,4.5,0,6.2l-7.2,7.2h19.1c1.2,0,2.3,0.5,3.1,1.3c0.8,0.8,1.3,1.9,1.3,3.1c0,1.2-0.5,2.3-1.3,3.1c-0.8,0.8-1.9,1.3-3.1,1.3H45.8L53,61.6z",
            right: "M47,38.4c-1.7-1.7-1.7-4.5,0-6.2c1.7-1.7,4.5-1.7,6.2,0l14.4,14.4l0,0l0.3,0.3c0.8,0.8,1.3,2,1.3,3.1c0,1.2-0.5,2.3-1.3,3.1l-0.3,0.3l0,0L53.3,67.8c-1.7,1.7-4.5,1.7-6.2,0c-1.7-1.7-1.7-4.5,0-6.2l7.2-7.2H35.1c-1.2,0-2.3-0.5-3.1-1.3c-0.8-0.8-1.3-1.9-1.3-3.1c0-1.2,0.5-2.3,1.3-3.1c0.8-0.8,1.9-1.3,3.1-1.3h19.1L47,38.4z"
        }
    }

};
module.exports = exports["default"];

},{}],61:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _backbone = (window.Backbone);

var Backbone = _interopRequireWildcard(_backbone);

var _underscore = (window._);

var _ = _interopRequireWildcard(_underscore);

var _jquery = (window.$);

var _jquery2 = _interopRequireDefault(_jquery);

var _marked = require('marked');

var _marked2 = _interopRequireDefault(_marked);

var _base_crudJs = require('./base_crud.js');

var _base_crudJs2 = _interopRequireDefault(_base_crudJs);

/*
 *
 *
 */

var Model = (function (_baseCrud$Model) {
	_inherits(Model, _baseCrud$Model);

	function Model() {
		_classCallCheck(this, Model);

		_get(Object.getPrototypeOf(Model.prototype), 'constructor', this).apply(this, arguments);
	}

	/*
  *
  *
  */

	_createClass(Model, [{
		key: 'getViewUrl',

		/*
   * Customize on subclass if route is non-standard or the resource has a custom plural name.
   * 
   */
		value: function getViewUrl() {
			var name = this.resourceName;
			return '/' + name + 's/' + this.get('id');
		}

		/*
   * Customize on subclass if route is non-standard or the resource has a custom plural name.
   * 
   */
	}, {
		key: 'getEditUrl',
		value: function getEditUrl() {
			var name = this.resourceName;
			return '/' + name + 's/' + this.get('id') + '/edit';
		}

		/*
   * Custom get function, accommodating a suffix, e.g. status_2012.
   * @param {string} field - Same as in Backbone.
   * @param {string} suffix - Custom suffix.
   * @returns {} value
   */
	}, {
		key: 'get',
		value: function get(field, suffix) {
			var getFnc = Backbone.Model.prototype.get;
			if (suffix == null) {
				return getFnc.apply(this, [field]);
			}
			return getFnc.apply(this, [field + '_' + suffix]);
		}

		/**
   * Adds fields of a foreign collection, referenced by a foreign id within the model.
   * @param {string} foreignIdKey - Foreign id key, of the format 'model_id' or 'model_ids'.
   *                                  the former references a single value, the latter an array.
   * @param {object} foreignCollection
   * @param {string} fieldKey - The field of the foreign model to be copied in, e.g. 'name'.
   * @returns {object} this - The model instance, with 'model_name' field added.
   */
	}, {
		key: 'addForeignField',
		value: function addForeignField(foreignIdKey, foreignCollection, fieldKey) {

			var newKey,
			    foreignModel,
			    foreignIds,
			    singleForeignIdKey,
			    // if foreignIdKey holds an array
			foreignFields = [];

			// belongs_to relationship with a single reference id
			if (foreignIdKey.slice(-2) === 'id') {

				newKey = foreignIdKey.slice(0, -2) + fieldKey;
				foreignModel = foreignCollection.findWhere({ id: this.get(foreignIdKey) });
				this.set(newKey, foreignModel.get(fieldKey));

				// has_many relationship with id references embedded in an array field
			} else if (foreignIdKey.slice(-3) === 'ids') {

					foreignIds = this.get(foreignIdKey);

					foreignIds.forEach(function (foreignId) {
						// simple pluralization
						newKey = foreignIdKey.slice(0, -3) + fieldKey + 's';
						foreignModel = foreignCollection.findWhere({ id: foreignId });
						if (foreignModel != null) {
							foreignFields.push(foreignModel.get(fieldKey));
						}
					});

					this.set(newKey, foreignFields);
				}

			return this;
		}

		/**
   * Finds and replaces key.
   * @param {object} data - Data as key-value pairs.
   * @param {string} standardKey
   * @param {array} keyFormatList - List of possible keys, e.g. [latitude, lat, Latitude] for latitude.
   * @returns {boolean} found - Whether the key is found in the data.
   */
	}, {
		key: 'findAndReplaceKey',
		value: function findAndReplaceKey(data, standardKey, keyFormatList) {
			var found, i, kf, len;
			found = false;
			if (keyFormatList == null) {
				keyFormatList = [standardKey];
			}
			for (i = 0, len = keyFormatList.length; i < len; i++) {
				kf = keyFormatList[i];
				if (data[kf]) {
					found = true;
					if (kf !== standardKey) {
						data[standardKey] = data[kf];
						delete data[kf];
					}
				}
			}
			return found;
		}

		/**
   * Get markdown html.
   * @param {string} key
   * @returns {} newHtml
   */
	}, {
		key: 'getMarkdownHtml',
		value: function getMarkdownHtml(key) {
			var $html, md, newHtml;
			md = this.get(key);
			if (md != null) {
				$html = (0, _jquery2['default'])((0, _marked2['default'])(md));
				$html.find('a').attr('target', '_blank');
				newHtml = (0, _jquery2['default'])('<div></div>').append($html.clone()).html();
				return newHtml;
			}
		}

		/**
   * Set table of contents for html data under a given key.
   * @param {string} key
   * @param {string} saveKey - Key under which the modified html snippet is placed.
   * @returns {object} this
   */
	}, {
		key: 'setHtmlToc',
		value: function setHtmlToc(key, saveKey) {

			var html, $containedHtml, arr;

			saveKey = saveKey || key;

			html = this.get(key);
			if (html == null) {
				return;
			}

			arr = [];

			$containedHtml = (0, _jquery2['default'])('<div></div>').append((0, _jquery2['default'])(html));

			$containedHtml.children().each(function () {

				var $el = (0, _jquery2['default'])(this),
				    tagName = $el.prop('tagName'),
				    content = $el.html(),
				    tocId = content.replace(/[^a-z0-9]/ig, ' ').replace(/\s+/g, '-').toLowerCase();

				if (tagName.toLowerCase == null) {
					return;
				}
				tagName = tagName.toLowerCase();

				if (['h1', 'h2'].indexOf(tagName) > -1) {
					(0, _jquery2['default'])('<span id="toc-' + tocId + '"></span>').insertBefore($el);
					arr.push({
						id: tocId,
						tagName: tagName,
						content: content
					});
				}
			});

			this.set(saveKey, $containedHtml.html());
			this.set(saveKey + '_toc', arr);
		}
	}, {
		key: 'resourceName',

		/*
   * Lower-case name of the resource constructed by this constructor.
   *
   */
		get: function get() {
			return 'resource';
		}
	}, {
		key: 'apiUrlRoot',
		get: function get() {
			var name = this.resourceName;
			return '/api/v1/' + name + 's';
		}
	}]);

	return Model;
})(_base_crudJs2['default'].Model);

var Collection = (function (_baseCrud$Collection) {
	_inherits(Collection, _baseCrud$Collection);

	function Collection() {
		_classCallCheck(this, Collection);

		_get(Object.getPrototypeOf(Collection.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(Collection, [{
		key: 'parse',

		/**
   * Recognize and process server response by applying the corresponding model's parse method.
   * @param {object} resp - Server response.
   * @returns {object} resp - Modified response.
   */
		value: function parse(resp) {
			var i, max, item;
			var model = new this.model(),
			    modelParseMethod = model.parse.bind(model);
			if (modelParseMethod == null) {
				return resp;
			}
			for (i = 0, max = resp.length; i < max; i += 1) {
				item = resp[i];
				resp[i] = modelParseMethod(item);
			}
			return resp;
		}
	}, {
		key: 'model',
		get: function get() {
			return Model;
		}
	}, {
		key: 'dbCollection',
		get: function get() {
			var name = this.model.prototype.resourceName;
			return name + 's';
		}
	}, {
		key: 'apiUrl',
		get: function get() {
			var name = this.model.prototype.resourceName;
			return '/api/v1/' + name + 's';
		}
	}]);

	return Collection;
})(_base_crudJs2['default'].Collection);

exports['default'] = {
	Model: Model,
	Collection: Collection
};
module.exports = exports['default'];

},{"./base_crud.js":63,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"babel-runtime/helpers/interop-require-wildcard":95,"marked":168}],62:[function(require,module,exports){
// Compiled from Marionette.Accountant

'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _backbone = (window.Backbone);

var _backbone2 = _interopRequireDefault(_backbone);

var _underscore = (window._);

var _underscore2 = _interopRequireDefault(_underscore);

var _jquery = (window.$);

var _jquery2 = _interopRequireDefault(_jquery);

/*
 *
 *
 */

var Model = (function (_Backbone$Model) {
    _inherits(Model, _Backbone$Model);

    function Model() {
        _classCallCheck(this, Model);

        _get(Object.getPrototypeOf(Model.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(Model, [{
        key: 'getChildrenKey',

        /*
         * Find key that holds array values within model.
         *
         */
        value: function getChildrenKey() {
            var key, ref, value;
            ref = this.attributes;
            for (key in ref) {
                value = ref[key];
                if (_underscore2['default'].isArray(value)) {
                    return key;
                }
            }
        }

        /*
         *
         *
         */
    }, {
        key: 'makeComposite',
        value: function makeComposite() {
            var _this = this;

            var ChildModel, childModel, childrenKey, results;

            childrenKey = this.getChildrenKey();

            this.children = this.children || [];

            ChildModel = _underscore2['default'].isFunction(this.model) ? this.model : _backbone2['default'].Model;

            if (childrenKey) {
                this.set('_childrenKey', childrenKey);
                var children = this.get(childrenKey);
                this.unset(childrenKey);
                results = [];
                children.forEach(function (child) {
                    var childModel = new ChildModel(child);
                    childModel.parent = _this;
                    // Call makeComposite recursively.
                    if (childModel.makeComposite) {
                        childModel.makeComposite();
                    }
                    _this.children.push(childModel);
                });
            }
        }

        /*
         *
         *
         */
    }, {
        key: 'getChildIndex',
        value: function getChildIndex() {
            if (this.parent) {
                return this.parent.children.indexOf(this);
            }
            return -1;
        }

        /*
         *
         *
         */
    }, {
        key: 'getSiblingCount',
        value: function getSiblingCount() {
            if (this.parent) {
                return this.parent.children.length;
            }
            return -1;
        }

        /*
         *
         *
         */
    }, {
        key: 'getNextSibling',
        value: function getNextSibling() {
            var ci, sc;
            ci = this.getChildIndex();
            sc = this.getSiblingCount();
            if (ci !== -1 && sc !== -1 && ci < sc) {
                return this.parent.children[ci + 1];
            }
        }

        /*
         *
         *
         */
    }, {
        key: 'getPreviousSibling',
        value: function getPreviousSibling() {
            var ci, sc;
            ci = this.getChildIndex();
            sc = this.getSiblingCount();
            if (ci !== -1 && sc !== -1 && ci > 0) {
                return this.parent.children[ci - 1];
            }
        }
    }]);

    return Model;
})(_backbone2['default'].Model);

exports['default'] = {
    Model: Model
};
module.exports = exports['default'];

},{"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94}],63:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _backbone = (window.Backbone);

var Backbone = _interopRequireWildcard(_backbone);

var _underscore = (window._);

var _ = _interopRequireWildcard(_underscore);

var _jquery = (window.$);

var _jquery2 = _interopRequireDefault(_jquery);

/*
 *
 *
 */

var Model = (function (_Backbone$Model) {
	_inherits(Model, _Backbone$Model);

	function Model() {
		_classCallCheck(this, Model);

		_get(Object.getPrototypeOf(Model.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(Model, [{
		key: 'getClientFetchPromise',

		/*
   * Returns a fetch promise. Project ID must be set for this to work.
   *
   */
		value: function getClientFetchPromise() {
			var _this = this;

			return new _Promise(function (resolve, reject) {

				var url = _this.apiUrlRoot + '/' + _this.get('id');

				_jquery2['default'].ajax({
					url: url,
					type: 'get',
					success: function success(datum) {
						_this.set(datum);
						resolve(_this);
					},
					error: function error(err) {
						reject(err);
					}
				});
			});
		}

		/*
   * Returns save promise.
   *
   */
	}, {
		key: 'getClientSavePromise',
		value: function getClientSavePromise() {
			var _this2 = this;

			return new _Promise(function (resolve, reject) {

				var url = _this2.apiUrlRoot + '/new';

				_jquery2['default'].ajax({
					url: url,
					type: 'post',
					dataType: 'text',
					data: { jsonString: JSON.stringify(_this2.toJSON()) },
					success: function success(datum) {
						resolve(datum);
					},
					error: function error(err) {
						reject(err);
					}
				});
			});
		}

		/*
   * Returns update promise.
   *
   */
	}, {
		key: 'getClientUpdatePromise',
		value: function getClientUpdatePromise() {
			var _this3 = this;

			return new _Promise(function (resolve, reject) {

				var url = _this3.apiUrlRoot + '/' + _this3.get('id') + '/edit';

				_jquery2['default'].ajax({
					url: url,
					type: 'post',
					dataType: 'text',
					data: { jsonString: JSON.stringify(_this3.toJSON()) },
					success: function success(datum) {
						resolve(datum);
					},
					error: function error(err) {
						reject(err);
					}
				});
			});
		}

		/*
   * Returns delete promise.
   *
   */
	}, {
		key: 'getClientDeletePromise',
		value: function getClientDeletePromise() {
			var _this4 = this;

			return new _Promise(function (resolve, reject) {

				var url = _this4.apiUrlRoot + '/' + _this4.get('id');

				_jquery2['default'].ajax({
					url: url,
					type: 'delete',
					success: function success(datum) {
						resolve(datum);
					},
					error: function error(err) {
						reject(err);
					}
				});
			});
		}
	}]);

	return Model;
})(Backbone.Model);

var Collection = (function (_Backbone$Collection) {
	_inherits(Collection, _Backbone$Collection);

	function Collection() {
		_classCallCheck(this, Collection);

		_get(Object.getPrototypeOf(Collection.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(Collection, [{
		key: 'buildQueryString',

		/*
   *
   *
   */
		value: function buildQueryString(query) {

			var queryString = '';

			if (query == null || _Object$keys(query).length === 0) {
				return null;
			}

			for (var key in query) {
				var value = query[key];
				queryString += key + '=' + value + '&';
			}

			return queryString.slice(0, -1);
		}

		/*
   *
   *
   */
	}, {
		key: 'buildFieldString',
		value: function buildFieldString(fields) {

			var fieldString = 'fields=';

			if (fields == null || _Object$keys(fields).length === 0) {
				return null;
			}

			for (var key in fields) {
				var value = fields[key];
				fieldString += '' + (value === 1 ? '' : '-') + key + ',';
			}

			return fieldString.slice(0, -1);
		}

		/*
   * Fetch instances on the client.
   *
   */
	}, {
		key: 'getClientFetchPromise',
		value: function getClientFetchPromise(query, fields) {
			var _this5 = this;

			var isCompleteQuery = query != null && fields == null;

			var queryString = '?' + (this.buildQueryString(query) || '') + '&' + (this.buildFieldString(fields) || '');

			return new _Promise(function (resolve, reject) {

				if (!isCompleteQuery) {

					// Small, seeded collections are resolved immediately.
					if (_this5.dbSeed) {
						_this5.reset(_this5.dbSeed);
						return resolve(_this5);
					}

					// Cached collections are resolved immediately.
					if (_this5.dbCache) {
						_this5.reset(_this5.dbCache);
						return resolve(_this5);
					}
				}

				var url = _this5.apiUrl + queryString;

				_jquery2['default'].ajax({
					url: url,
					type: 'get',
					success: function success(data) {
						// Set database cache.
						if (!isCompleteQuery) {
							_this5.dbCache = data;
						}
						_this5.reset(data);
						resolve(_this5);
					},
					error: function error(err) {
						reject(err);
					}
				});
			});
		}
	}, {
		key: 'model',
		get: function get() {
			return Model;
		}
	}]);

	return Collection;
})(Backbone.Collection);

exports['default'] = {
	Model: Model,
	Collection: Collection
};
module.exports = exports['default'];

},{"babel-runtime/core-js/object/keys":86,"babel-runtime/core-js/promise":88,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"babel-runtime/helpers/interop-require-wildcard":95}],64:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _underscore = (window._);

var _underscore2 = _interopRequireDefault(_underscore);

var _baseJs = require('./base.js');

var _baseJs2 = _interopRequireDefault(_baseJs);

/*
 *
 *
 */

var Model = (function (_base$Model) {
	_inherits(Model, _base$Model);

	function Model() {
		_classCallCheck(this, Model);

		_get(Object.getPrototypeOf(Model.prototype), 'constructor', this).apply(this, arguments);
	}

	/*
  *
  *
  */

	_createClass(Model, [{
		key: 'activate',

		/** Activates model. Takes no collection filter logic into consideration - hence internal only. */
		value: function activate() {
			return this.set('_isActive', true);
		}

		/** Deactivates model. Takes no collection filter logic into consideration - hence internal only. */
	}, {
		key: 'deactivate',
		value: function deactivate() {
			return this.set('_isActive', false);
		}

		/** Toggle the model's active state. */
	}, {
		key: 'toggleActiveState',
		value: function toggleActiveState() {
			if (this.isActive()) {
				if (!(this.collection != null && this.collection.hasSingleActiveChild)) {
					return this.deactivate();
				}
			} else {
				this.activate();
				if (this.collection != null && this.collection.hasSingleActiveChild) {
					return this.collection.deactivateSiblings(this);
				}
			}
		}

		/** Get active state. */
	}, {
		key: 'isActive',
		value: function isActive() {
			return this.get('_isActive');
		}

		/** 
   * Tests whether a tested model satisfies a belongs_to relation with the model instance under a specified foreign key. 
   * Example: this.get('id') === testedModel.get('user_id') if the foreign key is 'user'.
   * @param {object} testedModel
   * @param {string} foreignKey
   * @returns {boolean}
   */
	}, {
		key: 'test',
		value: function test(testedModel, foreignKey) {
			var foreignId, foreignIds, id;
			if (!this.isActive()) {
				return false;
			}
			id = this.get('id');
			// If there is a single id, test for equality.
			foreignId = testedModel.get(foreignKey + '_id');
			if (foreignId != null) {
				return id === foreignId;
			}
			// If there are multiple ids, test for inclusion.
			foreignIds = testedModel.get(foreignKey + '_ids');
			if (foreignIds != null) {
				return foreignIds.indexOf(id) >= 0;
			}
			return false;
		}
	}]);

	return Model;
})(_baseJs2['default'].Model);

var Collection = (function (_base$Collection) {
	_inherits(Collection, _base$Collection);

	function Collection() {
		_classCallCheck(this, Collection);

		_get(Object.getPrototypeOf(Collection.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(Collection, [{
		key: 'initialize',

		/** Initializes active state of the collection's models. */
		value: function initialize() {
			if (this.initializeActiveStatesOnReset) {
				return this.on('reset', this.initializeActiveStates);
			}
		}

		/**
   * Deactivate all siblings of an active child element.
   * @param {} activeChild - Active child model instance from where the method is usually called
   * @returns {array} results
   */
	}, {
		key: 'deactivateSiblings',
		value: function deactivateSiblings(activeChild) {
			var i, len, model, ref, results;
			ref = this.models;
			results = [];
			for (i = 0, len = ref.length; i < len; i++) {
				model = ref[i];
				if (model !== activeChild) {
					results.push(model.deactivate());
				} else {
					results.push(void 0);
				}
			}
			return results;
		}

		/** 
   * Set and initialize active state of the collection's models. 
   * If the hasSingleActiveChild is set to true on the collection instance, the first model is set as active and all others are set as inactive.
   * Otherwise, all models are set as active. 
   */
	}, {
		key: 'initializeActiveStates',
		value: function initializeActiveStates() {
			var i, index, len, model, ref;
			ref = this.models;
			for (index = i = 0, len = ref.length; i < len; index = ++i) {
				model = ref[index];
				model.set('_isActive', !this.hasSingleActiveChild ? true : index === 0 ? true : false);
			}
			return this.trigger('initialize:active:states');
		}

		/**
   * 
   * @param {object} testedModel - 
   * @param {string} foreignKey - 
   * @returns {boolean}
   */
	}, {
		key: 'test',
		value: function test(testedModel, foreignKey) {
			var i, len, model, ref;
			ref = this.models;
			for (i = 0, len = ref.length; i < len; i++) {
				model = ref[i];
				if (model.test(testedModel, foreignKey)) {
					return true;
				}
			}
			return false;
		}
	}, {
		key: 'model',
		get: function get() {
			return exports.Model;
		}
	}, {
		key: 'hasSingleActiveChild',
		get: function get() {
			return false;
		}
	}]);

	return Collection;
})(_baseJs2['default'].Collection);

exports['default'] = {
	Model: Model,
	Collection: Collection
};
module.exports = exports['default'];

},{"./base.js":61,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94}],65:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _underscore = (window._);

var _underscore2 = _interopRequireDefault(_underscore);

var _baseJs = require('./base.js');

var _baseJs2 = _interopRequireDefault(_baseJs);

var _utilitiesFormattersJs = require('./../utilities/formatters.js');

var _utilitiesFormattersJs2 = _interopRequireDefault(_utilitiesFormattersJs);

var _base_compositeJs = require('./base_composite.js');

var _base_compositeJs2 = _interopRequireDefault(_base_compositeJs);

/*
 *
 *
 */

var LocalBaseModel = (function (_baseComposite$Model) {
    _inherits(LocalBaseModel, _baseComposite$Model);

    function LocalBaseModel() {
        _classCallCheck(this, LocalBaseModel);

        _get(Object.getPrototypeOf(LocalBaseModel.prototype), 'constructor', this).apply(this, arguments);
    }

    /*
     *
     *
     */

    _createClass(LocalBaseModel, [{
        key: 'isActive',
        value: function isActive() {
            return this.get('_isActive');
        }
    }, {
        key: 'activate',
        value: function activate() {
            this.set('_isActive', true);
            return this;
        }
    }, {
        key: 'deactivate',
        value: function deactivate() {
            this.set('_isActive', false);
            return this;
        }
    }, {
        key: 'toggle',
        value: function toggle() {
            this.set('_isActive', !this.isActive());
            return this;
        }
    }, {
        key: 'activateAllChildren',
        value: function activateAllChildren() {
            this.children.forEach(function (child) {
                child.activate();
            });
            return this;
        }
    }, {
        key: 'deactivateAllChildren',
        value: function deactivateAllChildren() {
            this.children.forEach(function (child) {
                child.deactivate();
            });
            return this;
        }
    }, {
        key: 'toggleAllChildren',
        value: function toggleAllChildren() {
            this.children.forEach(function (child) {
                child.toggle();
            });
            return this;
        }

        /*
         * Deactivate all siblings, not including self.
         *
         */
    }, {
        key: 'deactivateSiblings',
        value: function deactivateSiblings() {
            var self = this,
                siblingsIncludingSelf;
            if (this.parent == null) {
                return;
            }
            siblingsIncludingSelf = this.parent.children;
            siblingsIncludingSelf.forEach(function (sibling) {
                if (sibling !== self) {
                    sibling.deactivate();
                }
            });
        }

        /*
         * Get sibling index.
         *
         */
    }, {
        key: 'getSiblingIndex',
        value: function getSiblingIndex() {
            var siblingsIncludingSelf = this.parent.children;
            return siblingsIncludingSelf.indexOf(this);
        }

        /* 
         * If every sibling in order got integer indeces between 1 and n, interpolate for instance.
         * @param {number} n - Top friendly integer.
         * @returns {number}
         */
    }, {
        key: 'getFriendlySiblingIndex',
        value: function getFriendlySiblingIndex(n) {
            var i = this.getSiblingIndex(),
                max = this.getSiblingCountIncludingSelf();
            if (max === 1) {
                return 1;
            }
            return Math.round(i * (n - 1) / (max - 1) + 1);
        }
    }, {
        key: 'getSiblingCountIncludingSelf',
        value: function getSiblingCountIncludingSelf() {
            return this.parent.children.length;
        }
    }]);

    return LocalBaseModel;
})(_base_compositeJs2['default'].Model);

var FilterValue = (function (_LocalBaseModel) {
    _inherits(FilterValue, _LocalBaseModel);

    function FilterValue() {
        _classCallCheck(this, FilterValue);

        _get(Object.getPrototypeOf(FilterValue.prototype), 'constructor', this).apply(this, arguments);
    }

    /*
     *
     *
     */

    _createClass(FilterValue, [{
        key: 'test',
        value: function test(d, options) {
            var j, key, len, res, val, value;
            if (d == null) {
                return false;
            }
            if (!this.get('_isActive') && !(options != null && options.ignoreState)) {
                return false;
            }
            res = false;
            key = this.parent.get('variable').get('id');
            value = d[key];
            if (!_underscore2['default'].isArray(value)) {
                value = [value];
            }
            for (j = 0, len = value.length; j < len; j++) {
                val = value[j];
                res = res || this.testValue(val);
            }
            return res;
        }
    }, {
        key: 'testValue',
        value: function testValue(value) {
            var res;
            res = false;
            if (this._isNumericFilter()) {
                if (value < this.get('max') && value >= this.get('min')) {
                    res = true;
                }
            } else {
                if (value === this.get('value')) {
                    res = true;
                }
            }
            return res;
        }
    }, {
        key: '_isNumericFilter',
        value: function _isNumericFilter() {
            return this.get('min') != null && this.get('max') != null;
        }
    }, {
        key: 'isParentActive',
        value: function isParentActive() {
            return this.parent === this.parent.parent.getActiveChild();
        }
    }, {
        key: 'handleClick',
        value: function handleClick() {
            var activeKeyIndex, keyIndex;
            this.toggle();
            keyIndex = this.parent.get('_index');
            return activeKeyIndex = this.parent.parent.get('activeIndex');
        }
    }]);

    return FilterValue;
})(LocalBaseModel);

var FilterKey = (function (_LocalBaseModel2) {
    _inherits(FilterKey, _LocalBaseModel2);

    function FilterKey() {
        _classCallCheck(this, FilterKey);

        _get(Object.getPrototypeOf(FilterKey.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(FilterKey, [{
        key: 'clickToggle',

        /*
         * Toggle item as it were 'clicked on'. 
         * If the value is being activated, all its siblings need to be deactivated.
         *
         */
        value: function clickToggle() {
            if (this.isActive()) {
                return;
            } else {
                this.deactivateSiblings();
                this.activate();
            }
        }

        /*
         * When deactivating, activate all children back.
         *
         */
    }, {
        key: 'deactivate',
        value: function deactivate() {
            this.set('_isActive', false);
            this.children.forEach(function (childModel) {
                childModel.activate();
            });
            return this;
        }

        /*
         *
         *
         */
    }, {
        key: 'getValueIndeces',
        value: function getValueIndeces(model) {
            var child, data, dataIndeces, i, j, len, ref;
            data = model != null && _underscore2['default'].isFunction(model.toJSON) ? model.toJSON() : model;
            dataIndeces = [];
            ref = this.children;
            for (i = j = 0, len = ref.length; j < len; i = ++j) {
                child = ref[i];
                if (child.test(data)) {
                    dataIndeces.push(i);
                }
            }
            return dataIndeces;
        }

        /*
         *
         *
         */
    }, {
        key: 'getValue',
        value: function getValue(index) {
            return this.children[index].get('value');
        }

        /*
         *
         *
         */
    }, {
        key: 'test',
        value: function test(data, options) {
            var child, result;
            result = false;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = _getIterator(this.children), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var _child = _step.value;

                    if (_child.test(data, options)) {
                        result = true;
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator['return']) {
                        _iterator['return']();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return result;
        }
    }, {
        key: 'model',
        get: function get() {
            return FilterValue;
        }
    }]);

    return FilterKey;
})(LocalBaseModel);

var FilterTree = (function (_LocalBaseModel3) {
    _inherits(FilterTree, _LocalBaseModel3);

    function FilterTree() {
        _classCallCheck(this, FilterTree);

        _get(Object.getPrototypeOf(FilterTree.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(FilterTree, [{
        key: 'test',

        /*
         *
         *
         */
        value: function test(data) {
            return this.getActiveChild().test(data);
        }

        /*
         * Returns an array of children around the active child. Used to display a short list of filter keys.
         * E.g. if the active child is the third and countOnEitherSide = 1, return [ second, third, fourth ]
         */
    }, {
        key: 'getActiveChildNeighborhood',
        value: function getActiveChildNeighborhood(countOnEitherSide) {
            var keys = this.children,
                activeKey = this.getActiveChild(),
                keysLength = keys.length,
                activeKeyIndex = keys.indexOf(activeKey),
                neighborhoodLength = 2 * countOnEitherSide + 1;

            if (neighborhoodLength > keysLength) {
                return keys;
            }

            if (activeKeyIndex - countOnEitherSide < 0) {
                return keys.slice(0, neighborhoodLength);
            }
            if (activeKeyIndex + countOnEitherSide > keysLength - 1) {
                return keys.slice(keysLength - neighborhoodLength);
            }
            return keys.slice(activeKeyIndex - countOnEitherSide, activeKeyIndex + countOnEitherSide + 1);
        }

        /*
         * Return active child.
         *
         */
    }, {
        key: 'getActiveChild',
        value: function getActiveChild() {
            var child, j, len, ref;
            ref = this.children;
            for (j = 0, len = ref.length; j < len; j++) {
                child = ref[j];
                if (child.isActive()) {
                    return child;
                }
            }
        }

        /*
         * Get 
         *
         */
    }, {
        key: 'getMatchingValue',
        value: function getMatchingValue(model) {
            var ind;
            ind = this.getValueIndeces(model)[0];
            if (this.getActiveChild().children[ind] == null) {
                return;
            }
            return this.getActiveChild().children[ind].get('value');
        }

        /*
         *
         *
         */
    }, {
        key: 'getValueCountOnActiveKey',
        value: function getValueCountOnActiveKey() {
            var activeChild = this.getActiveChild();
            if (!activeChild) {
                return 0;
            }
            return activeChild.children.length;
        }

        /*
         *
         *
         */
    }, {
        key: 'getValueIndeces',
        value: function getValueIndeces(model) {
            var ach;
            ach = this.getActiveChild();
            if (!ach) {
                return [];
            }
            return ach.getValueIndeces(model);
        }

        /*
         * Get 'friendly', integer-formatted key and value indeces, used for coloring.
         *
         */
    }, {
        key: 'getFriendlyIndeces',
        value: function getFriendlyIndeces(model, scaleMax) {
            var maxIndex, valueIndeces;
            valueIndeces = this.getValueIndeces(model);
            maxIndex = this.getValueCountOnActiveKey();
            if (maxIndex === 1) {
                return [1];
            }
            return valueIndeces.map(function (valIndex) {
                return Math.round(valIndex * (scaleMax - 1) / (maxIndex - 1) + 1);
            });
        }

        /*
         * Group filter keys by variable group model instances or group name strings.
         * Supports old group_name syntax.
         */
    }, {
        key: 'group',
        value: function group(variableGroupCollection) {

            var grpObj = _underscore2['default'].groupBy(this.children, function (child) {
                var vari = child.get('variable');
                return vari.get('variable_group_id') || vari.get('group_name');
            });

            return _Object$keys(grpObj).map(function (groupId) {

                var variable_group;

                // If the group is found, return group instance. Otherwise, return groupId as string.
                if (variableGroupCollection) {
                    variable_group = variableGroupCollection.findWhere({ id: groupId }) || groupId;
                } else {
                    variable_group = groupId;
                }

                return {
                    variable_group: variable_group,
                    filterKeys: grpObj[groupId]
                };
            });
        }
    }, {
        key: 'model',

        /*
         *
         *
         */

        get: function get() {
            return FilterKey;
        }
    }]);

    return FilterTree;
})(LocalBaseModel);

exports['default'] = {
    FilterValue: FilterValue,
    FilterKey: FilterKey,
    FilterTree: FilterTree
};
module.exports = exports['default'];

},{"./../utilities/formatters.js":76,"./base.js":61,"./base_composite.js":62,"babel-runtime/core-js/get-iterator":81,"babel-runtime/core-js/object/keys":86,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94}],66:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _baseJs = require('./base.js');

var _baseJs2 = _interopRequireDefault(_baseJs);

var _marked = require('marked');

var _marked2 = _interopRequireDefault(_marked);

var Model = (function (_base$Model) {
	_inherits(Model, _base$Model);

	function Model() {
		_classCallCheck(this, Model);

		_get(Object.getPrototypeOf(Model.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(Model, [{
		key: 'getEditUrl',
		value: function getEditUrl() {
			return '/images/' + this.get('id') + '/edit';
		}
	}, {
		key: 'getViewUrl',
		value: function getViewUrl() {
			return '/';
		}

		/** Gets encoded url to use as a CSS background-image. */
	}, {
		key: 'getUrl',
		value: function getUrl() {
			var encoded;
			encoded = this.get('encoded');
			encoded = encoded.replace(/(\r\n|\n|\r)/gm, '');
			if (encoded != null) {
				return "url('data:image/png;base64," + encoded + "')";
			}
		}

		/** Gets html attribute. */
	}, {
		key: 'getAttributionHtml',
		value: function getAttributionHtml() {
			return (0, _marked2['default'])(this.get('credit'));
		}
	}, {
		key: 'resourceName',
		get: function get() {
			return 'image';
		}
	}, {
		key: 'defaults',
		get: function get() {

			return {
				name: 'image',
				encoded: '',
				credit: ''
			};
		}
	}, {
		key: 'fields',
		get: function get() {

			return [{
				id: 'name',
				formComponentName: 'Text',
				formComponentProps: {
					id: 'name',
					labelText: 'Image Name',
					hint: 'Enter simple image name - no need to add a .jpg extension.',
					placeholder: 'Enter Image Name'
				}
			}, {
				id: 'encoded',
				formComponentName: 'ImageFile',
				formComponentProps: {
					id: 'encoded',
					labelText: 'Image File',
					hint: 'Size limit: 3MB.'
				}
			}, {
				id: 'credit',
				formComponentName: 'Text',
				formComponentProps: {
					id: 'credit',
					labelText: 'Image Credit',
					hint: "Single URL or Markdown, e.g. '[Shutterstock](http://www.shutterstock.com/imageurl)'",
					placeholder: 'Image Credit'
				}
			}];
		}
	}]);

	return Model;
})(_baseJs2['default'].Model);

var Collection = (function (_base$Collection) {
	_inherits(Collection, _base$Collection);

	function Collection() {
		_classCallCheck(this, Collection);

		_get(Object.getPrototypeOf(Collection.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(Collection, [{
		key: 'model',
		get: function get() {
			return Model;
		}
	}]);

	return Collection;
})(_baseJs2['default'].Collection);

exports['default'] = {
	Model: Model,
	Collection: Collection
};
module.exports = exports['default'];

},{"./base.js":61,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"marked":168}],67:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});
var _ = (window._),
    Backbone = (window.Backbone),
    base = require('./base.js'),
    rgf = require('./rich_geo_feature.js'),
    states = require('./../../db/seeds/states.json');

var indexOf = [].indexOf || function (item) {
	for (var i = 0, l = this.length; i < l; i++) {
		if (i in this && this[i] === item) return i;
	}
	return -1;
};

/** 
 * @constructor
 * Note on methods toLatLongPoint, toRichGeoJson: these methods assume that the model instance has a lat and long fields. 
 */

var Model = (function (_base$Model) {
	_inherits(Model, _base$Model);

	function Model() {
		_classCallCheck(this, Model);

		_get(Object.getPrototypeOf(Model.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(Model, [{
		key: 'parse',

		/** 
   * Recognize and process data.
   * @param {object} data
   * @returns {object} data - Modified data.
   */
		value: function parse(data) {

			// Protect for uppercase Name typo.
			if (data.Name && !data.name) {
				data.name = data.Name;
				delete data.Name;
			}

			this._processValues(data);
			this._checkPin(data);
			this._checkUsState(data);
			this._checkUsCongressionalDistrict(data);

			return data;
		}

		/** 
   * Splits up values separated by '|' and removes leading and trailing whitespaces.
   * Values are not split if there is a return character (assume text).
   * Values are converted into arrays only if there is a '|' character.
   * @param {object} data - Data object with key-value pairs.
   * @returns {object} data - Modified data.
   */
	}, {
		key: '_processValues',
		value: function _processValues(data) {
			var key, value;
			for (key in data) {
				value = data[key];
				if (_.isString(value)) {
					if (value.indexOf("|") > -1 && value.indexOf("\n") === -1) {
						data[key] = _.map(value.split('|'), function (item) {
							return item.trim();
						});
					} else {
						data[key] = value.trim();
					}
				}
			}
			return data;
		}

		/** 
   * Recognizes, validates and returns a pindrop item.
   * @param {object} data
   * @returns {object} - Validation summary object.
   */
	}, {
		key: '_checkPin',
		value: function _checkPin(data) {
			var foundLat, foundLong;
			foundLat = this.findAndReplaceKey(data, 'lat', ['latitude', 'Latitude', 'lat', 'Lat']);
			foundLong = this.findAndReplaceKey(data, 'long', ['longitude', 'Longitude', 'long', 'Long']);
			if (foundLat && foundLong) {
				data._itemType = 'pin';
			}
			return data;
		}

		/** 
   * Recognizes, validates and returns a US state.
   * @param {object} data
   * @returns {object} - Validation summary object.
   */
	}, {
		key: '_checkUsState',
		value: function _checkUsState(data) {
			var stateData;
			if (data.name != null) {
				stateData = _.where(states, {
					name: data.name
				});
				if (stateData != null && stateData.length > 0) {
					data.id = stateData[0].id;
					data.code = stateData[0].code;
					data._itemType = 'us_state';
				}
			}
			return data;
		}
	}, {
		key: '_checkUsCongressionalDistrict',
		value: function _checkUsCongressionalDistrict(data) {
			if (data.cngdstcd != null) {
				data.id = data.cngdstcd;
				data._itemType = 'us_congressional_district';
			}
			return data;
		}

		/** 
   * Get and format image name.
   * @returns {string} name - Lower-cased name without line breaks.
   */
	}, {
		key: 'getImageName',
		value: function getImageName() {
			if (this.get('image') != null) {
				return this.get('image');
			}
			return this.get('name').replace(/(\r\n|\n|\r)/gm, "").toLowerCase();
		}

		/** 
   * Sets latitude and longitude as a simple array.
   * @returns {array} - Spatial data point as simple array [Lat, Long].
   */
	}, {
		key: 'toLatLongPoint',
		value: function toLatLongPoint() {
			var lat, long;
			lat = this.get('lat');
			long = this.get('long');
			if (lat == null) {
				lat = -37.8602828;
			}
			if (long == null) {
				long = 145.0796161;
			}
			return [lat, long];
		}

		/** 
   * Reverses [Lat, Long] point and sets longitude and latitude as a simple array.
   * @returns {array} - Spatial data point as simple array [Long, Lat].
   */
	}, {
		key: 'toLongLatPoint',
		value: function toLongLatPoint() {
			return this.toLatLongPoint().reverse();
		}

		/**
   * Creates geoJson object from current model.
   * @returns {object} geoJson.
   */
	}, {
		key: 'toRichGeoJsonFeature',
		value: function toRichGeoJsonFeature() {
			var geoJson;
			geoJson = {
				type: 'Feature',
				_model: this,
				geometry: {
					type: 'Point',
					coordinates: this.toLongLatPoint()
				}
			};
			return geoJson;
		}

		/**
   * Returns display state.
   * @param {}
   * @returns {string} displayState - Element of [ 'neutral', 'highlighted', 'inactive' ]
   */
	}, {
		key: 'getDisplayState',
		value: function getDisplayState(filter, searchTerm) {

			var filterIndeces, valueHoverIndex, isFiltered;

			if (!this.matchesSearchTerm(searchTerm)) {
				return 'inactive';
			}

			filterIndeces = filter.getValueIndeces(this);
			valueHoverIndex = filter.state.valueHoverIndex;

			isFiltered = filterIndeces.length > 0;

			if (!isFiltered) {
				return 'inactive';
			}

			if (filterIndeces.indexOf(valueHoverIndex) > -1) {
				return 'highlighted';
			}

			return;
		}

		/** 
   * Evaluates whether the name attribute matches a search term.
   * @param {string} searchTerm
   * @returns {boolean} - Match result.
   */
	}, {
		key: 'matchesSearchTerm',
		value: function matchesSearchTerm(searchTerm) {
			var name;
			name = this.get('name');
			if (!searchTerm || searchTerm === "") {
				return true;
			}
			if (!name) {
				return false;
			}
			name = name.toLowerCase();
			searchTerm = searchTerm.toLowerCase();
			if (name === "") {
				return false;
			}
			if (name.indexOf(searchTerm) === -1) {
				return false;
			}
			return true;
		}
	}]);

	return Model;
})(base.Model);

var Collection = (function (_base$Collection) {
	_inherits(Collection, _base$Collection);

	function Collection() {
		_classCallCheck(this, Collection);

		_get(Object.getPrototypeOf(Collection.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(Collection, [{
		key: 'getItemType',

		/** 
   * Gets item type first model in a collection.
   * @returns {string} itemType
   */
		value: function getItemType() {
			var itemType;
			itemType = this.models[0].get('_itemType');
			return itemType;
		}

		/** 
   * Set active model under collection active field.
   * @param {} activeModel - Active model or its id.
   * @returns {object} this
   */
	}, {
		key: 'setActive',
		value: function setActive(activeModel) {
			var id;
			if (_.isObject(activeModel) && this.models.indexOf(activeModel) >= 0) {
				this.active = activeModel;
			} else {
				id = parseInt(activeModel, 10);
				this.active = id === -1 ? void 0 : this.findWhere({
					id: id
				});
			}
			return this;
		}

		/** 
   * Set hovered model under collection hovered field.
   * @param {} hoveredModel - Hovered model or its id.
   * @returns {object} this
   */
	}, {
		key: 'setHovered',
		value: function setHovered(hoveredModel) {
			var id;
			if (_.isObject(hoveredModel) && this.models.indexOf(hoveredModel) >= 0) {
				this.hovered = hoveredModel;
			} else {
				id = parseInt(hoveredModel, 10);
				this.hovered = id === -1 ? undefined : this.findWhere({
					id: id
				});
			}
			return this;
		}

		/** 
   * Gets lists of values for a given key.
   * @param {string|object} key|variable - Key or variable model instance.
   * @returns {array} valueList - List of values for specified key.
   */
	}, {
		key: 'getValueList',
		value: function getValueList(variable) {
			var key = variable.get('id'),
			    valueList = [];

			this.models.forEach(function (model) {
				var value = model.get(key);
				if (_.isArray(value)) {
					value.forEach(function (val) {
						if (valueList.indexOf(val) < 0) {
							valueList.push(val);
						}
					});
				} else {
					if (valueList.indexOf(value) < 0) {
						valueList.push(value);
					}
				}
			});

			// Sort value list if there is a value_order array set on the variable.
			if (variable && variable.get('value_order')) {
				(function () {
					var valueOrderArray = variable.get('value_order').split('|').map(function (s) {
						return s.trim();
					});
					valueList = valueList.sort(function (val_1, val_2) {
						var index_1 = valueOrderArray.indexOf(val_1);
						var index_2 = valueOrderArray.indexOf(val_2);
						// If the value is not present in the value_order array, place it at the end of the list.
						if (index_1 < 0) {
							index_1 = 1000;
						}
						if (index_2 < 0) {
							index_2 = 1000;
						}
						return index_1 - index_2;
					});
				})();
			}

			return valueList;
		}

		/** 
   * Assumes the model has a latitude and longitude fields.
   * Must first go through parse method to make sure these fields are named correctly.
   * @returns {array} array of arrays - Latitude and longitude bounds, two arrays with two elements each.
   */
	}, {
		key: 'getLatLongBounds',
		value: function getLatLongBounds() {
			var j, lat, len, long, maxLat, maxLong, minLat, minLong, model, ref;
			ref = this.models;
			for (j = 0, len = ref.length; j < len; j++) {
				model = ref[j];
				lat = model.get('lat');
				long = model.get('long');
				if (typeof minLat === "undefined" || minLat === null || minLat > lat) {
					minLat = lat;
				}
				if (typeof maxLat === "undefined" || maxLat === null || maxLat < lat) {
					maxLat = lat;
				}
				if (typeof minLong === "undefined" || minLong === null || minLong > long) {
					minLong = long;
				}
				if (typeof maxLong === "undefined" || maxLong === null || maxLong < long) {
					maxLong = long;
				}
			}
			return [[minLat, minLong], [maxLat, maxLong]];
		}

		/** 
   * Creates single array from lat, long arrays of each model into one array (array of arrays).
   * @returns {array} res - Returns array of arrays. E.g. [[lat, long], [lat, long]]
   */
	}, {
		key: 'toLatLongMultiPoint',
		value: function toLatLongMultiPoint() {
			var j, len, model, ref, res;
			res = [];
			ref = this.models;
			for (j = 0, len = ref.length; j < len; j++) {
				model = ref[j];
				res.push(model.toLatLongPoint());
			}
			return res;
		}
	}, {
		key: 'getRichGeoJson',

		/** 
   * The feature is either ready to use or triggers a sync event on itself once it is.
   * @returns {} - Generic Rich GeoJson feature.
   */
		value: function getRichGeoJson(baseGeoData) {
			var type;
			type = this.getItemType();
			return this.richGeoJsonBuilders[type](this, baseGeoData);
		}
	}, {
		key: 'model',
		get: function get() {
			return Model;
		}
	}, {
		key: 'richGeoJsonBuilders',
		get: function get() {

			return {

				base: function base(collection, baseGeoData, getFeatureId) {

					var data, richGeoJson, setup;
					richGeoJson = new rgf.Collection();

					setup = function (data) {
						var feature, item, j, len, ref;
						richGeoJson.features = baseGeoData.features;
						ref = richGeoJson.features;
						for (j = 0, len = ref.length; j < len; j++) {
							feature = ref[j];
							var featureId = getFeatureId(feature);
							item = collection.findWhere({
								id: featureId
							});
							feature._model = item;
						}
						return richGeoJson.trigger('sync');
					};

					setup(baseGeoData);
					return richGeoJson;
				},

				us_state: function us_state(collection, baseGeoData) {
					return this.base(collection, baseGeoData, function (feature) {
						return parseInt(feature.properties.id);
					});
				},

				us_congressional_district: function us_congressional_district(collection, baseGeoData) {
					return this.base(collection, baseGeoData, function (feature) {
						var props = feature.properties;
						return parseInt('' + parseInt(props.state_id, 10) + props.id, 10);
					});
				},

				pin: function pin(collection) {
					var item, j, len, ref, richGeoJson;
					richGeoJson = new rgf.Collection();
					ref = collection.models;
					for (j = 0, len = ref.length; j < len; j++) {
						item = ref[j];
						richGeoJson.features.push(item.toRichGeoJsonFeature());
					}
					richGeoJson.trigger('sync');
					return richGeoJson;
				}

			};
		}
	}]);

	return Collection;
})(base.Collection);

exports['default'] = {
	Model: Model,
	Collection: Collection
};
module.exports = exports['default'];

},{"./../../db/seeds/states.json":80,"./base.js":61,"./rich_geo_feature.js":71,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93}],68:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _underscore = (window._);

var _underscore2 = _interopRequireDefault(_underscore);

var _utilitiesFormattersJs = require('./../utilities/formatters.js');

var _utilitiesFormattersJs2 = _interopRequireDefault(_utilitiesFormattersJs);

var _baseJs = require('./base.js');

var _baseJs2 = _interopRequireDefault(_baseJs);

var _project_sectionJs = require('./project_section.js');

var _project_sectionJs2 = _interopRequireDefault(_project_sectionJs);

var _project_templateJs = require('./project_template.js');

var _project_templateJs2 = _interopRequireDefault(_project_templateJs);

var _filterJs = require('./filter.js');

var _filterJs2 = _interopRequireDefault(_filterJs);

var _variableJs = require('./variable.js');

var _variableJs2 = _interopRequireDefault(_variableJs);

var _variable_groupJs = require('./variable_group.js');

var _variable_groupJs2 = _interopRequireDefault(_variable_groupJs);

var _itemJs = require('./item.js');

var _itemJs2 = _interopRequireDefault(_itemJs);

var Model = (function (_base$Model) {
    _inherits(Model, _base$Model);

    function Model() {
        _classCallCheck(this, Model);

        _get(Object.getPrototypeOf(Model.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(Model, [{
        key: 'getViewUrl',

        /*
         *
         *
         */
        value: function getViewUrl() {
            return '/' + this.get('atlas_url');
        }

        /** 
         * Conversts model object to json
         * Checks if it has mandatory fields (id and more than one key). 
         * returns {boolean} - Whether madatory fields exist
         */
    }, {
        key: 'exists',
        value: function exists() {
            var keyCount = _Object$keys(this.toJSON()).length;
            return keyCount > 1;
        }

        /*
         * Returns image url.
         *
         */
    }, {
        key: 'getImageUrl',
        value: function getImageUrl() {
            var encodedImage = this.get('encoded_image');
            if (encodedImage == null) {
                return;
            }
            encodedImage = encodedImage.replace(/(\r\n|\n|\r)/gm, '');
            if (encodedImage.indexOf('base64') > -1) {
                return "url(" + encodedImage + ")";
            }
            return "url('data:image/png;base64," + encodedImage + "')";
        }

        /** 
         * Filters a project by two filterable collections that it belongs to.
         * @param {object} projectSections
         * @param {object} projectTemplates
         * @returns {boolean} filter - Whether both project sections and templates are in filter variable.
         */
    }, {
        key: 'compositeFilter',
        value: function compositeFilter(projectSections, projectTemplates) {
            var filter, sectionsFilter, templatesFilter;
            sectionsFilter = this.filter(projectSections, 'project_section');
            templatesFilter = this.filter(projectTemplates, 'project_template');
            filter = sectionsFilter && templatesFilter;
            return filter;
        }

        /*
         * Custom query method to find related projects based on tags.
         * @param {string} project - Project Id.
         * @returns {boolean} - Related status.
         */
    }, {
        key: 'isRelatedTo',
        value: function isRelatedTo(project) {
            var prj, tags0, tags1, i, max;
            // Project is not related to itself, it is itself :).
            if (this === project) {
                return false;
            }
            tags0 = this.get('tags');
            tags1 = project.get('tags');
            if (tags0 === '' || tags1 === '') {
                return false;
            }
            tags0 = tags0.split(',');
            tags1 = tags1.split(',');
            for (i = 0, max = tags0.length; i < max; i += 1) {
                if (tags1.indexOf(tags0[i]) > -1) {
                    return true;
                }
            }
            return false;
        }

        /**
         * Filter collection by its foreign key.
         * @param {object} collection
         * @param {string} foreignKey
         * @returns {boolean}
         */
    }, {
        key: 'filter',
        value: function filter(collection, foreignKey) {
            if (collection != null && collection.test != null) {
                return collection.test(this, foreignKey);
            }
            return true;
        }

        /** Get imgage attribution html. */
    }, {
        key: 'getImageAttributionHtml',
        value: function getImageAttributionHtml() {
            return this.getMarkdownHtml('image_credit');
        }

        // Process entry spreadsheet data.
    }, {
        key: 'beforeSave',
        value: function beforeSave() {

            var varModel = new _variableJs2['default'].Model(),
                varGroupModel = new _variable_groupJs2['default'].Model(),
                data = this.get('data');

            function parseDataField(data, fieldName, parserModel) {
                if (data[fieldName]) {
                    var fieldValues = data[fieldName];
                    fieldValues = fieldValues.map(function (fieldValue) {
                        return parserModel.parse(fieldValue);
                    });
                    data[fieldName] = fieldValues;
                }
            }

            if (data) {

                parseDataField(data, 'variables', varModel);
                parseDataField(data, 'variable_groups', varGroupModel);

                // if (data.variables) {
                //     let variables = this.get('data').variables;
                //     variables = variables.map((variable) => {
                //         return varModel.parse(variable);
                //     });
                //     this.get('data').variables = variables;
                // }

                // if (data.variable_groups) {
                //     let variable_groups = this.get('data').variable_groups;
                //     variable_groups = variable_groups.map((variable) => {
                //         return varGroupModel.parse(variable);
                //     });
                //     this.get('data').variable_groups = variable_groups;
                // }

                if (data.data) {
                    data.items = data.data;
                    delete data.data;
                }
            }
        }

        /** If there is a data field, convert to appropriate collections. */
    }, {
        key: 'buildData',
        value: function buildData() {
            var data;
            data = this.get('data');
            if (data != null) {
                data.variables = new _variableJs2['default'].Collection(data.variables);
                data.variable_groups = new _variable_groupJs2['default'].Collection(data.variable_groups);
                data.items = new _itemJs2['default'].Collection(data.items, { parse: true });
                this.buildFilterTree();
                console.log(this);
            }
        }

        /*
         * Build filter tree by taking each variable the display items are filtered by, and finding every possible value for each variable.
         * E.g. if the items are filtered by marital status and preferred pet, the return value of this method is schematically represented as follows:
         * { "marital_status": [ "single", "married", "divourced five times" ], "preferred_pet": [ "hamster", "comodo dragon", "lama" ] } 
         */
    }, {
        key: 'buildFilterTree',
        value: function buildFilterTree() {

            var filterTree,
                filterVariables,
                data = this.get('data'),
                items = data.items,
                variables = data.variables;

            filterVariables = variables.getFilterVariables().map(function (variable, index) {

                var formatter, nd, o, variable;

                if (variable.get('format') != null) {
                    formatter = _utilitiesFormattersJs2['default'][variable.get('format')];
                }

                o = {
                    variable: variable,
                    variable_id: variable.get('id'),
                    _isActive: index === 0 ? true : false
                };

                nd = variable.get('numerical_filter_dividers');

                if (nd != null) {
                    o.values = variable.getNumericalFilter(formatter);
                } else {
                    o.values = _underscore2['default'].map(items.getValueList(variable), function (item) {
                        if (formatter != null) {
                            item = formatter(item);
                        }
                        return {
                            value: item
                        };
                    });
                }

                _underscore2['default'].map(o.values, function (val) {
                    val._isActive = true;
                    return val;
                });

                return o;
            });

            filterTree = {
                variables: filterVariables
            };

            data.filter = new _filterJs2['default'].FilterTree(filterTree);
            data.filter.makeComposite();

            data.filter.state = {};
        }

        /**
         * Prepares model on the client.
         * @param {object} App - Marionette application instance. 
         */
    }, {
        key: 'prepOnClient',
        value: function prepOnClient() {
            this.buildData();
            this.setHtmlToc('body_text');
            this.embedForeignModelNames();
        }
    }, {
        key: 'embedForeignModelNames',
        value: function embedForeignModelNames() {
            var templates = new _project_templateJs2['default'].Collection(),
                sections = new _project_sectionJs2['default'].Collection();

            this.addForeignField('project_template_id', templates, 'name');
            this.addForeignField('project_section_ids', sections, 'name');

            return this;
        }

        /*
         * Return an integer friendly index value for the current hovered or active item.
         * Used in coloring.
         */
    }, {
        key: 'getFriendlyIndeces',
        value: function getFriendlyIndeces() {
            var items = this.get('data').items,
                filter = this.get('data').filter,
                item = items.hovered || items.active;
            return filter.getFriendlyIndeces(item, 15);
        }
    }, {
        key: 'resourceName',
        get: function get() {
            return 'project';
        }
    }, {
        key: 'defaults',
        get: function get() {
            return {
                'title': 'New Project',
                'author': '',
                'tags': '',
                'is_section_overview': 'No',
                'is_live': 'No',
                'project_template_id': '0',
                'project_section_ids': ['1'],
                'atlas_url': ''
            };
        }

        // Form fields.
    }, {
        key: 'fields',
        get: function get() {
            return [{
                id: 'title',
                formComponentName: 'Text',
                formComponentProps: {
                    id: 'title',
                    labelText: 'Project Title',
                    hint: '',
                    placeholder: 'Enter Project Title'
                }
            }, {
                id: 'atlas_url',
                formComponentName: 'Text',
                formComponentProps: {
                    id: 'atlas_url',
                    labelText: 'Atlas Url',
                    hint: 'The Url the project will live under, such as atlas.newamerica.org/my-pretty-url',
                    placeholder: 'Enter Atlas Url'
                }
            }, {
                id: 'author',
                formComponentName: 'Text',
                formComponentProps: {
                    id: 'author',
                    labelText: 'Author',
                    hint: '',
                    placeholder: 'Enter Author'
                }
            }, {
                id: 'short_description',
                formComponentName: 'Text',
                formComponentProps: {
                    id: 'short_description',
                    labelText: 'Short description',
                    hint: '',
                    placeholder: 'Enter Short Description'
                }
            }, {
                id: 'is_section_overview',
                formComponentName: 'Radio',
                formComponentProps: {
                    id: 'is_section_overview',
                    labelText: 'Is section overview.',
                    hint: 'Each section has one overview project - check if this is one of them:',
                    options: ['Yes', 'No'],
                    defaultOption: 'Yes'
                }
            }, {
                id: 'is_live',
                formComponentName: 'Radio',
                formComponentProps: {
                    id: 'is_live',
                    labelText: 'Is live.',
                    hint: 'Please specify whether this project is viewable on the live site. Changes take effect immediately.',
                    options: ['Yes', 'No'],
                    defaultOption: 'Yes'
                }
            }, {
                id: 'project_section_ids',
                name: 'Project Sections',
                formComponentName: 'ForeignCollectionCheckBox',
                formComponentProps: {
                    id: 'project_section_ids',
                    foreignCollection: new _project_sectionJs2['default'].Collection(),
                    labelText: 'Project Sections',
                    hint: ''
                }
            }, {
                id: 'project_template_id',
                formComponentName: 'ForeignCollectionRadio',
                formComponentProps: {
                    id: 'project_template_id',
                    foreignCollection: new _project_templateJs2['default'].Collection(),
                    labelText: 'Project Template',
                    hint: 'The template will determine the way your project is visualized - select from below:'
                },
                foreignModelName: 'ProjectTemplate'
            }, {
                id: 'tags',
                formComponentName: 'SelectizeText',
                formComponentProps: {
                    id: 'tags',
                    labelText: 'Tags',
                    hint: 'Enter tags separated by commas:'
                }
            }, {
                id: 'body_text',
                formComponentName: 'CKEditor',
                formComponentProps: {
                    id: 'body_text',
                    labelText: 'Body Text'
                }
            }, {
                id: 'data',
                formComponentName: 'SpreadsheetFile',
                formComponentProps: {
                    id: 'data',
                    labelText: 'Data file',
                    hint: '',
                    worksheets: ['data', 'variables', 'variable groups']
                }
            }, {
                id: 'encoded_image',
                formComponentName: 'ImageFile',
                formComponentProps: {
                    id: 'encoded_image',
                    labelText: 'Image File',
                    hint: 'Size limit: 3MB.'
                }
            }, {
                id: 'image_credit',
                formComponentName: 'Text',
                formComponentProps: {
                    id: 'image_credit',
                    labelText: 'Image Credit',
                    hint: "Single URL or Markdown, e.g. '[Shutterstock](http://www.shutterstock.com/imageurl)'",
                    placeholder: 'Image Credit'
                }
            }];
        }

        /** API queries that need to be handled custom. For every key, there is a this.is_#{key} method that filters a model. */
    }, {
        key: 'customQueryKeys',
        get: function get() {
            return ['related_to'];
        }
    }]);

    return Model;
})(_baseJs2['default'].Model);

var Collection = (function (_base$Collection) {
    _inherits(Collection, _base$Collection);

    function Collection() {
        _classCallCheck(this, Collection);

        _get(Object.getPrototypeOf(Collection.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(Collection, [{
        key: 'comparator',

        /**
         * Used to compare two models when sorting.
         * @param {object} model1
         * @param {object} model2
         * @returns {number} comparator - A comparator whose sign determines the sorting order.
         */
        value: function comparator(model1, model2) {
            var i1, i2;
            i1 = model1.get('is_section_overview') === 'Yes' ? 10 : 0;
            i2 = model2.get('is_section_overview') === 'Yes' ? 10 : 0;
            if (model1.get('title') < model2.get('title')) {
                i1 += 1;
            } else {
                i2 += 1;
            }
            return i2 - i1;
        }

        /** 
         * Filter all children by project sections and templates.
         * @param {collection} projectSections
         * @param {collection} projectTemplates
         * @returns {object} this
         */
    }, {
        key: 'filter',
        value: function filter(projectSections, projectTemplates) {
            var i, len, model, ref;
            if (projectSections.models == null || projectSections.models.length === 0) {
                return;
            }
            if (projectTemplates.models == null || projectTemplates.models.length === 0) {
                return;
            }
            if (this.models.length === 0) {
                return;
            }
            ref = this.models;
            for (i = 0, len = ref.length; i < len; i++) {
                model = ref[i];
                model.compositeFilter(projectSections, projectTemplates);
            }
            return this;
        }

        /**
         * Recognize and process server response.
         * @param {object} resp - Server response.
         * @returns {object} resp - Modified response.
         */
    }, {
        key: 'parse',
        value: function parse(resp) {
            var i, max, item;
            if (exports.Model.prototype.parse == null) {
                return resp;
            }
            for (i = 0, max = resp.length; i < max; i += 1) {
                item = resp[i];
                resp[i] = exports.Model.prototype.parse(item);
            }
            return resp;
        }

        /*
         * API query filter.
         *
         */
    }, {
        key: 'related_to',
        value: function related_to(id) {

            var referenceModel, resp;

            if (id == null) {
                return this.toJSON();
            }

            referenceModel = this.findWhere({ id: id });

            if (referenceModel == null) {
                return [];
            }

            resp = [];

            this.each(function (model) {
                if (model.isRelatedTo(referenceModel)) {
                    resp.push(model.toJSON());
                }
            });

            return resp;
        }
    }, {
        key: 'model',
        get: function get() {
            return Model;
        }
    }]);

    return Collection;
})(_baseJs2['default'].Collection);

exports['default'] = {
    Model: Model,
    Collection: Collection
};
module.exports = exports['default'];

},{"./../utilities/formatters.js":76,"./base.js":61,"./filter.js":65,"./item.js":67,"./project_section.js":69,"./project_template.js":70,"./variable.js":73,"./variable_group.js":74,"babel-runtime/core-js/object/keys":86,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94}],69:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _backbone = (window.Backbone);

var _backbone2 = _interopRequireDefault(_backbone);

var _underscore = (window._);

var _underscore2 = _interopRequireDefault(_underscore);

var _base_filter = require('./base_filter');

var _base_filter2 = _interopRequireDefault(_base_filter);

var _dbSeedsProject_sectionsJson = require('./../../db/seeds/project_sections.json');

var _dbSeedsProject_sectionsJson2 = _interopRequireDefault(_dbSeedsProject_sectionsJson);

var Model = (function (_baseFilter$Model) {
	_inherits(Model, _baseFilter$Model);

	function Model() {
		_classCallCheck(this, Model);

		_get(Object.getPrototypeOf(Model.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(Model, [{
		key: 'resourceName',
		get: function get() {
			return 'project_section';
		}
	}]);

	return Model;
})(_base_filter2['default'].Model);

var Collection = (function (_baseFilter$Collection) {
	_inherits(Collection, _baseFilter$Collection);

	function Collection() {
		_classCallCheck(this, Collection);

		_get(Object.getPrototypeOf(Collection.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(Collection, [{
		key: 'initialize',
		value: function initialize() {
			this.reset(_dbSeedsProject_sectionsJson2['default']);
		}
	}, {
		key: 'dbSeed',
		get: function get() {
			return _dbSeedsProject_sectionsJson2['default'];
		}
	}, {
		key: 'model',
		get: function get() {
			return Model;
		}
	}, {
		key: 'hasSingleActiveChild',
		get: function get() {
			return false;
		}
	}, {
		key: 'initializeActiveStatesOnReset',
		get: function get() {
			return true;
		}
	}]);

	return Collection;
})(_base_filter2['default'].Collection);

exports['default'] = {
	Model: Model,
	Collection: Collection
};
module.exports = exports['default'];

},{"./../../db/seeds/project_sections.json":77,"./base_filter":64,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94}],70:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _backbone = (window.Backbone);

var _backbone2 = _interopRequireDefault(_backbone);

var _underscore = (window._);

var _underscore2 = _interopRequireDefault(_underscore);

var _base_filter = require('./base_filter');

var _base_filter2 = _interopRequireDefault(_base_filter);

var _dbSeedsProject_templatesJson = require('./../../db/seeds/project_templates.json');

var _dbSeedsProject_templatesJson2 = _interopRequireDefault(_dbSeedsProject_templatesJson);

var Model = (function (_baseFilter$Model) {
	_inherits(Model, _baseFilter$Model);

	function Model() {
		_classCallCheck(this, Model);

		_get(Object.getPrototypeOf(Model.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(Model, [{
		key: 'apiUrlRoot',
		get: function get() {
			return '/api/v1/project_templates';
		}
	}]);

	return Model;
})(_base_filter2['default'].Model);

var Collection = (function (_baseFilter$Collection) {
	_inherits(Collection, _baseFilter$Collection);

	function Collection() {
		_classCallCheck(this, Collection);

		_get(Object.getPrototypeOf(Collection.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(Collection, [{
		key: 'initialize',
		value: function initialize() {
			this.reset(_dbSeedsProject_templatesJson2['default']);
		}
	}, {
		key: 'dbSeed',
		get: function get() {
			return _dbSeedsProject_templatesJson2['default'];
		}
	}, {
		key: 'model',
		get: function get() {
			return Model;
		}
	}, {
		key: 'hasSingleActiveChild',
		get: function get() {
			return true;
		}
	}, {
		key: 'initializeActiveStatesOnReset',
		get: function get() {
			return true;
		}
	}, {
		key: 'comparator',
		get: function get() {
			return 'order';
		}
	}]);

	return Collection;
})(_base_filter2['default'].Collection);

exports['default'] = {
	Model: Model,
	Collection: Collection
};
module.exports = exports['default'];

},{"./../../db/seeds/project_templates.json":78,"./base_filter":64,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94}],71:[function(require,module,exports){
'use strict';

var _ = (window._),
    Backbone = (window.Backbone);

exports.Model = Backbone.Model.extend({});

exports.Collection = Backbone.Collection.extend({

	model: exports.Model,

	/*
     *
     *
     */
	initialize: function initialize() {
		_.extend(this, Backbone.Events);
		this.type = 'FeatureCollection';
		return this.features = [];
	},

	/*
  *
  *
  */
	onReady: function onReady(next) {
		if (this.features.length > 0) {
			next();
			return;
		}
		return this.on('sync', next);
	}

});

},{}],72:[function(require,module,exports){
// Model used to handle geo shape files, from download and geojson conversion to fetching once the app is running.

'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _underscore = (window._);

var _underscore2 = _interopRequireDefault(_underscore);

var _baseJs = require('./base.js');

var _baseJs2 = _interopRequireDefault(_baseJs);

var _dbSeedsShape_filesJson = require('./../../db/seeds/shape_files.json');

var _dbSeedsShape_filesJson2 = _interopRequireDefault(_dbSeedsShape_filesJson);

var _jquery = (window.$);

var _jquery2 = _interopRequireDefault(_jquery);

var _topojson = require('topojson');

var _topojson2 = _interopRequireDefault(_topojson);

var Model = (function (_base$Model) {
	_inherits(Model, _base$Model);

	function Model() {
		_classCallCheck(this, Model);

		_get(Object.getPrototypeOf(Model.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(Model, [{
		key: 'getGeoJsonFetchPromise',

		/*
   * Return promise resolved when GeoJson file is fetched and assembled from TopoJson.
   *
   */
		value: function getGeoJsonFetchPromise() {
			var _this = this;

			// Store cache for geoJson data on the constructor.
			Model.geoJsonCache = Model.geoJsonCache || {};

			return new _Promise(function (resolve, reject) {

				var name = _this.get('name'),
				    url = '/data/' + name + '.json';

				// Resolve immediately if found on cache.
				if (Model.geoJsonCache[name]) {
					return resolve(Model.geoJsonCache[name]);
				}

				_jquery2['default'].ajax({
					type: 'get',
					url: url,
					success: function success(data) {
						var geoJson = _topojson2['default'].feature(data, data.objects[_this.get('fileName')]);
						// Set on cache.
						Model.geoJsonCache[name] = geoJson;
						return resolve(geoJson);
					},
					error: function error(err) {
						return reject(err);
					}
				});
			});
		}

		/*
   * Used by topojson converter through gulp.
   *
   */
	}, {
		key: 'getRenameParam',
		value: function getRenameParam() {
			var props = this.get('properties');
			return _Object$keys(props).map(function (key) {
				var value = props[key];
				return key + '=' + value;
			}).join(',');
		}
	}]);

	return Model;
})(_baseJs2['default'].Model);

var Collection = (function (_base$Collection) {
	_inherits(Collection, _base$Collection);

	function Collection() {
		_classCallCheck(this, Collection);

		_get(Object.getPrototypeOf(Collection.prototype), 'constructor', this).apply(this, arguments);
	}

	_createClass(Collection, [{
		key: 'initialize',
		value: function initialize() {
			this.reset(_dbSeedsShape_filesJson2['default']);
		}
	}, {
		key: 'model',
		get: function get() {
			return Model;
		}
	}]);

	return Collection;
})(_baseJs2['default'].Collection);

exports['default'] = {
	Model: Model,
	Collection: Collection
};
module.exports = exports['default'];

},{"./../../db/seeds/shape_files.json":79,"./base.js":61,"babel-runtime/core-js/object/keys":86,"babel-runtime/core-js/promise":88,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94,"topojson":365}],73:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _underscore = (window._);

var _underscore2 = _interopRequireDefault(_underscore);

var _backbone = (window.Backbone);

var _backbone2 = _interopRequireDefault(_backbone);

var _baseJs = require('./base.js');

var _baseJs2 = _interopRequireDefault(_baseJs);

var _utilitiesFormattersJs = require('./../utilities/formatters.js');

var _utilitiesFormattersJs2 = _interopRequireDefault(_utilitiesFormattersJs);

var Model = (function (_base$Model) {
    _inherits(Model, _base$Model);

    function Model() {
        _classCallCheck(this, Model);

        _get(Object.getPrototypeOf(Model.prototype), 'constructor', this).apply(this, arguments);
    }

    /*
     *
     *
     */

    _createClass(Model, [{
        key: 'parse',

        /*
         * Parse spreadsheet data, lowercasing and underscore-joining all fields.
         *
         */
        value: function parse(resp) {
            for (var key in resp) {
                var value = resp[key];
                var newKey = key.toLowerCase().replace(/ /g, '_');
                if (['variable name', 'name'].indexOf(key.toLowerCase()) > -1) {
                    newKey = 'id';
                }
                if (['variable group name', 'group name', 'group'].indexOf(key.toLowerCase()) > -1) {
                    newKey = 'variable_group_id';
                }
                if (key !== newKey) {
                    resp[newKey] = value;
                    delete resp[key];
                }
            }
            return resp;
        }

        /*
         * If the variable is a filter variable, extract its properties.
         *
         */
    }, {
        key: 'extractFilter',
        value: function extractFilter() {
            if (this.get('filter_menu_order') == null) {
                return undefined;
            }
            return {
                'variable_id': this.get('id'),
                'type': this.get('filter_type'),
                'menu_order': this.get('filter_menu_order'),
                'numerical_dividers': this.get('numerical_filter_dividers')
            };
        }

        /*
         * Return the field of an item corresponding to the variable, applying 
         * formatting as needed.
         * @param {object} item
         * @returns {string} formattedField
         */
    }, {
        key: 'getFormattedField',
        value: function getFormattedField(item, defaultFormat) {
            var rawField = item.get(this.get('id')),
                format = this.get('format') || defaultFormat;
            //if (format == null || formatters[format] == null) { return rawField; }
            return _utilitiesFormattersJs2['default'].format(rawField, format);
            //return formatters[format](rawField);
        }

        /*
            * Set a numerical filter, splitting up |10|20|30| type numerical divider strings into
            *   presentable and testable objects. See specs for example.
            * @param {function} formatter - Optional formatter function for values.
            */
    }, {
        key: 'getNumericalFilter',
        value: function getNumericalFilter(formatter) {

            var filterFloat = function filterFloat(value) {
                if (/^(\-|\+)?([0-9]*(\.[0-9]+)?|Infinity)$/.test(value)) return Number(value);
                return NaN;
            };

            var i,
                len,
                numericalFilter,
                values,
                numericalDividers = this.get('numerical_filter_dividers'),
                numericalAliases = this.get('numerical_filter_aliases');

            numericalAliases = numericalAliases ? numericalAliases.split('|') : [];

            if (formatter == null) {
                formatter = _utilitiesFormattersJs2['default']['number'];
            }

            values = _underscore2['default'].map(numericalDividers.split('|'), function (member, index) {
                member = member.trim();
                if (member === "") {
                    if (index === 0) {
                        return -1000000000;
                    }
                    return +1000000000;
                }
                return filterFloat(member);
            });

            numericalFilter = [];

            for (i = 0, len = values.length; i < len - 1; i += 1) {
                numericalFilter.push(this.getNumericalFilterValue(values[i], values[i + 1], formatter, numericalAliases[i]));
            }

            return numericalFilter;
        }

        /*
         * Returns single numerical filter value.
         * @param {number} min - Minimum value.
         * @param {number} max - Maximum value.
         * @param {function} formatter - Formatter function.
         * @returns {object}
         */
    }, {
        key: 'getNumericalFilterValue',
        value: function getNumericalFilterValue(min, max, formatter, value) {
            var filterValue, maxDisplay, minDisplay;

            filterValue = { min: min, max: max };

            minDisplay = min;
            maxDisplay = max;
            minDisplay = formatter(minDisplay);
            maxDisplay = formatter(maxDisplay);

            if (value) {
                filterValue.value = value;
                return filterValue;
            }

            if (min === -1000000000) {
                filterValue.value = "Less than " + maxDisplay;
            } else if (max === +1000000000) {
                filterValue.value = "Greater than " + minDisplay;
            } else {
                filterValue.value = "Between " + minDisplay + " and " + maxDisplay;
            }

            return filterValue;
        }
    }]);

    return Model;
})(_baseJs2['default'].Model);

var Collection = (function (_base$Collection) {
    _inherits(Collection, _base$Collection);

    function Collection() {
        _classCallCheck(this, Collection);

        _get(Object.getPrototypeOf(Collection.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(Collection, [{
        key: 'getInfoBoxVariableCount',

        /*
         *
         *
         */
        value: function getInfoBoxVariableCount() {

            var count = 0;

            this.models.forEach(function (model) {
                if (model.get('infobox_order')) {
                    count += 1;
                }
            });

            return count;
        }

        /*
         *
         *
         */
    }, {
        key: 'extractFilters',
        value: function extractFilters() {

            var filters = [];

            this.models.forEach(function (model) {
                var filter = model.extractFilter();
                if (filter) {
                    filters.push(filter);
                }
            });

            return filters.sort(function (f1, f2) {
                return f1['filter_menu_order'] - f2['filter_menu_order'];
            });
        }

        /*
         *
         *
         */
    }, {
        key: 'getFilterVariables',
        value: function getFilterVariables() {
            var models;
            models = this.filter(function (item) {
                return item.get('filter_menu_order') != null;
            });
            models.sort(function (a, b) {
                return a.get('filter_menu_order') - b.get('filter_menu_order');
            });
            return models;
        }

        /*
         * Group variables by variable group model instances.
         * Supports old group_name syntax.
         */
    }, {
        key: 'group',
        value: function group(variableGroupCollection) {

            var grpObj = _underscore2['default'].groupBy(this.models, function (model) {
                return model.get('variable_group_id') || model.get('group_name');
            });

            return _Object$keys(grpObj).map(function (groupId) {

                var variable_group;

                // If the group is found, return group instance. Otherwise, return groupId as string.
                if (variableGroupCollection) {
                    variable_group = variableGroupCollection.findWhere({ id: groupId }) || groupId;
                } else {
                    variable_group = groupId;
                }

                return {
                    variable_group: variable_group,
                    variables: grpObj[groupId]
                };
            });
        }
    }, {
        key: 'model',
        get: function get() {
            return Model;
        }
    }]);

    return Collection;
})(_baseJs2['default'].Collection);

exports['default'] = {
    Model: Model,
    Collection: Collection
};
module.exports = exports['default'];

},{"./../utilities/formatters.js":76,"./base.js":61,"babel-runtime/core-js/object/keys":86,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94}],74:[function(require,module,exports){
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _underscore = (window._);

var _underscore2 = _interopRequireDefault(_underscore);

var _backbone = (window.Backbone);

var _backbone2 = _interopRequireDefault(_backbone);

var _baseJs = require('./base.js');

var _baseJs2 = _interopRequireDefault(_baseJs);

var _utilitiesFormattersJs = require('./../utilities/formatters.js');

var _utilitiesFormattersJs2 = _interopRequireDefault(_utilitiesFormattersJs);

var Model = (function (_base$Model) {
    _inherits(Model, _base$Model);

    function Model() {
        _classCallCheck(this, Model);

        _get(Object.getPrototypeOf(Model.prototype), 'constructor', this).apply(this, arguments);
    }

    /*
     *
     *
     */

    _createClass(Model, [{
        key: 'parse',

        /*
         * Parse spreadsheet data, lowercasing and underscore-joining all fields.
         *
         */
        value: function parse(resp) {
            for (var key in resp) {
                var value = resp[key];
                var newKey = key.toLowerCase().replace(/ /g, '_');
                if (['variable group name', 'group name', 'name'].indexOf(key.toLowerCase()) > -1) {
                    newKey = 'id';
                }
                if (key !== newKey) {
                    resp[newKey] = value;
                    delete resp[key];
                }
            }
            return resp;
        }
    }]);

    return Model;
})(_baseJs2['default'].Model);

var Collection = (function (_base$Collection) {
    _inherits(Collection, _base$Collection);

    function Collection() {
        _classCallCheck(this, Collection);

        _get(Object.getPrototypeOf(Collection.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(Collection, [{
        key: 'model',
        get: function get() {
            return Model;
        }
    }]);

    return Collection;
})(_baseJs2['default'].Collection);

exports['default'] = {
    Model: Model,
    Collection: Collection
};
module.exports = exports['default'];

},{"./../utilities/formatters.js":76,"./base.js":61,"babel-runtime/helpers/class-call-check":89,"babel-runtime/helpers/create-class":90,"babel-runtime/helpers/get":92,"babel-runtime/helpers/inherits":93,"babel-runtime/helpers/interop-require-default":94}],75:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _reactRouter2 = _interopRequireDefault(_reactRouter);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _componentsLayoutJsx = require('./../components/layout.jsx');

var _componentsLayoutJsx2 = _interopRequireDefault(_componentsLayoutJsx);

var _componentsRoute_handlersWelcomeRootJsx = require('./../components/route_handlers/welcome/root.jsx');

var _componentsRoute_handlersWelcomeRootJsx2 = _interopRequireDefault(_componentsRoute_handlersWelcomeRootJsx);

var _componentsRoute_handlersProjectsIndexRootJsx = require('./../components/route_handlers/projects/index/root.jsx');

var _componentsRoute_handlersProjectsIndexRootJsx2 = _interopRequireDefault(_componentsRoute_handlersProjectsIndexRootJsx);

var _componentsRoute_handlersProjectsShowRootJsx = require('./../components/route_handlers/projects/show/root.jsx');

var _componentsRoute_handlersProjectsShowRootJsx2 = _interopRequireDefault(_componentsRoute_handlersProjectsShowRootJsx);

var _componentsRoute_handlersProjectsNewRootJsx = require('./../components/route_handlers/projects/new/root.jsx');

var _componentsRoute_handlersProjectsNewRootJsx2 = _interopRequireDefault(_componentsRoute_handlersProjectsNewRootJsx);

var _componentsRoute_handlersProjectsEditRootJsx = require('./../components/route_handlers/projects/edit/root.jsx');

var _componentsRoute_handlersProjectsEditRootJsx2 = _interopRequireDefault(_componentsRoute_handlersProjectsEditRootJsx);

var _componentsRoute_handlersProjectsDeleteRootJsx = require('./../components/route_handlers/projects/delete/root.jsx');

var _componentsRoute_handlersProjectsDeleteRootJsx2 = _interopRequireDefault(_componentsRoute_handlersProjectsDeleteRootJsx);

var _componentsRoute_handlersImagesIndexRootJsx = require('./../components/route_handlers/images/index/root.jsx');

var _componentsRoute_handlersImagesIndexRootJsx2 = _interopRequireDefault(_componentsRoute_handlersImagesIndexRootJsx);

var _componentsRoute_handlersImagesNewRootJsx = require('./../components/route_handlers/images/new/root.jsx');

var _componentsRoute_handlersImagesNewRootJsx2 = _interopRequireDefault(_componentsRoute_handlersImagesNewRootJsx);

var _componentsRoute_handlersImagesEditRootJsx = require('./../components/route_handlers/images/edit/root.jsx');

var _componentsRoute_handlersImagesEditRootJsx2 = _interopRequireDefault(_componentsRoute_handlersImagesEditRootJsx);

var _componentsRoute_handlersImagesDeleteRootJsx = require('./../components/route_handlers/images/delete/root.jsx');

var _componentsRoute_handlersImagesDeleteRootJsx2 = _interopRequireDefault(_componentsRoute_handlersImagesDeleteRootJsx);

// Main route definition.
var routes = _react2['default'].createElement(
	_reactRouter.Route,
	{ handler: _componentsLayoutJsx2['default'] },
	_react2['default'].createElement(_reactRouter.Route, { name: 'welcome', path: 'welcome', handler: _componentsRoute_handlersWelcomeRootJsx2['default'] }),
	_react2['default'].createElement(_reactRouter.Redirect, { from: '/', to: 'welcome' }),
	_react2['default'].createElement(
		_reactRouter.Route,
		{ path: 'projects' },
		_react2['default'].createElement(_reactRouter.Route, { name: 'projects_new', path: 'new', handler: _componentsRoute_handlersProjectsNewRootJsx2['default'] }),
		_react2['default'].createElement(_reactRouter.Route, { name: 'projects_edit', path: ':id/edit', handler: _componentsRoute_handlersProjectsEditRootJsx2['default'] }),
		_react2['default'].createElement(_reactRouter.Route, { name: 'projects_delete', path: ':id/delete', handler: _componentsRoute_handlersProjectsDeleteRootJsx2['default'] })
	),
	_react2['default'].createElement(
		_reactRouter.Route,
		{ path: 'images' },
		_react2['default'].createElement(_reactRouter.Route, { name: 'images_index', path: 'all', handler: _componentsRoute_handlersImagesIndexRootJsx2['default'] }),
		_react2['default'].createElement(_reactRouter.Route, { name: 'images_new', path: 'new', handler: _componentsRoute_handlersImagesNewRootJsx2['default'] }),
		_react2['default'].createElement(_reactRouter.Route, { name: 'images_edit', path: ':id/edit', handler: _componentsRoute_handlersImagesEditRootJsx2['default'] }),
		_react2['default'].createElement(_reactRouter.Route, { name: 'images_delete', path: ':id/delete', handler: _componentsRoute_handlersImagesDeleteRootJsx2['default'] })
	),
	_react2['default'].createElement(_reactRouter.Route, { name: 'projects_index', path: 'menu', handler: _componentsRoute_handlersProjectsIndexRootJsx2['default'] }),
	_react2['default'].createElement(_reactRouter.Route, { name: 'projects_show', path: ':atlas_url', handler: _componentsRoute_handlersProjectsShowRootJsx2['default'] })
);

exports['default'] = routes;
module.exports = exports['default'];

},{"./../components/layout.jsx":28,"./../components/route_handlers/images/delete/root.jsx":29,"./../components/route_handlers/images/edit/root.jsx":30,"./../components/route_handlers/images/index/root.jsx":31,"./../components/route_handlers/images/new/root.jsx":32,"./../components/route_handlers/projects/delete/root.jsx":33,"./../components/route_handlers/projects/edit/root.jsx":34,"./../components/route_handlers/projects/index/root.jsx":35,"./../components/route_handlers/projects/new/root.jsx":39,"./../components/route_handlers/projects/show/root.jsx":43,"./../components/route_handlers/welcome/root.jsx":58,"babel-runtime/helpers/interop-require-default":94,"classnames":167,"react":364,"react-router":195}],76:[function(require,module,exports){
'use strict';

var numeral = require('numeral'),
    marked = require('marked'),
    $ = (window.$);

var formatters = {

	/*
  * Main entry point to the module.
  *
  */
	format: function format(v, formatKey) {
		if (!formatKey) {
			return v;
		}
		var formatter = formatters[formatKey.toLowerCase()];
		if (!formatter) {
			return v;
		}
		return formatter(v);
	},

	/*
  *
  *
  */
	currency: function currency(v) {
		var formatter;
		formatter = v > 999 ? '($0a)' : '($0)';
		return numeral(v).format(formatter);
	},

	/*
  *
  *
  */
	number: function number(v) {
		var formatter;
		if (v === parseInt(v, 10)) {
			formatter = v > 99999 ? '0a' : '0';
		} else {
			formatter = v > 99999 ? '0.0a' : '0.0';
		}
		return numeral(v).format(formatter);
	},

	/*
  *
  *
  */
	percent: function percent(v) {
		return formatters.number(v * 100) + '%';
	},

	/*
  *
  *
  */
	percentage: function percentage(v) {
		return formatters.percent(v);
	},

	/*
  *
  *
  */
	html: function html(_html) {
		var $html, newHtml;
		$html = $(_html);
		$html.find('a').attr('target', '_blank');
		newHtml = $('<div></div>').append($html.clone()).html();
		return newHtml;
	},

	/*
  *
  *
  */
	removeLineBreaks: function removeLineBreaks(string) {
		string = String(string);
		return string.replace(/(\r\n|\n|\r)/gm, '');
	},

	/*
  *
  *
  */
	removeSpaces: function removeSpaces(string) {
		string = String(string);
		return string.replace(/\s+/g, '');
	},

	/*
  * This method tailors to a single specific hyphenation need. Customize later if necessary.
  *
  */
	hyphenate: function hyphenate(string) {
		string = String(string);
		return string.replace('ommunication', 'ommuni-cation');
	},

	/*
  * 
  *
  */
	htmlWithToc: function htmlWithToc(html) {},

	/*
  * 
  *
  */
	markdown: function markdown(md) {
		if (!md) {
			return;
		}
		return marked(md);
	}

};

module.exports = formatters;

},{"marked":168,"numeral":170}],77:[function(require,module,exports){
module.exports=[
	{ 
		"id": "0", 
		"name": "Early Education" 
	},
	{ 
		"id": "1", 
		"name": "PreK-12 Education" 
	},
	{ 
		"id": "2", 
		"name": "Higher Education" 
	},
	{ 
		"id": "3", 
		"name": "Learning Technologies" 
	},
	{ 
		"id": "4", 
		"name": "Dual Language Learners" 
	},
	{ 
		"id": "5", 
		"name": "Workforce Development" 
	},
	{ 
		"id": "6", 
		"name": "Federal Education Budget" 
	}
]
},{}],78:[function(require,module,exports){
module.exports=[
	{ "id": "0", "order": 0, "display_name": "Analysis Tools", "name": "Tilemap" },
	{ "id": "1", "order": 3, "display_name": "Explainers", "name": "Explainer" },
	{ "id": "2", "order": 1, "display_name": "Policy Briefs", "name": "Policy Brief" },
	{ "id": "3", "order": 2, "display_name": "Polling", "name": "Polling" }
]
},{}],79:[function(require,module,exports){
module.exports=[
	{
		"name": "us_states",
		"fileName": "cb_2014_us_state_500k",
		"url": "http://www2.census.gov/geo/tiger/GENZ2014/shp/cb_2014_us_state_500k.zip",
		"properties": {
			"id": "STATEFP"
		}
	},
	{
		"name": "us_congressional_districts",
		"fileName": "cb_2014_us_cd114_500k",
		"url": "http://www2.census.gov/geo/tiger/GENZ2014/shp/cb_2014_us_cd114_500k.zip",
		"properties": {
			"state_id": "STATEFP",
			"id": "CD114FP"
		}
	}
]
},{}],80:[function(require,module,exports){
module.exports=[
  {
    "id": 1,
    "name": "Alabama",
    "code": "AL"
  }, {
    "id": 2,
    "name": "Alaska",
    "code": "AK"
  }, {
    "id": 60,
    "name": "American Samoa",
    "code": "AS"
  }, {
    "id": 4,
    "name": "Arizona",
    "code": "AZ"
  }, {
    "id": 5,
    "name": "Arkansas",
    "code": "AR"
  }, {
    "id": 6,
    "name": "California",
    "code": "CA"
  }, {
    "id": 8,
    "name": "Colorado",
    "code": "CO"
  }, {
    "id": 9,
    "name": "Connecticut",
    "code": "CT"
  }, {
    "id": 10,
    "name": "Delaware",
    "code": "DE"
  }, {
    "id": 11,
    "name": "District of Columbia",
    "code": "DC"
  }, {
    "id": 12,
    "name": "Florida",
    "code": "FL"
  }, {
    "id": 13,
    "name": "Georgia",
    "code": "GA"
  }, {
    "id": 66,
    "name": "Guam",
    "code": "GU"
  }, {
    "id": 15,
    "name": "Hawaii",
    "code": "HI"
  }, {
    "id": 16,
    "name": "Idaho",
    "code": "ID"
  }, {
    "id": 17,
    "name": "Illinois",
    "code": "IL"
  }, {
    "id": 18,
    "name": "Indiana",
    "code": "IN"
  }, {
    "id": 19,
    "name": "Iowa",
    "code": "IA"
  }, {
    "id": 20,
    "name": "Kansas",
    "code": "KS"
  }, {
    "id": 21,
    "name": "Kentucky",
    "code": "KY"
  }, {
    "id": 22,
    "name": "Louisiana",
    "code": "LA"
  }, {
    "id": 23,
    "name": "Maine",
    "code": "ME"
  }, {
    "id": 24,
    "name": "Maryland",
    "code": "MD"
  }, {
    "id": 25,
    "name": "Massachusetts",
    "code": "MA"
  }, {
    "id": 26,
    "name": "Michigan",
    "code": "MI"
  }, {
    "id": 27,
    "name": "Minnesota",
    "code": "MN"
  }, {
    "id": 28,
    "name": "Mississippi",
    "code": "MS"
  }, {
    "id": 29,
    "name": "Missouri",
    "code": "MO"
  }, {
    "id": 30,
    "name": "Montana",
    "code": "MT"
  }, {
    "id": 31,
    "name": "Nebraska",
    "code": "NE"
  }, {
    "id": 32,
    "name": "Nevada",
    "code": "NV"
  }, {
    "id": 33,
    "name": "New Hampshire",
    "code": "NH"
  }, {
    "id": 34,
    "name": "New Jersey",
    "code": "NJ"
  }, {
    "id": 35,
    "name": "New Mexico",
    "code": "NM"
  }, {
    "id": 36,
    "name": "New York",
    "code": "NY"
  }, {
    "id": 37,
    "name": "North Carolina",
    "code": "NC"
  }, {
    "id": 38,
    "name": "North Dakota",
    "code": "ND"
  }, {
    "id": 39,
    "name": "Ohio",
    "code": "OH"
  }, {
    "id": 40,
    "name": "Oklahoma",
    "code": "OK"
  }, {
    "id": 41,
    "name": "Oregon",
    "code": "OR"
  }, {
    "id": 42,
    "name": "Pennsylvania",
    "code": "PA"
  }, {
    "id": 72,
    "name": "Puerto Rico",
    "code": "PR"
  }, {
    "id": 44,
    "name": "Rhode Island",
    "code": "RI"
  }, {
    "id": 45,
    "name": "South Carolina",
    "code": "SC"
  }, {
    "id": 46,
    "name": "South Dakota",
    "code": "SD"
  }, {
    "id": 47,
    "name": "Tennessee",
    "code": "TN"
  }, {
    "id": 48,
    "name": "Texas",
    "code": "TX"
  }, {
    "id": 49,
    "name": "Utah",
    "code": "UT"
  }, {
    "id": 50,
    "name": "Vermont",
    "code": "VT"
  }, {
    "id": 51,
    "name": "Virginia",
    "code": "VA"
  }, {
    "id": 78,
    "name": "Virgin Islands of the U.S.",
    "code": "VI"
  }, {
    "id": 53,
    "name": "Washington",
    "code": "WA"
  }, {
    "id": 54,
    "name": "West Virginia",
    "code": "WV"
  }, {
    "id": 55,
    "name": "Wisconsin",
    "code": "WI"
  }, {
    "id": 56,
    "name": "Wyoming",
    "code": "WY"
  }
]
},{}],81:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/get-iterator"), __esModule: true };
},{"core-js/library/fn/get-iterator":97}],82:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/assign"), __esModule: true };
},{"core-js/library/fn/object/assign":98}],83:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/create"), __esModule: true };
},{"core-js/library/fn/object/create":99}],84:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/define-property"), __esModule: true };
},{"core-js/library/fn/object/define-property":100}],85:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/get-own-property-descriptor"), __esModule: true };
},{"core-js/library/fn/object/get-own-property-descriptor":101}],86:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/keys"), __esModule: true };
},{"core-js/library/fn/object/keys":102}],87:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/set-prototype-of"), __esModule: true };
},{"core-js/library/fn/object/set-prototype-of":103}],88:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/promise"), __esModule: true };
},{"core-js/library/fn/promise":104}],89:[function(require,module,exports){
"use strict";

exports["default"] = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

exports.__esModule = true;
},{}],90:[function(require,module,exports){
"use strict";

var _Object$defineProperty = require("babel-runtime/core-js/object/define-property")["default"];

exports["default"] = (function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;

      _Object$defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
})();

exports.__esModule = true;
},{"babel-runtime/core-js/object/define-property":84}],91:[function(require,module,exports){
"use strict";

var _Object$assign = require("babel-runtime/core-js/object/assign")["default"];

exports["default"] = _Object$assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

exports.__esModule = true;
},{"babel-runtime/core-js/object/assign":82}],92:[function(require,module,exports){
"use strict";

var _Object$getOwnPropertyDescriptor = require("babel-runtime/core-js/object/get-own-property-descriptor")["default"];

exports["default"] = function get(_x, _x2, _x3) {
  var _again = true;

  _function: while (_again) {
    var object = _x,
        property = _x2,
        receiver = _x3;
    desc = parent = getter = undefined;
    _again = false;
    if (object === null) object = Function.prototype;

    var desc = _Object$getOwnPropertyDescriptor(object, property);

    if (desc === undefined) {
      var parent = Object.getPrototypeOf(object);

      if (parent === null) {
        return undefined;
      } else {
        _x = parent;
        _x2 = property;
        _x3 = receiver;
        _again = true;
        continue _function;
      }
    } else if ("value" in desc) {
      return desc.value;
    } else {
      var getter = desc.get;

      if (getter === undefined) {
        return undefined;
      }

      return getter.call(receiver);
    }
  }
};

exports.__esModule = true;
},{"babel-runtime/core-js/object/get-own-property-descriptor":85}],93:[function(require,module,exports){
"use strict";

var _Object$create = require("babel-runtime/core-js/object/create")["default"];

var _Object$setPrototypeOf = require("babel-runtime/core-js/object/set-prototype-of")["default"];

exports["default"] = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = _Object$create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _Object$setPrototypeOf ? _Object$setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

exports.__esModule = true;
},{"babel-runtime/core-js/object/create":83,"babel-runtime/core-js/object/set-prototype-of":87}],94:[function(require,module,exports){
"use strict";

exports["default"] = function (obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
};

exports.__esModule = true;
},{}],95:[function(require,module,exports){
"use strict";

exports["default"] = function (obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};

    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }

    newObj["default"] = obj;
    return newObj;
  }
};

exports.__esModule = true;
},{}],96:[function(require,module,exports){
"use strict";

exports["default"] = function (obj) {
  return obj && obj.__esModule ? obj["default"] : obj;
};

exports.__esModule = true;
},{}],97:[function(require,module,exports){
require('../modules/web.dom.iterable');
require('../modules/es6.string.iterator');
module.exports = require('../modules/core.get-iterator');
},{"../modules/core.get-iterator":156,"../modules/es6.string.iterator":164,"../modules/web.dom.iterable":165}],98:[function(require,module,exports){
require('../../modules/es6.object.assign');
module.exports = require('../../modules/$.core').Object.assign;
},{"../../modules/$.core":110,"../../modules/es6.object.assign":158}],99:[function(require,module,exports){
var $ = require('../../modules/$');
module.exports = function create(P, D){
  return $.create(P, D);
};
},{"../../modules/$":132}],100:[function(require,module,exports){
var $ = require('../../modules/$');
module.exports = function defineProperty(it, key, desc){
  return $.setDesc(it, key, desc);
};
},{"../../modules/$":132}],101:[function(require,module,exports){
var $ = require('../../modules/$');
require('../../modules/es6.object.get-own-property-descriptor');
module.exports = function getOwnPropertyDescriptor(it, key){
  return $.getDesc(it, key);
};
},{"../../modules/$":132,"../../modules/es6.object.get-own-property-descriptor":159}],102:[function(require,module,exports){
require('../../modules/es6.object.keys');
module.exports = require('../../modules/$.core').Object.keys;
},{"../../modules/$.core":110,"../../modules/es6.object.keys":160}],103:[function(require,module,exports){
require('../../modules/es6.object.set-prototype-of');
module.exports = require('../../modules/$.core').Object.setPrototypeOf;
},{"../../modules/$.core":110,"../../modules/es6.object.set-prototype-of":161}],104:[function(require,module,exports){
require('../modules/es6.object.to-string');
require('../modules/es6.string.iterator');
require('../modules/web.dom.iterable');
require('../modules/es6.promise');
module.exports = require('../modules/$.core').Promise;
},{"../modules/$.core":110,"../modules/es6.object.to-string":162,"../modules/es6.promise":163,"../modules/es6.string.iterator":164,"../modules/web.dom.iterable":165}],105:[function(require,module,exports){
module.exports = function(it){
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
  return it;
};
},{}],106:[function(require,module,exports){
var isObject = require('./$.is-object');
module.exports = function(it){
  if(!isObject(it))throw TypeError(it + ' is not an object!');
  return it;
};
},{"./$.is-object":125}],107:[function(require,module,exports){
// 19.1.2.1 Object.assign(target, source, ...)
var toObject = require('./$.to-object')
  , IObject  = require('./$.iobject')
  , enumKeys = require('./$.enum-keys')
  , has      = require('./$.has');

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = require('./$.fails')(function(){
  var a = Object.assign
    , A = {}
    , B = {}
    , S = Symbol()
    , K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function(k){ B[k] = k; });
  return a({}, A)[S] != 7 || Object.keys(a({}, B)).join('') != K;
}) ? function assign(target, source){   // eslint-disable-line no-unused-vars
  var T = toObject(target)
    , l = arguments.length
    , i = 1;
  while(l > i){
    var S      = IObject(arguments[i++])
      , keys   = enumKeys(S)
      , length = keys.length
      , j      = 0
      , key;
    while(length > j)if(has(S, key = keys[j++]))T[key] = S[key];
  }
  return T;
} : Object.assign;
},{"./$.enum-keys":115,"./$.fails":116,"./$.has":119,"./$.iobject":123,"./$.to-object":151}],108:[function(require,module,exports){
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./$.cof')
  , TAG = require('./$.wks')('toStringTag')
  // ES3 wrong here
  , ARG = cof(function(){ return arguments; }()) == 'Arguments';

module.exports = function(it){
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = (O = Object(it))[TAG]) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};
},{"./$.cof":109,"./$.wks":154}],109:[function(require,module,exports){
var toString = {}.toString;

module.exports = function(it){
  return toString.call(it).slice(8, -1);
};
},{}],110:[function(require,module,exports){
var core = module.exports = {version: '1.2.0'};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
},{}],111:[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./$.a-function');
module.exports = function(fn, that, length){
  aFunction(fn);
  if(that === undefined)return fn;
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
    case 2: return function(a, b){
      return fn.call(that, a, b);
    };
    case 3: return function(a, b, c){
      return fn.call(that, a, b, c);
    };
  }
  return function(/* ...args */){
    return fn.apply(that, arguments);
  };
};
},{"./$.a-function":105}],112:[function(require,module,exports){
var global    = require('./$.global')
  , core      = require('./$.core')
  , PROTOTYPE = 'prototype';
var ctx = function(fn, that){
  return function(){
    return fn.apply(that, arguments);
  };
};
var $def = function(type, name, source){
  var key, own, out, exp
    , isGlobal = type & $def.G
    , isProto  = type & $def.P
    , target   = isGlobal ? global : type & $def.S
        ? global[name] : (global[name] || {})[PROTOTYPE]
    , exports  = isGlobal ? core : core[name] || (core[name] = {});
  if(isGlobal)source = name;
  for(key in source){
    // contains in native
    own = !(type & $def.F) && target && key in target;
    if(own && key in exports)continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    if(isGlobal && typeof target[key] != 'function')exp = source[key];
    // bind timers to global for call from export context
    else if(type & $def.B && own)exp = ctx(out, global);
    // wrap global constructors for prevent change them in library
    else if(type & $def.W && target[key] == out)!function(C){
      exp = function(param){
        return this instanceof C ? new C(param) : C(param);
      };
      exp[PROTOTYPE] = C[PROTOTYPE];
    }(out);
    else exp = isProto && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export
    exports[key] = exp;
    if(isProto)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
  }
};
// type bitmap
$def.F = 1;  // forced
$def.G = 2;  // global
$def.S = 4;  // static
$def.P = 8;  // proto
$def.B = 16; // bind
$def.W = 32; // wrap
module.exports = $def;
},{"./$.core":110,"./$.global":118}],113:[function(require,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function(it){
  if(it == undefined)throw TypeError("Can't call method on  " + it);
  return it;
};
},{}],114:[function(require,module,exports){
var isObject = require('./$.is-object')
  , document = require('./$.global').document
  // in old IE typeof document.createElement is 'object'
  , is = isObject(document) && isObject(document.createElement);
module.exports = function(it){
  return is ? document.createElement(it) : {};
};
},{"./$.global":118,"./$.is-object":125}],115:[function(require,module,exports){
// all enumerable object keys, includes symbols
var $ = require('./$');
module.exports = function(it){
  var keys       = $.getKeys(it)
    , getSymbols = $.getSymbols;
  if(getSymbols){
    var symbols = getSymbols(it)
      , isEnum  = $.isEnum
      , i       = 0
      , key;
    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))keys.push(key);
  }
  return keys;
};
},{"./$":132}],116:[function(require,module,exports){
module.exports = function(exec){
  try {
    return !!exec();
  } catch(e){
    return true;
  }
};
},{}],117:[function(require,module,exports){
var ctx         = require('./$.ctx')
  , call        = require('./$.iter-call')
  , isArrayIter = require('./$.is-array-iter')
  , anObject    = require('./$.an-object')
  , toLength    = require('./$.to-length')
  , getIterFn   = require('./core.get-iterator-method');
module.exports = function(iterable, entries, fn, that){
  var iterFn = getIterFn(iterable)
    , f      = ctx(fn, that, entries ? 2 : 1)
    , index  = 0
    , length, step, iterator;
  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
    entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
    call(iterator, f, step.value, entries);
  }
};
},{"./$.an-object":106,"./$.ctx":111,"./$.is-array-iter":124,"./$.iter-call":126,"./$.to-length":150,"./core.get-iterator-method":155}],118:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var UNDEFINED = 'undefined';
var global = module.exports = typeof window != UNDEFINED && window.Math == Math
  ? window : typeof self != UNDEFINED && self.Math == Math ? self : Function('return this')();
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
},{}],119:[function(require,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function(it, key){
  return hasOwnProperty.call(it, key);
};
},{}],120:[function(require,module,exports){
var $          = require('./$')
  , createDesc = require('./$.property-desc');
module.exports = require('./$.support-desc') ? function(object, key, value){
  return $.setDesc(object, key, createDesc(1, value));
} : function(object, key, value){
  object[key] = value;
  return object;
};
},{"./$":132,"./$.property-desc":137,"./$.support-desc":145}],121:[function(require,module,exports){
module.exports = require('./$.global').document && document.documentElement;
},{"./$.global":118}],122:[function(require,module,exports){
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function(fn, args, that){
  var un = that === undefined;
  switch(args.length){
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return              fn.apply(that, args);
};
},{}],123:[function(require,module,exports){
// indexed object, fallback for non-array-like ES3 strings
var cof = require('./$.cof');
module.exports = 0 in Object('z') ? Object : function(it){
  return cof(it) == 'String' ? it.split('') : Object(it);
};
},{"./$.cof":109}],124:[function(require,module,exports){
// check on default Array iterator
var Iterators = require('./$.iterators')
  , ITERATOR  = require('./$.wks')('iterator');
module.exports = function(it){
  return (Iterators.Array || Array.prototype[ITERATOR]) === it;
};
},{"./$.iterators":131,"./$.wks":154}],125:[function(require,module,exports){
module.exports = function(it){
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};
},{}],126:[function(require,module,exports){
// call something on iterator step with safe closing on error
var anObject = require('./$.an-object');
module.exports = function(iterator, fn, value, entries){
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch(e){
    var ret = iterator['return'];
    if(ret !== undefined)anObject(ret.call(iterator));
    throw e;
  }
};
},{"./$.an-object":106}],127:[function(require,module,exports){
'use strict';
var $ = require('./$')
  , IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./$.hide')(IteratorPrototype, require('./$.wks')('iterator'), function(){ return this; });

module.exports = function(Constructor, NAME, next){
  Constructor.prototype = $.create(IteratorPrototype, {next: require('./$.property-desc')(1,next)});
  require('./$.tag')(Constructor, NAME + ' Iterator');
};
},{"./$":132,"./$.hide":120,"./$.property-desc":137,"./$.tag":146,"./$.wks":154}],128:[function(require,module,exports){
'use strict';
var LIBRARY         = require('./$.library')
  , $def            = require('./$.def')
  , $redef          = require('./$.redef')
  , hide            = require('./$.hide')
  , has             = require('./$.has')
  , SYMBOL_ITERATOR = require('./$.wks')('iterator')
  , Iterators       = require('./$.iterators')
  , BUGGY           = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
  , FF_ITERATOR     = '@@iterator'
  , KEYS            = 'keys'
  , VALUES          = 'values';
var returnThis = function(){ return this; };
module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCE){
  require('./$.iter-create')(Constructor, NAME, next);
  var createMethod = function(kind){
    switch(kind){
      case KEYS: return function keys(){ return new Constructor(this, kind); };
      case VALUES: return function values(){ return new Constructor(this, kind); };
    } return function entries(){ return new Constructor(this, kind); };
  };
  var TAG      = NAME + ' Iterator'
    , proto    = Base.prototype
    , _native  = proto[SYMBOL_ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
    , _default = _native || createMethod(DEFAULT)
    , methods, key;
  // Fix native
  if(_native){
    var IteratorPrototype = require('./$').getProto(_default.call(new Base));
    // Set @@toStringTag to native iterators
    require('./$.tag')(IteratorPrototype, TAG, true);
    // FF fix
    if(!LIBRARY && has(proto, FF_ITERATOR))hide(IteratorPrototype, SYMBOL_ITERATOR, returnThis);
  }
  // Define iterator
  if(!LIBRARY || FORCE)hide(proto, SYMBOL_ITERATOR, _default);
  // Plug for library
  Iterators[NAME] = _default;
  Iterators[TAG]  = returnThis;
  if(DEFAULT){
    methods = {
      keys:    IS_SET            ? _default : createMethod(KEYS),
      values:  DEFAULT == VALUES ? _default : createMethod(VALUES),
      entries: DEFAULT != VALUES ? _default : createMethod('entries')
    };
    if(FORCE)for(key in methods){
      if(!(key in proto))$redef(proto, key, methods[key]);
    } else $def($def.P + $def.F * BUGGY, NAME, methods);
  }
};
},{"./$":132,"./$.def":112,"./$.has":119,"./$.hide":120,"./$.iter-create":127,"./$.iterators":131,"./$.library":133,"./$.redef":138,"./$.tag":146,"./$.wks":154}],129:[function(require,module,exports){
var SYMBOL_ITERATOR = require('./$.wks')('iterator')
  , SAFE_CLOSING    = false;
try {
  var riter = [7][SYMBOL_ITERATOR]();
  riter['return'] = function(){ SAFE_CLOSING = true; };
  Array.from(riter, function(){ throw 2; });
} catch(e){ /* empty */ }
module.exports = function(exec){
  if(!SAFE_CLOSING)return false;
  var safe = false;
  try {
    var arr  = [7]
      , iter = arr[SYMBOL_ITERATOR]();
    iter.next = function(){ safe = true; };
    arr[SYMBOL_ITERATOR] = function(){ return iter; };
    exec(arr);
  } catch(e){ /* empty */ }
  return safe;
};
},{"./$.wks":154}],130:[function(require,module,exports){
module.exports = function(done, value){
  return {value: value, done: !!done};
};
},{}],131:[function(require,module,exports){
module.exports = {};
},{}],132:[function(require,module,exports){
var $Object = Object;
module.exports = {
  create:     $Object.create,
  getProto:   $Object.getPrototypeOf,
  isEnum:     {}.propertyIsEnumerable,
  getDesc:    $Object.getOwnPropertyDescriptor,
  setDesc:    $Object.defineProperty,
  setDescs:   $Object.defineProperties,
  getKeys:    $Object.keys,
  getNames:   $Object.getOwnPropertyNames,
  getSymbols: $Object.getOwnPropertySymbols,
  each:       [].forEach
};
},{}],133:[function(require,module,exports){
module.exports = true;
},{}],134:[function(require,module,exports){
var global    = require('./$.global')
  , macrotask = require('./$.task').set
  , Observer  = global.MutationObserver || global.WebKitMutationObserver
  , process   = global.process
  , isNode    = require('./$.cof')(process) == 'process'
  , head, last, notify;

var flush = function(){
  var parent, domain;
  if(isNode && (parent = process.domain)){
    process.domain = null;
    parent.exit();
  }
  while(head){
    domain = head.domain;
    if(domain)domain.enter();
    head.fn.call(); // <- currently we use it only for Promise - try / catch not required
    if(domain)domain.exit();
    head = head.next;
  } last = undefined;
  if(parent)parent.enter();
}

// Node.js
if(isNode){
  notify = function(){
    process.nextTick(flush);
  };
// browsers with MutationObserver
} else if(Observer){
  var toggle = 1
    , node   = document.createTextNode('');
  new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
  notify = function(){
    node.data = toggle = -toggle;
  };
// for other environments - macrotask based on:
// - setImmediate
// - MessageChannel
// - window.postMessag
// - onreadystatechange
// - setTimeout
} else {
  notify = function(){
    // strange IE + webpack dev server bug - use .call(global)
    macrotask.call(global, flush);
  };
}

module.exports = function asap(fn){
  var task = {fn: fn, next: undefined, domain: isNode && process.domain};
  if(last)last.next = task;
  if(!head){
    head = task;
    notify();
  } last = task;
};
},{"./$.cof":109,"./$.global":118,"./$.task":147}],135:[function(require,module,exports){
var $redef = require('./$.redef');
module.exports = function(target, src){
  for(var key in src)$redef(target, key, src[key]);
  return target;
};
},{"./$.redef":138}],136:[function(require,module,exports){
// most Object methods by ES6 should accept primitives
module.exports = function(KEY, exec){
  var $def = require('./$.def')
    , fn   = (require('./$.core').Object || {})[KEY] || Object[KEY]
    , exp  = {};
  exp[KEY] = exec(fn);
  $def($def.S + $def.F * require('./$.fails')(function(){ fn(1); }), 'Object', exp);
};
},{"./$.core":110,"./$.def":112,"./$.fails":116}],137:[function(require,module,exports){
module.exports = function(bitmap, value){
  return {
    enumerable  : !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable    : !(bitmap & 4),
    value       : value
  };
};
},{}],138:[function(require,module,exports){
module.exports = require('./$.hide');
},{"./$.hide":120}],139:[function(require,module,exports){
module.exports = Object.is || function is(x, y){
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};
},{}],140:[function(require,module,exports){
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var getDesc  = require('./$').getDesc
  , isObject = require('./$.is-object')
  , anObject = require('./$.an-object');
var check = function(O, proto){
  anObject(O);
  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line no-proto
    function(test, buggy, set){
      try {
        set = require('./$.ctx')(Function.call, getDesc(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch(e){ buggy = true; }
      return function setPrototypeOf(O, proto){
        check(O, proto);
        if(buggy)O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};
},{"./$":132,"./$.an-object":106,"./$.ctx":111,"./$.is-object":125}],141:[function(require,module,exports){
var global = require('./$.global')
  , SHARED = '__core-js_shared__'
  , store  = global[SHARED] || (global[SHARED] = {});
module.exports = function(key){
  return store[key] || (store[key] = {});
};
},{"./$.global":118}],142:[function(require,module,exports){
'use strict';
var $       = require('./$')
  , SPECIES = require('./$.wks')('species');
module.exports = function(C){
  if(require('./$.support-desc') && !(SPECIES in C))$.setDesc(C, SPECIES, {
    configurable: true,
    get: function(){ return this; }
  });
};
},{"./$":132,"./$.support-desc":145,"./$.wks":154}],143:[function(require,module,exports){
module.exports = function(it, Constructor, name){
  if(!(it instanceof Constructor))throw TypeError(name + ": use the 'new' operator!");
  return it;
};
},{}],144:[function(require,module,exports){
// true  -> String#at
// false -> String#codePointAt
var toInteger = require('./$.to-integer')
  , defined   = require('./$.defined');
module.exports = function(TO_STRING){
  return function(that, pos){
    var s = String(defined(that))
      , i = toInteger(pos)
      , l = s.length
      , a, b;
    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l
      || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
        ? TO_STRING ? s.charAt(i) : a
        : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};
},{"./$.defined":113,"./$.to-integer":148}],145:[function(require,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !require('./$.fails')(function(){
  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
});
},{"./$.fails":116}],146:[function(require,module,exports){
var has  = require('./$.has')
  , hide = require('./$.hide')
  , TAG  = require('./$.wks')('toStringTag');

module.exports = function(it, tag, stat){
  if(it && !has(it = stat ? it : it.prototype, TAG))hide(it, TAG, tag);
};
},{"./$.has":119,"./$.hide":120,"./$.wks":154}],147:[function(require,module,exports){
'use strict';
var ctx                = require('./$.ctx')
  , invoke             = require('./$.invoke')
  , html               = require('./$.html')
  , cel                = require('./$.dom-create')
  , global             = require('./$.global')
  , process            = global.process
  , setTask            = global.setImmediate
  , clearTask          = global.clearImmediate
  , MessageChannel     = global.MessageChannel
  , counter            = 0
  , queue              = {}
  , ONREADYSTATECHANGE = 'onreadystatechange'
  , defer, channel, port;
var run = function(){
  var id = +this;
  if(queue.hasOwnProperty(id)){
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listner = function(event){
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if(!setTask || !clearTask){
  setTask = function setImmediate(fn){
    var args = [], i = 1;
    while(arguments.length > i)args.push(arguments[i++]);
    queue[++counter] = function(){
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id){
    delete queue[id];
  };
  // Node.js 0.8-
  if(require('./$.cof')(process) == 'process'){
    defer = function(id){
      process.nextTick(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if(MessageChannel){
    channel = new MessageChannel;
    port    = channel.port2;
    channel.port1.onmessage = listner;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScript){
    defer = function(id){
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listner, false);
  // IE8-
  } else if(ONREADYSTATECHANGE in cel('script')){
    defer = function(id){
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function(id){
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set:   setTask,
  clear: clearTask
};
},{"./$.cof":109,"./$.ctx":111,"./$.dom-create":114,"./$.global":118,"./$.html":121,"./$.invoke":122}],148:[function(require,module,exports){
// 7.1.4 ToInteger
var ceil  = Math.ceil
  , floor = Math.floor;
module.exports = function(it){
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};
},{}],149:[function(require,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./$.iobject')
  , defined = require('./$.defined');
module.exports = function(it){
  return IObject(defined(it));
};
},{"./$.defined":113,"./$.iobject":123}],150:[function(require,module,exports){
// 7.1.15 ToLength
var toInteger = require('./$.to-integer')
  , min       = Math.min;
module.exports = function(it){
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};
},{"./$.to-integer":148}],151:[function(require,module,exports){
// 7.1.13 ToObject(argument)
var defined = require('./$.defined');
module.exports = function(it){
  return Object(defined(it));
};
},{"./$.defined":113}],152:[function(require,module,exports){
var id = 0
  , px = Math.random();
module.exports = function(key){
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};
},{}],153:[function(require,module,exports){
module.exports = function(){ /* empty */ };
},{}],154:[function(require,module,exports){
var store  = require('./$.shared')('wks')
  , Symbol = require('./$.global').Symbol;
module.exports = function(name){
  return store[name] || (store[name] =
    Symbol && Symbol[name] || (Symbol || require('./$.uid'))('Symbol.' + name));
};
},{"./$.global":118,"./$.shared":141,"./$.uid":152}],155:[function(require,module,exports){
var classof   = require('./$.classof')
  , ITERATOR  = require('./$.wks')('iterator')
  , Iterators = require('./$.iterators');
module.exports = require('./$.core').getIteratorMethod = function(it){
  if(it != undefined)return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
};
},{"./$.classof":108,"./$.core":110,"./$.iterators":131,"./$.wks":154}],156:[function(require,module,exports){
var anObject = require('./$.an-object')
  , get      = require('./core.get-iterator-method');
module.exports = require('./$.core').getIterator = function(it){
  var iterFn = get(it);
  if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');
  return anObject(iterFn.call(it));
};
},{"./$.an-object":106,"./$.core":110,"./core.get-iterator-method":155}],157:[function(require,module,exports){
'use strict';
var setUnscope = require('./$.unscope')
  , step       = require('./$.iter-step')
  , Iterators  = require('./$.iterators')
  , toIObject  = require('./$.to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
require('./$.iter-define')(Array, 'Array', function(iterated, kind){
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , kind  = this._k
    , index = this._i++;
  if(!O || index >= O.length){
    this._t = undefined;
    return step(1);
  }
  if(kind == 'keys'  )return step(0, index);
  if(kind == 'values')return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

setUnscope('keys');
setUnscope('values');
setUnscope('entries');
},{"./$.iter-define":128,"./$.iter-step":130,"./$.iterators":131,"./$.to-iobject":149,"./$.unscope":153}],158:[function(require,module,exports){
// 19.1.3.1 Object.assign(target, source)
var $def = require('./$.def');

$def($def.S + $def.F, 'Object', {assign: require('./$.assign')});
},{"./$.assign":107,"./$.def":112}],159:[function(require,module,exports){
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = require('./$.to-iobject');

require('./$.object-sap')('getOwnPropertyDescriptor', function($getOwnPropertyDescriptor){
  return function getOwnPropertyDescriptor(it, key){
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});
},{"./$.object-sap":136,"./$.to-iobject":149}],160:[function(require,module,exports){
// 19.1.2.14 Object.keys(O)
var toObject = require('./$.to-object');

require('./$.object-sap')('keys', function($keys){
  return function keys(it){
    return $keys(toObject(it));
  };
});
},{"./$.object-sap":136,"./$.to-object":151}],161:[function(require,module,exports){
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $def = require('./$.def');
$def($def.S, 'Object', {setPrototypeOf: require('./$.set-proto').set});
},{"./$.def":112,"./$.set-proto":140}],162:[function(require,module,exports){

},{}],163:[function(require,module,exports){
'use strict';
var $          = require('./$')
  , LIBRARY    = require('./$.library')
  , global     = require('./$.global')
  , ctx        = require('./$.ctx')
  , classof    = require('./$.classof')
  , $def       = require('./$.def')
  , isObject   = require('./$.is-object')
  , anObject   = require('./$.an-object')
  , aFunction  = require('./$.a-function')
  , strictNew  = require('./$.strict-new')
  , forOf      = require('./$.for-of')
  , setProto   = require('./$.set-proto').set
  , same       = require('./$.same')
  , species    = require('./$.species')
  , SPECIES    = require('./$.wks')('species')
  , RECORD     = require('./$.uid')('record')
  , asap       = require('./$.microtask')
  , PROMISE    = 'Promise'
  , process    = global.process
  , isNode     = classof(process) == 'process'
  , P          = global[PROMISE]
  , Wrapper;

var testResolve = function(sub){
  var test = new P(function(){});
  if(sub)test.constructor = Object;
  return P.resolve(test) === test;
};

var useNative = function(){
  var works = false;
  function P2(x){
    var self = new P(x);
    setProto(self, P2.prototype);
    return self;
  }
  try {
    works = P && P.resolve && testResolve();
    setProto(P2, P);
    P2.prototype = $.create(P.prototype, {constructor: {value: P2}});
    // actual Firefox has broken subclass support, test that
    if(!(P2.resolve(5).then(function(){}) instanceof P2)){
      works = false;
    }
    // actual V8 bug, https://code.google.com/p/v8/issues/detail?id=4162
    if(works && require('./$.support-desc')){
      var thenableThenGotten = false;
      P.resolve($.setDesc({}, 'then', {
        get: function(){ thenableThenGotten = true; }
      }));
      works = thenableThenGotten;
    }
  } catch(e){ works = false; }
  return works;
}();

// helpers
var isPromise = function(it){
  return isObject(it) && (useNative ? classof(it) == 'Promise' : RECORD in it);
};
var sameConstructor = function(a, b){
  // library wrapper special case
  if(LIBRARY && a === P && b === Wrapper)return true;
  return same(a, b);
};
var getConstructor = function(C){
  var S = anObject(C)[SPECIES];
  return S != undefined ? S : C;
};
var isThenable = function(it){
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function(record, isReject){
  if(record.n)return;
  record.n = true;
  var chain = record.c;
  asap(function(){
    var value = record.v
      , ok    = record.s == 1
      , i     = 0;
    var run = function(react){
      var cb = ok ? react.ok : react.fail
        , ret, then;
      try {
        if(cb){
          if(!ok)record.h = true;
          ret = cb === true ? value : cb(value);
          if(ret === react.P){
            react.rej(TypeError('Promise-chain cycle'));
          } else if(then = isThenable(ret)){
            then.call(ret, react.res, react.rej);
          } else react.res(ret);
        } else react.rej(value);
      } catch(err){
        react.rej(err);
      }
    };
    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
    chain.length = 0;
    record.n = false;
    if(isReject)setTimeout(function(){
      var promise = record.p
        , handler, console;
      if(isUnhandled(promise)){
        if(isNode){
          process.emit('unhandledRejection', value, promise);
        } else if(handler = global.onunhandledrejection){
          handler({promise: promise, reason: value});
        } else if((console = global.console) && console.error){
          console.error('Unhandled promise rejection', value);
        }
      } record.a = undefined;
    }, 1);
  });
};
var isUnhandled = function(promise){
  var record = promise[RECORD]
    , chain  = record.a || record.c
    , i      = 0
    , react;
  if(record.h)return false;
  while(chain.length > i){
    react = chain[i++];
    if(react.fail || !isUnhandled(react.P))return false;
  } return true;
};
var $reject = function(value){
  var record = this;
  if(record.d)return;
  record.d = true;
  record = record.r || record; // unwrap
  record.v = value;
  record.s = 2;
  record.a = record.c.slice();
  notify(record, true);
};
var $resolve = function(value){
  var record = this
    , then;
  if(record.d)return;
  record.d = true;
  record = record.r || record; // unwrap
  try {
    if(then = isThenable(value)){
      asap(function(){
        var wrapper = {r: record, d: false}; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch(e){
          $reject.call(wrapper, e);
        }
      });
    } else {
      record.v = value;
      record.s = 1;
      notify(record, false);
    }
  } catch(e){
    $reject.call({r: record, d: false}, e); // wrap
  }
};

// constructor polyfill
if(!useNative){
  // 25.4.3.1 Promise(executor)
  P = function Promise(executor){
    aFunction(executor);
    var record = {
      p: strictNew(this, P, PROMISE),         // <- promise
      c: [],                                  // <- awaiting reactions
      a: undefined,                           // <- checked in isUnhandled reactions
      s: 0,                                   // <- state
      d: false,                               // <- done
      v: undefined,                           // <- value
      h: false,                               // <- handled rejection
      n: false                                // <- notify
    };
    this[RECORD] = record;
    try {
      executor(ctx($resolve, record, 1), ctx($reject, record, 1));
    } catch(err){
      $reject.call(record, err);
    }
  };
  require('./$.mix')(P.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected){
      var S = anObject(anObject(this).constructor)[SPECIES];
      var react = {
        ok:   typeof onFulfilled == 'function' ? onFulfilled : true,
        fail: typeof onRejected == 'function'  ? onRejected  : false
      };
      var promise = react.P = new (S != undefined ? S : P)(function(res, rej){
        react.res = res;
        react.rej = rej;
      });
      aFunction(react.res);
      aFunction(react.rej);
      var record = this[RECORD];
      record.c.push(react);
      if(record.a)record.a.push(react);
      if(record.s)notify(record, false);
      return promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function(onRejected){
      return this.then(undefined, onRejected);
    }
  });
}

// export
$def($def.G + $def.W + $def.F * !useNative, {Promise: P});
require('./$.tag')(P, PROMISE);
species(P);
species(Wrapper = require('./$.core')[PROMISE]);

// statics
$def($def.S + $def.F * !useNative, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r){
    return new this(function(res, rej){ rej(r); });
  }
});
$def($def.S + $def.F * (!useNative || testResolve(true)), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x){
    return isPromise(x) && sameConstructor(x.constructor, this)
      ? x : new this(function(res){ res(x); });
  }
});
$def($def.S + $def.F * !(useNative && require('./$.iter-detect')(function(iter){
  P.all(iter)['catch'](function(){});
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable){
    var C      = getConstructor(this)
      , values = [];
    return new C(function(res, rej){
      forOf(iterable, false, values.push, values);
      var remaining = values.length
        , results   = Array(remaining);
      if(remaining)$.each.call(values, function(promise, index){
        C.resolve(promise).then(function(value){
          results[index] = value;
          --remaining || res(results);
        }, rej);
      });
      else res(results);
    });
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable){
    var C = getConstructor(this);
    return new C(function(res, rej){
      forOf(iterable, false, function(promise){
        C.resolve(promise).then(res, rej);
      });
    });
  }
});
},{"./$":132,"./$.a-function":105,"./$.an-object":106,"./$.classof":108,"./$.core":110,"./$.ctx":111,"./$.def":112,"./$.for-of":117,"./$.global":118,"./$.is-object":125,"./$.iter-detect":129,"./$.library":133,"./$.microtask":134,"./$.mix":135,"./$.same":139,"./$.set-proto":140,"./$.species":142,"./$.strict-new":143,"./$.support-desc":145,"./$.tag":146,"./$.uid":152,"./$.wks":154}],164:[function(require,module,exports){
'use strict';
var $at  = require('./$.string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./$.iter-define')(String, 'String', function(iterated){
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , index = this._i
    , point;
  if(index >= O.length)return {value: undefined, done: true};
  point = $at(O, index);
  this._i += point.length;
  return {value: point, done: false};
});
},{"./$.iter-define":128,"./$.string-at":144}],165:[function(require,module,exports){
require('./es6.array.iterator');
var Iterators = require('./$.iterators');
Iterators.NodeList = Iterators.HTMLCollection = Iterators.Array;
},{"./$.iterators":131,"./es6.array.iterator":157}],166:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],167:[function(require,module,exports){
/*!
  Copyright (c) 2015 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/

(function () {
	'use strict';

	function classNames () {

		var classes = '';

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if ('string' === argType || 'number' === argType) {
				classes += ' ' + arg;

			} else if (Array.isArray(arg)) {
				classes += ' ' + classNames.apply(null, arg);

			} else if ('object' === argType) {
				for (var key in arg) {
					if (arg.hasOwnProperty(key) && arg[key]) {
						classes += ' ' + key;
					}
				}
			}
		}

		return classes.substr(1);
	}

	if (typeof module !== 'undefined' && module.exports) {
		module.exports = classNames;
	} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd){
		// AMD. Register as an anonymous module.
		define(function () {
			return classNames;
		});
	} else {
		window.classNames = classNames;
	}

}());

},{}],168:[function(require,module,exports){
(function (global){
/**
 * marked - a markdown parser
 * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)
 * https://github.com/chjj/marked
 */

;(function() {

/**
 * Block-Level Grammar
 */

var block = {
  newline: /^\n+/,
  code: /^( {4}[^\n]+\n*)+/,
  fences: noop,
  hr: /^( *[-*_]){3,} *(?:\n+|$)/,
  heading: /^ *(#{1,6}) *([^\n]+?) *#* *(?:\n+|$)/,
  nptable: noop,
  lheading: /^([^\n]+)\n *(=|-){2,} *(?:\n+|$)/,
  blockquote: /^( *>[^\n]+(\n(?!def)[^\n]+)*\n*)+/,
  list: /^( *)(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,
  html: /^ *(?:comment *(?:\n|\s*$)|closed *(?:\n{2,}|\s*$)|closing *(?:\n{2,}|\s*$))/,
  def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +["(]([^\n]+)[")])? *(?:\n+|$)/,
  table: noop,
  paragraph: /^((?:[^\n]+\n?(?!hr|heading|lheading|blockquote|tag|def))+)\n*/,
  text: /^[^\n]+/
};

block.bullet = /(?:[*+-]|\d+\.)/;
block.item = /^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/;
block.item = replace(block.item, 'gm')
  (/bull/g, block.bullet)
  ();

block.list = replace(block.list)
  (/bull/g, block.bullet)
  ('hr', '\\n+(?=\\1?(?:[-*_] *){3,}(?:\\n+|$))')
  ('def', '\\n+(?=' + block.def.source + ')')
  ();

block.blockquote = replace(block.blockquote)
  ('def', block.def)
  ();

block._tag = '(?!(?:'
  + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'
  + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'
  + '|span|br|wbr|ins|del|img)\\b)\\w+(?!:/|[^\\w\\s@]*@)\\b';

block.html = replace(block.html)
  ('comment', /<!--[\s\S]*?-->/)
  ('closed', /<(tag)[\s\S]+?<\/\1>/)
  ('closing', /<tag(?:"[^"]*"|'[^']*'|[^'">])*?>/)
  (/tag/g, block._tag)
  ();

block.paragraph = replace(block.paragraph)
  ('hr', block.hr)
  ('heading', block.heading)
  ('lheading', block.lheading)
  ('blockquote', block.blockquote)
  ('tag', '<' + block._tag)
  ('def', block.def)
  ();

/**
 * Normal Block Grammar
 */

block.normal = merge({}, block);

/**
 * GFM Block Grammar
 */

block.gfm = merge({}, block.normal, {
  fences: /^ *(`{3,}|~{3,})[ \.]*(\S+)? *\n([\s\S]*?)\s*\1 *(?:\n+|$)/,
  paragraph: /^/,
  heading: /^ *(#{1,6}) +([^\n]+?) *#* *(?:\n+|$)/
});

block.gfm.paragraph = replace(block.paragraph)
  ('(?!', '(?!'
    + block.gfm.fences.source.replace('\\1', '\\2') + '|'
    + block.list.source.replace('\\1', '\\3') + '|')
  ();

/**
 * GFM + Tables Block Grammar
 */

block.tables = merge({}, block.gfm, {
  nptable: /^ *(\S.*\|.*)\n *([-:]+ *\|[-| :]*)\n((?:.*\|.*(?:\n|$))*)\n*/,
  table: /^ *\|(.+)\n *\|( *[-:]+[-| :]*)\n((?: *\|.*(?:\n|$))*)\n*/
});

/**
 * Block Lexer
 */

function Lexer(options) {
  this.tokens = [];
  this.tokens.links = {};
  this.options = options || marked.defaults;
  this.rules = block.normal;

  if (this.options.gfm) {
    if (this.options.tables) {
      this.rules = block.tables;
    } else {
      this.rules = block.gfm;
    }
  }
}

/**
 * Expose Block Rules
 */

Lexer.rules = block;

/**
 * Static Lex Method
 */

Lexer.lex = function(src, options) {
  var lexer = new Lexer(options);
  return lexer.lex(src);
};

/**
 * Preprocessing
 */

Lexer.prototype.lex = function(src) {
  src = src
    .replace(/\r\n|\r/g, '\n')
    .replace(/\t/g, '    ')
    .replace(/\u00a0/g, ' ')
    .replace(/\u2424/g, '\n');

  return this.token(src, true);
};

/**
 * Lexing
 */

Lexer.prototype.token = function(src, top, bq) {
  var src = src.replace(/^ +$/gm, '')
    , next
    , loose
    , cap
    , bull
    , b
    , item
    , space
    , i
    , l;

  while (src) {
    // newline
    if (cap = this.rules.newline.exec(src)) {
      src = src.substring(cap[0].length);
      if (cap[0].length > 1) {
        this.tokens.push({
          type: 'space'
        });
      }
    }

    // code
    if (cap = this.rules.code.exec(src)) {
      src = src.substring(cap[0].length);
      cap = cap[0].replace(/^ {4}/gm, '');
      this.tokens.push({
        type: 'code',
        text: !this.options.pedantic
          ? cap.replace(/\n+$/, '')
          : cap
      });
      continue;
    }

    // fences (gfm)
    if (cap = this.rules.fences.exec(src)) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'code',
        lang: cap[2],
        text: cap[3] || ''
      });
      continue;
    }

    // heading
    if (cap = this.rules.heading.exec(src)) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'heading',
        depth: cap[1].length,
        text: cap[2]
      });
      continue;
    }

    // table no leading pipe (gfm)
    if (top && (cap = this.rules.nptable.exec(src))) {
      src = src.substring(cap[0].length);

      item = {
        type: 'table',
        header: cap[1].replace(/^ *| *\| *$/g, '').split(/ *\| */),
        align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
        cells: cap[3].replace(/\n$/, '').split('\n')
      };

      for (i = 0; i < item.align.length; i++) {
        if (/^ *-+: *$/.test(item.align[i])) {
          item.align[i] = 'right';
        } else if (/^ *:-+: *$/.test(item.align[i])) {
          item.align[i] = 'center';
        } else if (/^ *:-+ *$/.test(item.align[i])) {
          item.align[i] = 'left';
        } else {
          item.align[i] = null;
        }
      }

      for (i = 0; i < item.cells.length; i++) {
        item.cells[i] = item.cells[i].split(/ *\| */);
      }

      this.tokens.push(item);

      continue;
    }

    // lheading
    if (cap = this.rules.lheading.exec(src)) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'heading',
        depth: cap[2] === '=' ? 1 : 2,
        text: cap[1]
      });
      continue;
    }

    // hr
    if (cap = this.rules.hr.exec(src)) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'hr'
      });
      continue;
    }

    // blockquote
    if (cap = this.rules.blockquote.exec(src)) {
      src = src.substring(cap[0].length);

      this.tokens.push({
        type: 'blockquote_start'
      });

      cap = cap[0].replace(/^ *> ?/gm, '');

      // Pass `top` to keep the current
      // "toplevel" state. This is exactly
      // how markdown.pl works.
      this.token(cap, top, true);

      this.tokens.push({
        type: 'blockquote_end'
      });

      continue;
    }

    // list
    if (cap = this.rules.list.exec(src)) {
      src = src.substring(cap[0].length);
      bull = cap[2];

      this.tokens.push({
        type: 'list_start',
        ordered: bull.length > 1
      });

      // Get each top-level item.
      cap = cap[0].match(this.rules.item);

      next = false;
      l = cap.length;
      i = 0;

      for (; i < l; i++) {
        item = cap[i];

        // Remove the list item's bullet
        // so it is seen as the next token.
        space = item.length;
        item = item.replace(/^ *([*+-]|\d+\.) +/, '');

        // Outdent whatever the
        // list item contains. Hacky.
        if (~item.indexOf('\n ')) {
          space -= item.length;
          item = !this.options.pedantic
            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')
            : item.replace(/^ {1,4}/gm, '');
        }

        // Determine whether the next list item belongs here.
        // Backpedal if it does not belong in this list.
        if (this.options.smartLists && i !== l - 1) {
          b = block.bullet.exec(cap[i + 1])[0];
          if (bull !== b && !(bull.length > 1 && b.length > 1)) {
            src = cap.slice(i + 1).join('\n') + src;
            i = l - 1;
          }
        }

        // Determine whether item is loose or not.
        // Use: /(^|\n)(?! )[^\n]+\n\n(?!\s*$)/
        // for discount behavior.
        loose = next || /\n\n(?!\s*$)/.test(item);
        if (i !== l - 1) {
          next = item.charAt(item.length - 1) === '\n';
          if (!loose) loose = next;
        }

        this.tokens.push({
          type: loose
            ? 'loose_item_start'
            : 'list_item_start'
        });

        // Recurse.
        this.token(item, false, bq);

        this.tokens.push({
          type: 'list_item_end'
        });
      }

      this.tokens.push({
        type: 'list_end'
      });

      continue;
    }

    // html
    if (cap = this.rules.html.exec(src)) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: this.options.sanitize
          ? 'paragraph'
          : 'html',
        pre: !this.options.sanitizer
          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),
        text: cap[0]
      });
      continue;
    }

    // def
    if ((!bq && top) && (cap = this.rules.def.exec(src))) {
      src = src.substring(cap[0].length);
      this.tokens.links[cap[1].toLowerCase()] = {
        href: cap[2],
        title: cap[3]
      };
      continue;
    }

    // table (gfm)
    if (top && (cap = this.rules.table.exec(src))) {
      src = src.substring(cap[0].length);

      item = {
        type: 'table',
        header: cap[1].replace(/^ *| *\| *$/g, '').split(/ *\| */),
        align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
        cells: cap[3].replace(/(?: *\| *)?\n$/, '').split('\n')
      };

      for (i = 0; i < item.align.length; i++) {
        if (/^ *-+: *$/.test(item.align[i])) {
          item.align[i] = 'right';
        } else if (/^ *:-+: *$/.test(item.align[i])) {
          item.align[i] = 'center';
        } else if (/^ *:-+ *$/.test(item.align[i])) {
          item.align[i] = 'left';
        } else {
          item.align[i] = null;
        }
      }

      for (i = 0; i < item.cells.length; i++) {
        item.cells[i] = item.cells[i]
          .replace(/^ *\| *| *\| *$/g, '')
          .split(/ *\| */);
      }

      this.tokens.push(item);

      continue;
    }

    // top-level paragraph
    if (top && (cap = this.rules.paragraph.exec(src))) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'paragraph',
        text: cap[1].charAt(cap[1].length - 1) === '\n'
          ? cap[1].slice(0, -1)
          : cap[1]
      });
      continue;
    }

    // text
    if (cap = this.rules.text.exec(src)) {
      // Top-level should never reach here.
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'text',
        text: cap[0]
      });
      continue;
    }

    if (src) {
      throw new
        Error('Infinite loop on byte: ' + src.charCodeAt(0));
    }
  }

  return this.tokens;
};

/**
 * Inline-Level Grammar
 */

var inline = {
  escape: /^\\([\\`*{}\[\]()#+\-.!_>])/,
  autolink: /^<([^ >]+(@|:\/)[^ >]+)>/,
  url: noop,
  tag: /^<!--[\s\S]*?-->|^<\/?\w+(?:"[^"]*"|'[^']*'|[^'">])*?>/,
  link: /^!?\[(inside)\]\(href\)/,
  reflink: /^!?\[(inside)\]\s*\[([^\]]*)\]/,
  nolink: /^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]/,
  strong: /^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/,
  em: /^\b_((?:[^_]|__)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,
  code: /^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/,
  br: /^ {2,}\n(?!\s*$)/,
  del: noop,
  text: /^[\s\S]+?(?=[\\<!\[_*`]| {2,}\n|$)/
};

inline._inside = /(?:\[[^\]]*\]|[^\[\]]|\](?=[^\[]*\]))*/;
inline._href = /\s*<?([\s\S]*?)>?(?:\s+['"]([\s\S]*?)['"])?\s*/;

inline.link = replace(inline.link)
  ('inside', inline._inside)
  ('href', inline._href)
  ();

inline.reflink = replace(inline.reflink)
  ('inside', inline._inside)
  ();

/**
 * Normal Inline Grammar
 */

inline.normal = merge({}, inline);

/**
 * Pedantic Inline Grammar
 */

inline.pedantic = merge({}, inline.normal, {
  strong: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
  em: /^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/
});

/**
 * GFM Inline Grammar
 */

inline.gfm = merge({}, inline.normal, {
  escape: replace(inline.escape)('])', '~|])')(),
  url: /^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/,
  del: /^~~(?=\S)([\s\S]*?\S)~~/,
  text: replace(inline.text)
    (']|', '~]|')
    ('|', '|https?://|')
    ()
});

/**
 * GFM + Line Breaks Inline Grammar
 */

inline.breaks = merge({}, inline.gfm, {
  br: replace(inline.br)('{2,}', '*')(),
  text: replace(inline.gfm.text)('{2,}', '*')()
});

/**
 * Inline Lexer & Compiler
 */

function InlineLexer(links, options) {
  this.options = options || marked.defaults;
  this.links = links;
  this.rules = inline.normal;
  this.renderer = this.options.renderer || new Renderer;
  this.renderer.options = this.options;

  if (!this.links) {
    throw new
      Error('Tokens array requires a `links` property.');
  }

  if (this.options.gfm) {
    if (this.options.breaks) {
      this.rules = inline.breaks;
    } else {
      this.rules = inline.gfm;
    }
  } else if (this.options.pedantic) {
    this.rules = inline.pedantic;
  }
}

/**
 * Expose Inline Rules
 */

InlineLexer.rules = inline;

/**
 * Static Lexing/Compiling Method
 */

InlineLexer.output = function(src, links, options) {
  var inline = new InlineLexer(links, options);
  return inline.output(src);
};

/**
 * Lexing/Compiling
 */

InlineLexer.prototype.output = function(src) {
  var out = ''
    , link
    , text
    , href
    , cap;

  while (src) {
    // escape
    if (cap = this.rules.escape.exec(src)) {
      src = src.substring(cap[0].length);
      out += cap[1];
      continue;
    }

    // autolink
    if (cap = this.rules.autolink.exec(src)) {
      src = src.substring(cap[0].length);
      if (cap[2] === '@') {
        text = cap[1].charAt(6) === ':'
          ? this.mangle(cap[1].substring(7))
          : this.mangle(cap[1]);
        href = this.mangle('mailto:') + text;
      } else {
        text = escape(cap[1]);
        href = text;
      }
      out += this.renderer.link(href, null, text);
      continue;
    }

    // url (gfm)
    if (!this.inLink && (cap = this.rules.url.exec(src))) {
      src = src.substring(cap[0].length);
      text = escape(cap[1]);
      href = text;
      out += this.renderer.link(href, null, text);
      continue;
    }

    // tag
    if (cap = this.rules.tag.exec(src)) {
      if (!this.inLink && /^<a /i.test(cap[0])) {
        this.inLink = true;
      } else if (this.inLink && /^<\/a>/i.test(cap[0])) {
        this.inLink = false;
      }
      src = src.substring(cap[0].length);
      out += this.options.sanitize
        ? this.options.sanitizer
          ? this.options.sanitizer(cap[0])
          : escape(cap[0])
        : cap[0]
      continue;
    }

    // link
    if (cap = this.rules.link.exec(src)) {
      src = src.substring(cap[0].length);
      this.inLink = true;
      out += this.outputLink(cap, {
        href: cap[2],
        title: cap[3]
      });
      this.inLink = false;
      continue;
    }

    // reflink, nolink
    if ((cap = this.rules.reflink.exec(src))
        || (cap = this.rules.nolink.exec(src))) {
      src = src.substring(cap[0].length);
      link = (cap[2] || cap[1]).replace(/\s+/g, ' ');
      link = this.links[link.toLowerCase()];
      if (!link || !link.href) {
        out += cap[0].charAt(0);
        src = cap[0].substring(1) + src;
        continue;
      }
      this.inLink = true;
      out += this.outputLink(cap, link);
      this.inLink = false;
      continue;
    }

    // strong
    if (cap = this.rules.strong.exec(src)) {
      src = src.substring(cap[0].length);
      out += this.renderer.strong(this.output(cap[2] || cap[1]));
      continue;
    }

    // em
    if (cap = this.rules.em.exec(src)) {
      src = src.substring(cap[0].length);
      out += this.renderer.em(this.output(cap[2] || cap[1]));
      continue;
    }

    // code
    if (cap = this.rules.code.exec(src)) {
      src = src.substring(cap[0].length);
      out += this.renderer.codespan(escape(cap[2], true));
      continue;
    }

    // br
    if (cap = this.rules.br.exec(src)) {
      src = src.substring(cap[0].length);
      out += this.renderer.br();
      continue;
    }

    // del (gfm)
    if (cap = this.rules.del.exec(src)) {
      src = src.substring(cap[0].length);
      out += this.renderer.del(this.output(cap[1]));
      continue;
    }

    // text
    if (cap = this.rules.text.exec(src)) {
      src = src.substring(cap[0].length);
      out += this.renderer.text(escape(this.smartypants(cap[0])));
      continue;
    }

    if (src) {
      throw new
        Error('Infinite loop on byte: ' + src.charCodeAt(0));
    }
  }

  return out;
};

/**
 * Compile Link
 */

InlineLexer.prototype.outputLink = function(cap, link) {
  var href = escape(link.href)
    , title = link.title ? escape(link.title) : null;

  return cap[0].charAt(0) !== '!'
    ? this.renderer.link(href, title, this.output(cap[1]))
    : this.renderer.image(href, title, escape(cap[1]));
};

/**
 * Smartypants Transformations
 */

InlineLexer.prototype.smartypants = function(text) {
  if (!this.options.smartypants) return text;
  return text
    // em-dashes
    .replace(/---/g, '\u2014')
    // en-dashes
    .replace(/--/g, '\u2013')
    // opening singles
    .replace(/(^|[-\u2014/(\[{"\s])'/g, '$1\u2018')
    // closing singles & apostrophes
    .replace(/'/g, '\u2019')
    // opening doubles
    .replace(/(^|[-\u2014/(\[{\u2018\s])"/g, '$1\u201c')
    // closing doubles
    .replace(/"/g, '\u201d')
    // ellipses
    .replace(/\.{3}/g, '\u2026');
};

/**
 * Mangle Links
 */

InlineLexer.prototype.mangle = function(text) {
  if (!this.options.mangle) return text;
  var out = ''
    , l = text.length
    , i = 0
    , ch;

  for (; i < l; i++) {
    ch = text.charCodeAt(i);
    if (Math.random() > 0.5) {
      ch = 'x' + ch.toString(16);
    }
    out += '&#' + ch + ';';
  }

  return out;
};

/**
 * Renderer
 */

function Renderer(options) {
  this.options = options || {};
}

Renderer.prototype.code = function(code, lang, escaped) {
  if (this.options.highlight) {
    var out = this.options.highlight(code, lang);
    if (out != null && out !== code) {
      escaped = true;
      code = out;
    }
  }

  if (!lang) {
    return '<pre><code>'
      + (escaped ? code : escape(code, true))
      + '\n</code></pre>';
  }

  return '<pre><code class="'
    + this.options.langPrefix
    + escape(lang, true)
    + '">'
    + (escaped ? code : escape(code, true))
    + '\n</code></pre>\n';
};

Renderer.prototype.blockquote = function(quote) {
  return '<blockquote>\n' + quote + '</blockquote>\n';
};

Renderer.prototype.html = function(html) {
  return html;
};

Renderer.prototype.heading = function(text, level, raw) {
  return '<h'
    + level
    + ' id="'
    + this.options.headerPrefix
    + raw.toLowerCase().replace(/[^\w]+/g, '-')
    + '">'
    + text
    + '</h'
    + level
    + '>\n';
};

Renderer.prototype.hr = function() {
  return this.options.xhtml ? '<hr/>\n' : '<hr>\n';
};

Renderer.prototype.list = function(body, ordered) {
  var type = ordered ? 'ol' : 'ul';
  return '<' + type + '>\n' + body + '</' + type + '>\n';
};

Renderer.prototype.listitem = function(text) {
  return '<li>' + text + '</li>\n';
};

Renderer.prototype.paragraph = function(text) {
  return '<p>' + text + '</p>\n';
};

Renderer.prototype.table = function(header, body) {
  return '<table>\n'
    + '<thead>\n'
    + header
    + '</thead>\n'
    + '<tbody>\n'
    + body
    + '</tbody>\n'
    + '</table>\n';
};

Renderer.prototype.tablerow = function(content) {
  return '<tr>\n' + content + '</tr>\n';
};

Renderer.prototype.tablecell = function(content, flags) {
  var type = flags.header ? 'th' : 'td';
  var tag = flags.align
    ? '<' + type + ' style="text-align:' + flags.align + '">'
    : '<' + type + '>';
  return tag + content + '</' + type + '>\n';
};

// span level renderer
Renderer.prototype.strong = function(text) {
  return '<strong>' + text + '</strong>';
};

Renderer.prototype.em = function(text) {
  return '<em>' + text + '</em>';
};

Renderer.prototype.codespan = function(text) {
  return '<code>' + text + '</code>';
};

Renderer.prototype.br = function() {
  return this.options.xhtml ? '<br/>' : '<br>';
};

Renderer.prototype.del = function(text) {
  return '<del>' + text + '</del>';
};

Renderer.prototype.link = function(href, title, text) {
  if (this.options.sanitize) {
    try {
      var prot = decodeURIComponent(unescape(href))
        .replace(/[^\w:]/g, '')
        .toLowerCase();
    } catch (e) {
      return '';
    }
    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0) {
      return '';
    }
  }
  var out = '<a href="' + href + '"';
  if (title) {
    out += ' title="' + title + '"';
  }
  out += '>' + text + '</a>';
  return out;
};

Renderer.prototype.image = function(href, title, text) {
  var out = '<img src="' + href + '" alt="' + text + '"';
  if (title) {
    out += ' title="' + title + '"';
  }
  out += this.options.xhtml ? '/>' : '>';
  return out;
};

Renderer.prototype.text = function(text) {
  return text;
};

/**
 * Parsing & Compiling
 */

function Parser(options) {
  this.tokens = [];
  this.token = null;
  this.options = options || marked.defaults;
  this.options.renderer = this.options.renderer || new Renderer;
  this.renderer = this.options.renderer;
  this.renderer.options = this.options;
}

/**
 * Static Parse Method
 */

Parser.parse = function(src, options, renderer) {
  var parser = new Parser(options, renderer);
  return parser.parse(src);
};

/**
 * Parse Loop
 */

Parser.prototype.parse = function(src) {
  this.inline = new InlineLexer(src.links, this.options, this.renderer);
  this.tokens = src.reverse();

  var out = '';
  while (this.next()) {
    out += this.tok();
  }

  return out;
};

/**
 * Next Token
 */

Parser.prototype.next = function() {
  return this.token = this.tokens.pop();
};

/**
 * Preview Next Token
 */

Parser.prototype.peek = function() {
  return this.tokens[this.tokens.length - 1] || 0;
};

/**
 * Parse Text Tokens
 */

Parser.prototype.parseText = function() {
  var body = this.token.text;

  while (this.peek().type === 'text') {
    body += '\n' + this.next().text;
  }

  return this.inline.output(body);
};

/**
 * Parse Current Token
 */

Parser.prototype.tok = function() {
  switch (this.token.type) {
    case 'space': {
      return '';
    }
    case 'hr': {
      return this.renderer.hr();
    }
    case 'heading': {
      return this.renderer.heading(
        this.inline.output(this.token.text),
        this.token.depth,
        this.token.text);
    }
    case 'code': {
      return this.renderer.code(this.token.text,
        this.token.lang,
        this.token.escaped);
    }
    case 'table': {
      var header = ''
        , body = ''
        , i
        , row
        , cell
        , flags
        , j;

      // header
      cell = '';
      for (i = 0; i < this.token.header.length; i++) {
        flags = { header: true, align: this.token.align[i] };
        cell += this.renderer.tablecell(
          this.inline.output(this.token.header[i]),
          { header: true, align: this.token.align[i] }
        );
      }
      header += this.renderer.tablerow(cell);

      for (i = 0; i < this.token.cells.length; i++) {
        row = this.token.cells[i];

        cell = '';
        for (j = 0; j < row.length; j++) {
          cell += this.renderer.tablecell(
            this.inline.output(row[j]),
            { header: false, align: this.token.align[j] }
          );
        }

        body += this.renderer.tablerow(cell);
      }
      return this.renderer.table(header, body);
    }
    case 'blockquote_start': {
      var body = '';

      while (this.next().type !== 'blockquote_end') {
        body += this.tok();
      }

      return this.renderer.blockquote(body);
    }
    case 'list_start': {
      var body = ''
        , ordered = this.token.ordered;

      while (this.next().type !== 'list_end') {
        body += this.tok();
      }

      return this.renderer.list(body, ordered);
    }
    case 'list_item_start': {
      var body = '';

      while (this.next().type !== 'list_item_end') {
        body += this.token.type === 'text'
          ? this.parseText()
          : this.tok();
      }

      return this.renderer.listitem(body);
    }
    case 'loose_item_start': {
      var body = '';

      while (this.next().type !== 'list_item_end') {
        body += this.tok();
      }

      return this.renderer.listitem(body);
    }
    case 'html': {
      var html = !this.token.pre && !this.options.pedantic
        ? this.inline.output(this.token.text)
        : this.token.text;
      return this.renderer.html(html);
    }
    case 'paragraph': {
      return this.renderer.paragraph(this.inline.output(this.token.text));
    }
    case 'text': {
      return this.renderer.paragraph(this.parseText());
    }
  }
};

/**
 * Helpers
 */

function escape(html, encode) {
  return html
    .replace(!encode ? /&(?!#?\w+;)/g : /&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#39;');
}

function unescape(html) {
  return html.replace(/&([#\w]+);/g, function(_, n) {
    n = n.toLowerCase();
    if (n === 'colon') return ':';
    if (n.charAt(0) === '#') {
      return n.charAt(1) === 'x'
        ? String.fromCharCode(parseInt(n.substring(2), 16))
        : String.fromCharCode(+n.substring(1));
    }
    return '';
  });
}

function replace(regex, opt) {
  regex = regex.source;
  opt = opt || '';
  return function self(name, val) {
    if (!name) return new RegExp(regex, opt);
    val = val.source || val;
    val = val.replace(/(^|[^\[])\^/g, '$1');
    regex = regex.replace(name, val);
    return self;
  };
}

function noop() {}
noop.exec = noop;

function merge(obj) {
  var i = 1
    , target
    , key;

  for (; i < arguments.length; i++) {
    target = arguments[i];
    for (key in target) {
      if (Object.prototype.hasOwnProperty.call(target, key)) {
        obj[key] = target[key];
      }
    }
  }

  return obj;
}


/**
 * Marked
 */

function marked(src, opt, callback) {
  if (callback || typeof opt === 'function') {
    if (!callback) {
      callback = opt;
      opt = null;
    }

    opt = merge({}, marked.defaults, opt || {});

    var highlight = opt.highlight
      , tokens
      , pending
      , i = 0;

    try {
      tokens = Lexer.lex(src, opt)
    } catch (e) {
      return callback(e);
    }

    pending = tokens.length;

    var done = function(err) {
      if (err) {
        opt.highlight = highlight;
        return callback(err);
      }

      var out;

      try {
        out = Parser.parse(tokens, opt);
      } catch (e) {
        err = e;
      }

      opt.highlight = highlight;

      return err
        ? callback(err)
        : callback(null, out);
    };

    if (!highlight || highlight.length < 3) {
      return done();
    }

    delete opt.highlight;

    if (!pending) return done();

    for (; i < tokens.length; i++) {
      (function(token) {
        if (token.type !== 'code') {
          return --pending || done();
        }
        return highlight(token.text, token.lang, function(err, code) {
          if (err) return done(err);
          if (code == null || code === token.text) {
            return --pending || done();
          }
          token.text = code;
          token.escaped = true;
          --pending || done();
        });
      })(tokens[i]);
    }

    return;
  }
  try {
    if (opt) opt = merge({}, marked.defaults, opt);
    return Parser.parse(Lexer.lex(src, opt), opt);
  } catch (e) {
    e.message += '\nPlease report this to https://github.com/chjj/marked.';
    if ((opt || marked.defaults).silent) {
      return '<p>An error occured:</p><pre>'
        + escape(e.message + '', true)
        + '</pre>';
    }
    throw e;
  }
}

/**
 * Options
 */

marked.options =
marked.setOptions = function(opt) {
  merge(marked.defaults, opt);
  return marked;
};

marked.defaults = {
  gfm: true,
  tables: true,
  breaks: false,
  pedantic: false,
  sanitize: false,
  sanitizer: null,
  mangle: true,
  smartLists: false,
  silent: false,
  highlight: null,
  langPrefix: 'lang-',
  smartypants: false,
  headerPrefix: '',
  renderer: new Renderer,
  xhtml: false
};

/**
 * Expose
 */

marked.Parser = Parser;
marked.parser = Parser.parse;

marked.Renderer = Renderer;

marked.Lexer = Lexer;
marked.lexer = Lexer.lex;

marked.InlineLexer = InlineLexer;
marked.inlineLexer = InlineLexer.output;

marked.parse = marked;

if (typeof module !== 'undefined' && typeof exports === 'object') {
  module.exports = marked;
} else if (typeof define === 'function' && define.amd) {
  define(function() { return marked; });
} else {
  this.marked = marked;
}

}).call(function() {
  return this || (typeof window !== 'undefined' ? window : global);
}());

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],169:[function(require,module,exports){
//! moment.js
//! version : 2.10.6
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.moment = factory()
}(this, function () { 'use strict';

    var hookCallback;

    function utils_hooks__hooks () {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback (callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return Object.prototype.toString.call(input) === '[object Array]';
    }

    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }

    function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function create_utc__createUTC (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty           : false,
            unusedTokens    : [],
            unusedInput     : [],
            overflow        : -2,
            charsLeftOver   : 0,
            nullInput       : false,
            invalidMonth    : null,
            invalidFormat   : false,
            userInvalidated : false,
            iso             : false
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    function valid__isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            m._isValid = !isNaN(m._d.getTime()) &&
                flags.overflow < 0 &&
                !flags.empty &&
                !flags.invalidMonth &&
                !flags.invalidWeekday &&
                !flags.nullInput &&
                !flags.invalidFormat &&
                !flags.userInvalidated;

            if (m._strict) {
                m._isValid = m._isValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }
        }
        return m._isValid;
    }

    function valid__createInvalid (flags) {
        var m = create_utc__createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        }
        else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    var momentProperties = utils_hooks__hooks.momentProperties = [];

    function copyConfig(to, from) {
        var i, prop, val;

        if (typeof from._isAMomentObject !== 'undefined') {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (typeof from._i !== 'undefined') {
            to._i = from._i;
        }
        if (typeof from._f !== 'undefined') {
            to._f = from._f;
        }
        if (typeof from._l !== 'undefined') {
            to._l = from._l;
        }
        if (typeof from._strict !== 'undefined') {
            to._strict = from._strict;
        }
        if (typeof from._tzm !== 'undefined') {
            to._tzm = from._tzm;
        }
        if (typeof from._isUTC !== 'undefined') {
            to._isUTC = from._isUTC;
        }
        if (typeof from._offset !== 'undefined') {
            to._offset = from._offset;
        }
        if (typeof from._pf !== 'undefined') {
            to._pf = getParsingFlags(from);
        }
        if (typeof from._locale !== 'undefined') {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i in momentProperties) {
                prop = momentProperties[i];
                val = from[prop];
                if (typeof val !== 'undefined') {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    var updateInProgress = false;

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            utils_hooks__hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment (obj) {
        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
    }

    function absFloor (number) {
        if (number < 0) {
            return Math.ceil(number);
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function Locale() {
    }

    var locales = {};
    var globalLocale;

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return null;
    }

    function loadLocale(name) {
        var oldLocale = null;
        // TODO: Find a better way to register and load all the locales in Node
        if (!locales[name] && typeof module !== 'undefined' &&
                module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                require('./locale/' + name);
                // because defineLocale currently also sets the global locale, we
                // want to undo that for lazy loaded locales
                locale_locales__getSetGlobalLocale(oldLocale);
            } catch (e) { }
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function locale_locales__getSetGlobalLocale (key, values) {
        var data;
        if (key) {
            if (typeof values === 'undefined') {
                data = locale_locales__getLocale(key);
            }
            else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale (name, values) {
        if (values !== null) {
            values.abbr = name;
            locales[name] = locales[name] || new Locale();
            locales[name].set(values);

            // backwards compat for now: also set the locale
            locale_locales__getSetGlobalLocale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    // returns locale data
    function locale_locales__getLocale (key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    var aliases = {};

    function addUnitAlias (unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    function makeGetSet (unit, keepTime) {
        return function (value) {
            if (value != null) {
                get_set__set(this, unit, value);
                utils_hooks__hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get_set__get(this, unit);
            }
        };
    }

    function get_set__get (mom, unit) {
        return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();
    }

    function get_set__set (mom, unit, value) {
        return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
    }

    // MOMENTS

    function getSet (units, value) {
        var unit;
        if (typeof units === 'object') {
            for (unit in units) {
                this.set(unit, units[unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (typeof this[units] === 'function') {
                return this[units](value);
            }
        }
        return this;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

    var formatFunctions = {};

    var formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken (token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '';
            for (i = 0; i < length; i++) {
                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var match1         = /\d/;            //       0 - 9
    var match2         = /\d\d/;          //      00 - 99
    var match3         = /\d{3}/;         //     000 - 999
    var match4         = /\d{4}/;         //    0000 - 9999
    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
    var match1to2      = /\d\d?/;         //       0 - 99
    var match1to3      = /\d{1,3}/;       //       0 - 999
    var match1to4      = /\d{1,4}/;       //       0 - 9999
    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

    var matchUnsigned  = /\d+/;           //       0 - inf
    var matchSigned    = /[+-]?\d+/;      //    -inf - inf

    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z

    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

    // any word (or two) characters or numbers including two/three word month in arabic.
    var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;

    var regexes = {};

    function isFunction (sth) {
        // https://github.com/moment/moment/issues/2325
        return typeof sth === 'function' &&
            Object.prototype.toString.call(sth) === '[object Function]';
    }


    function addRegexToken (token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict) {
            return (isStrict && strictRegex) ? strictRegex : regex;
        };
    }

    function getParseRegexForToken (token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }).replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken (token, callback) {
        var i, func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (typeof callback === 'number') {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken (token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;

    function daysInMonth(year, month) {
        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PARSING

    addRegexToken('M',    match1to2);
    addRegexToken('MM',   match1to2, match2);
    addRegexToken('MMM',  matchWord);
    addRegexToken('MMMM', matchWord);

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths (m) {
        return this._months[m.month()];
    }

    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort (m) {
        return this._monthsShort[m.month()];
    }

    function localeMonthsParse (monthName, format, strict) {
        var i, mom, regex;

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = create_utc__createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth (mom, value) {
        var dayOfMonth;

        // TODO: Move this out of here!
        if (typeof value === 'string') {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (typeof value !== 'number') {
                return mom;
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth (value) {
        if (value != null) {
            setMonth(this, value);
            utils_hooks__hooks.updateOffset(this, true);
            return this;
        } else {
            return get_set__get(this, 'Month');
        }
    }

    function getDaysInMonth () {
        return daysInMonth(this.year(), this.month());
    }

    function checkOverflow (m) {
        var overflow;
        var a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    function warn(msg) {
        if (utils_hooks__hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (firstTime) {
                warn(msg + '\n' + (new Error()).stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    utils_hooks__hooks.suppressDeprecationWarnings = false;

    var from_string__isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

    var isoDates = [
        ['YYYYYY-MM-DD', /[+-]\d{6}-\d{2}-\d{2}/],
        ['YYYY-MM-DD', /\d{4}-\d{2}-\d{2}/],
        ['GGGG-[W]WW-E', /\d{4}-W\d{2}-\d/],
        ['GGGG-[W]WW', /\d{4}-W\d{2}/],
        ['YYYY-DDD', /\d{4}-\d{3}/]
    ];

    // iso time formats and regexes
    var isoTimes = [
        ['HH:mm:ss.SSSS', /(T| )\d\d:\d\d:\d\d\.\d+/],
        ['HH:mm:ss', /(T| )\d\d:\d\d:\d\d/],
        ['HH:mm', /(T| )\d\d:\d\d/],
        ['HH', /(T| )\d\d/]
    ];

    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

    // date from iso format
    function configFromISO(config) {
        var i, l,
            string = config._i,
            match = from_string__isoRegex.exec(string);

        if (match) {
            getParsingFlags(config).iso = true;
            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(string)) {
                    config._f = isoDates[i][0];
                    break;
                }
            }
            for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(string)) {
                    // match[6] should be 'T' or space
                    config._f += (match[6] || ' ') + isoTimes[i][0];
                    break;
                }
            }
            if (string.match(matchOffset)) {
                config._f += 'Z';
            }
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);

        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
            utils_hooks__hooks.createFromInputFallback(config);
        }
    }

    utils_hooks__hooks.createFromInputFallback = deprecate(
        'moment construction falls back to js Date. This is ' +
        'discouraged and will be removed in upcoming major ' +
        'release. Please refer to ' +
        'https://github.com/moment/moment/issues/1407 for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    function createDate (y, m, d, h, M, s, ms) {
        //can't just apply() to create a date:
        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
        var date = new Date(y, m, d, h, M, s, ms);

        //the date constructor doesn't accept years < 1970
        if (y < 1970) {
            date.setFullYear(y);
        }
        return date;
    }

    function createUTCDate (y) {
        var date = new Date(Date.UTC.apply(null, arguments));
        if (y < 1970) {
            date.setUTCFullYear(y);
        }
        return date;
    }

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY',   4],       0, 'year');
    addFormatToken(0, ['YYYYY',  5],       0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PARSING

    addRegexToken('Y',      matchSigned);
    addRegexToken('YY',     match1to2, match2);
    addRegexToken('YYYY',   match1to4, match4);
    addRegexToken('YYYYY',  match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    // HOOKS

    utils_hooks__hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', false);

    function getIsLeapYear () {
        return isLeapYear(this.year());
    }

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PARSING

    addRegexToken('w',  match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W',  match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // firstDayOfWeek       0 = sun, 6 = sat
    //                      the day of the week that starts the week
    //                      (usually sunday or monday)
    // firstDayOfWeekOfYear 0 = sun, 6 = sat
    //                      the first week is the week that contains the first
    //                      of this day of the week
    //                      (eg. ISO weeks use thursday (4))
    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
        var end = firstDayOfWeekOfYear - firstDayOfWeek,
            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),
            adjustedMoment;


        if (daysToDayOfWeek > end) {
            daysToDayOfWeek -= 7;
        }

        if (daysToDayOfWeek < end - 7) {
            daysToDayOfWeek += 7;
        }

        adjustedMoment = local__createLocal(mom).add(daysToDayOfWeek, 'd');
        return {
            week: Math.ceil(adjustedMoment.dayOfYear() / 7),
            year: adjustedMoment.year()
        };
    }

    // LOCALES

    function localeWeek (mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    };

    function localeFirstDayOfWeek () {
        return this._week.dow;
    }

    function localeFirstDayOfYear () {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek (input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek (input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PARSING

    addRegexToken('DDD',  match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
        var week1Jan = 6 + firstDayOfWeek - firstDayOfWeekOfYear, janX = createUTCDate(year, 0, 1 + week1Jan), d = janX.getUTCDay(), dayOfYear;
        if (d < firstDayOfWeek) {
            d += 7;
        }

        weekday = weekday != null ? 1 * weekday : firstDayOfWeek;

        dayOfYear = 1 + week1Jan + 7 * (week - 1) - d + weekday;

        return {
            year: dayOfYear > 0 ? year : year - 1,
            dayOfYear: dayOfYear > 0 ?  dayOfYear : daysInYear(year - 1) + dayOfYear
        };
    }

    // MOMENTS

    function getSetDayOfYear (input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
    }

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        var now = new Date();
        if (config._useUTC) {
            return [now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()];
        }
        return [now.getFullYear(), now.getMonth(), now.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray (config) {
        var i, date, input = [], currentDate, yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse)) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);
            week = defaults(w.w, 1);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < dow) {
                    ++week;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from begining of week
                weekday = w.e + dow;
            } else {
                // default to begining of week
                weekday = dow;
            }
        }
        temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);

        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
    }

    utils_hooks__hooks.ISO_8601 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === utils_hooks__hooks.ISO_8601) {
            configFromISO(config);
            return;
        }

        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                }
                else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (getParsingFlags(config).bigHour === true &&
                config._a[HOUR] <= 12 &&
                config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

        configFromArray(config);
        checkOverflow(config);
    }


    function meridiemFixWrap (locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (!valid__isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i);
        config._a = [i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond];

        configFromArray(config);
    }

    function createFromConfig (config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig (config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || locale_locales__getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return valid__createInvalid({nullInput: true});
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        } else if (isDate(input)) {
            config._d = input;
        } else {
            configFromInput(config);
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (input === undefined) {
            config._d = new Date();
        } else if (isDate(input)) {
            config._d = new Date(+input);
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (typeof(input) === 'object') {
            configFromObject(config);
        } else if (typeof(input) === 'number') {
            // from milliseconds
            config._d = new Date(input);
        } else {
            utils_hooks__hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC (input, format, locale, strict, isUTC) {
        var c = {};

        if (typeof(locale) === 'boolean') {
            strict = locale;
            locale = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function local__createLocal (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
         'moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548',
         function () {
             var other = local__createLocal.apply(null, arguments);
             return other < this ? this : other;
         }
     );

    var prototypeMax = deprecate(
        'moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548',
        function () {
            var other = local__createLocal.apply(null, arguments);
            return other > this ? this : other;
        }
    );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return local__createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    function Duration (duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 36e5; // 1000 * 60 * 60
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            quarters * 3 +
            years * 12;

        this._data = {};

        this._locale = locale_locales__getLocale();

        this._bubble();
    }

    function isDuration (obj) {
        return obj instanceof Duration;
    }

    function offset (token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z',  matchOffset);
    addRegexToken('ZZ', matchOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(string) {
        var matches = ((string || '').match(matchOffset) || []);
        var chunk   = matches[matches.length - 1] || [];
        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);

        return parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? +input : +local__createLocal(input)) - (+res);
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(+res._d + diff);
            utils_hooks__hooks.updateOffset(res, false);
            return res;
        } else {
            return local__createLocal(input).local();
        }
    }

    function getDateOffset (m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    utils_hooks__hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset (input, keepLocalTime) {
        var offset = this._offset || 0,
            localAdjust;
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(input);
            }
            if (Math.abs(input) < 16) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    utils_hooks__hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone (input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC (keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal (keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset () {
        if (this._tzm) {
            this.utcOffset(this._tzm);
        } else if (typeof this._i === 'string') {
            this.utcOffset(offsetFromString(this._i));
        }
        return this;
    }

    function hasAlignedHourOffset (input) {
        input = input ? local__createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime () {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted () {
        if (typeof this._isDSTShifted !== 'undefined') {
            return this._isDSTShifted;
        }

        var c = {};

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);
            this._isDSTShifted = this.isValid() &&
                compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal () {
        return !this._isUTC;
    }

    function isUtcOffset () {
        return this._isUTC;
    }

    function isUtc () {
        return this._isUTC && this._offset === 0;
    }

    var aspNetRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/;

    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    var create__isoRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;

    function create__createDuration (input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms : input._milliseconds,
                d  : input._days,
                M  : input._months
            };
        } else if (typeof input === 'number') {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y  : 0,
                d  : toInt(match[DATE])        * sign,
                h  : toInt(match[HOUR])        * sign,
                m  : toInt(match[MINUTE])      * sign,
                s  : toInt(match[SECOND])      * sign,
                ms : toInt(match[MILLISECOND]) * sign
            };
        } else if (!!(match = create__isoRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y : parseIso(match[2], sign),
                M : parseIso(match[3], sign),
                d : parseIso(match[4], sign),
                h : parseIso(match[5], sign),
                m : parseIso(match[6], sign),
                s : parseIso(match[7], sign),
                w : parseIso(match[8], sign)
            };
        } else if (duration == null) {// checks for null or undefined
            duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    }

    create__createDuration.fn = Duration.prototype;

    function parseIso (inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {milliseconds: 0, months: 0};

        res.months = other.month() - base.month() +
            (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');
                tmp = val; val = period; period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = create__createDuration(val, period);
            add_subtract__addSubtract(this, dur, direction);
            return this;
        };
    }

    function add_subtract__addSubtract (mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = duration._days,
            months = duration._months;
        updateOffset = updateOffset == null ? true : updateOffset;

        if (milliseconds) {
            mom._d.setTime(+mom._d + milliseconds * isAdding);
        }
        if (days) {
            get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);
        }
        if (months) {
            setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);
        }
        if (updateOffset) {
            utils_hooks__hooks.updateOffset(mom, days || months);
        }
    }

    var add_subtract__add      = createAdder(1, 'add');
    var add_subtract__subtract = createAdder(-1, 'subtract');

    function moment_calendar__calendar (time, formats) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || local__createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            diff = this.diff(sod, 'days', true),
            format = diff < -6 ? 'sameElse' :
                diff < -1 ? 'lastWeek' :
                diff < 0 ? 'lastDay' :
                diff < 1 ? 'sameDay' :
                diff < 2 ? 'nextDay' :
                diff < 7 ? 'nextWeek' : 'sameElse';
        return this.format(formats && formats[format] || this.localeData().calendar(format, this, local__createLocal(now)));
    }

    function clone () {
        return new Moment(this);
    }

    function isAfter (input, units) {
        var inputMs;
        units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
        if (units === 'millisecond') {
            input = isMoment(input) ? input : local__createLocal(input);
            return +this > +input;
        } else {
            inputMs = isMoment(input) ? +input : +local__createLocal(input);
            return inputMs < +this.clone().startOf(units);
        }
    }

    function isBefore (input, units) {
        var inputMs;
        units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
        if (units === 'millisecond') {
            input = isMoment(input) ? input : local__createLocal(input);
            return +this < +input;
        } else {
            inputMs = isMoment(input) ? +input : +local__createLocal(input);
            return +this.clone().endOf(units) < inputMs;
        }
    }

    function isBetween (from, to, units) {
        return this.isAfter(from, units) && this.isBefore(to, units);
    }

    function isSame (input, units) {
        var inputMs;
        units = normalizeUnits(units || 'millisecond');
        if (units === 'millisecond') {
            input = isMoment(input) ? input : local__createLocal(input);
            return +this === +input;
        } else {
            inputMs = +local__createLocal(input);
            return +(this.clone().startOf(units)) <= inputMs && inputMs <= +(this.clone().endOf(units));
        }
    }

    function diff (input, units, asFloat) {
        var that = cloneWithOffset(input, this),
            zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4,
            delta, output;

        units = normalizeUnits(units);

        if (units === 'year' || units === 'month' || units === 'quarter') {
            output = monthDiff(this, that);
            if (units === 'quarter') {
                output = output / 3;
            } else if (units === 'year') {
                output = output / 12;
            }
        } else {
            delta = this - that;
            output = units === 'second' ? delta / 1e3 : // 1000
                units === 'minute' ? delta / 6e4 : // 1000 * 60
                units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
                units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
                units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
                delta;
        }
        return asFloat ? output : absFloor(output);
    }

    function monthDiff (a, b) {
        // difference in months
        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2, adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        return -(wholeMonthDiff + adjust);
    }

    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';

    function toString () {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function moment_format__toISOString () {
        var m = this.clone().utc();
        if (0 < m.year() && m.year() <= 9999) {
            if ('function' === typeof Date.prototype.toISOString) {
                // native implementation is ~50x faster, use it when we can
                return this.toDate().toISOString();
            } else {
                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            }
        } else {
            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
        }
    }

    function format (inputString) {
        var output = formatMoment(this, inputString || utils_hooks__hooks.defaultFormat);
        return this.localeData().postformat(output);
    }

    function from (time, withoutSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }
        return create__createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
    }

    function fromNow (withoutSuffix) {
        return this.from(local__createLocal(), withoutSuffix);
    }

    function to (time, withoutSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }
        return create__createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
    }

    function toNow (withoutSuffix) {
        return this.to(local__createLocal(), withoutSuffix);
    }

    function locale (key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = locale_locales__getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData () {
        return this._locale;
    }

    function startOf (units) {
        units = normalizeUnits(units);
        // the following switch intentionally omits break keywords
        // to utilize falling through the cases.
        switch (units) {
        case 'year':
            this.month(0);
            /* falls through */
        case 'quarter':
        case 'month':
            this.date(1);
            /* falls through */
        case 'week':
        case 'isoWeek':
        case 'day':
            this.hours(0);
            /* falls through */
        case 'hour':
            this.minutes(0);
            /* falls through */
        case 'minute':
            this.seconds(0);
            /* falls through */
        case 'second':
            this.milliseconds(0);
        }

        // weeks are a special case
        if (units === 'week') {
            this.weekday(0);
        }
        if (units === 'isoWeek') {
            this.isoWeekday(1);
        }

        // quarters are also special
        if (units === 'quarter') {
            this.month(Math.floor(this.month() / 3) * 3);
        }

        return this;
    }

    function endOf (units) {
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond') {
            return this;
        }
        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
    }

    function to_type__valueOf () {
        return +this._d - ((this._offset || 0) * 60000);
    }

    function unix () {
        return Math.floor(+this / 1000);
    }

    function toDate () {
        return this._offset ? new Date(+this) : this._d;
    }

    function toArray () {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }

    function toObject () {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }

    function moment_valid__isValid () {
        return valid__isValid(this);
    }

    function parsingFlags () {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt () {
        return getParsingFlags(this).overflow;
    }

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken (token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg',     'weekYear');
    addWeekYearFormatToken('ggggg',    'weekYear');
    addWeekYearFormatToken('GGGG',  'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PARSING

    addRegexToken('G',      matchSigned);
    addRegexToken('g',      matchSigned);
    addRegexToken('GG',     match1to2, match2);
    addRegexToken('gg',     match1to2, match2);
    addRegexToken('GGGG',   match1to4, match4);
    addRegexToken('gggg',   match1to4, match4);
    addRegexToken('GGGGG',  match1to6, match6);
    addRegexToken('ggggg',  match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);
    });

    // HELPERS

    function weeksInYear(year, dow, doy) {
        return weekOfYear(local__createLocal([year, 11, 31 + dow - doy]), dow, doy).week;
    }

    // MOMENTS

    function getSetWeekYear (input) {
        var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
        return input == null ? year : this.add((input - year), 'y');
    }

    function getSetISOWeekYear (input) {
        var year = weekOfYear(this, 1, 4).year;
        return input == null ? year : this.add((input - year), 'y');
    }

    function getISOWeeksInYear () {
        return weeksInYear(this.year(), 1, 4);
    }

    function getWeeksInYear () {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    addFormatToken('Q', 0, 0, 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter (input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PARSING

    addRegexToken('D',  match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0], 10);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PARSING

    addRegexToken('d',    match1to2);
    addRegexToken('e',    match1to2);
    addRegexToken('E',    match1to2);
    addRegexToken('dd',   matchWord);
    addRegexToken('ddd',  matchWord);
    addRegexToken('dddd', matchWord);

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config) {
        var weekday = config._locale.weekdaysParse(input);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    // LOCALES

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays (m) {
        return this._weekdays[m.day()];
    }

    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort (m) {
        return this._weekdaysShort[m.day()];
    }

    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin (m) {
        return this._weekdaysMin[m.day()];
    }

    function localeWeekdaysParse (weekdayName) {
        var i, mom, regex;

        this._weekdaysParse = this._weekdaysParse || [];

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            if (!this._weekdaysParse[i]) {
                mom = local__createLocal([2000, 1]).day(i);
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek (input) {
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek (input) {
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek (input) {
        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.
        return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, function () {
        return this.hours() % 12 || 12;
    });

    function meridiem (token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PARSING

    function matchMeridiem (isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a',  matchMeridiem);
    addRegexToken('A',  matchMeridiem);
    addRegexToken('H',  match1to2);
    addRegexToken('h',  match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });

    // LOCALES

    function localeIsPM (input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return ((input + '').toLowerCase().charAt(0) === 'p');
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }


    // MOMENTS

    // Setting the hour should keep the time, because the user explicitly
    // specified which hour he wants. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    var getSetHour = makeGetSet('Hours', true);

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PARSING

    addRegexToken('m',  match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PARSING

    addRegexToken('s',  match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });


    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PARSING

    addRegexToken('S',    match1to3, match1);
    addRegexToken('SS',   match1to3, match2);
    addRegexToken('SSS',  match1to3, match3);

    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }
    // MOMENTS

    var getSetMillisecond = makeGetSet('Milliseconds', false);

    addFormatToken('z',  0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr () {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName () {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var momentPrototype__proto = Moment.prototype;

    momentPrototype__proto.add          = add_subtract__add;
    momentPrototype__proto.calendar     = moment_calendar__calendar;
    momentPrototype__proto.clone        = clone;
    momentPrototype__proto.diff         = diff;
    momentPrototype__proto.endOf        = endOf;
    momentPrototype__proto.format       = format;
    momentPrototype__proto.from         = from;
    momentPrototype__proto.fromNow      = fromNow;
    momentPrototype__proto.to           = to;
    momentPrototype__proto.toNow        = toNow;
    momentPrototype__proto.get          = getSet;
    momentPrototype__proto.invalidAt    = invalidAt;
    momentPrototype__proto.isAfter      = isAfter;
    momentPrototype__proto.isBefore     = isBefore;
    momentPrototype__proto.isBetween    = isBetween;
    momentPrototype__proto.isSame       = isSame;
    momentPrototype__proto.isValid      = moment_valid__isValid;
    momentPrototype__proto.lang         = lang;
    momentPrototype__proto.locale       = locale;
    momentPrototype__proto.localeData   = localeData;
    momentPrototype__proto.max          = prototypeMax;
    momentPrototype__proto.min          = prototypeMin;
    momentPrototype__proto.parsingFlags = parsingFlags;
    momentPrototype__proto.set          = getSet;
    momentPrototype__proto.startOf      = startOf;
    momentPrototype__proto.subtract     = add_subtract__subtract;
    momentPrototype__proto.toArray      = toArray;
    momentPrototype__proto.toObject     = toObject;
    momentPrototype__proto.toDate       = toDate;
    momentPrototype__proto.toISOString  = moment_format__toISOString;
    momentPrototype__proto.toJSON       = moment_format__toISOString;
    momentPrototype__proto.toString     = toString;
    momentPrototype__proto.unix         = unix;
    momentPrototype__proto.valueOf      = to_type__valueOf;

    // Year
    momentPrototype__proto.year       = getSetYear;
    momentPrototype__proto.isLeapYear = getIsLeapYear;

    // Week Year
    momentPrototype__proto.weekYear    = getSetWeekYear;
    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;

    // Quarter
    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;

    // Month
    momentPrototype__proto.month       = getSetMonth;
    momentPrototype__proto.daysInMonth = getDaysInMonth;

    // Week
    momentPrototype__proto.week           = momentPrototype__proto.weeks        = getSetWeek;
    momentPrototype__proto.isoWeek        = momentPrototype__proto.isoWeeks     = getSetISOWeek;
    momentPrototype__proto.weeksInYear    = getWeeksInYear;
    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;

    // Day
    momentPrototype__proto.date       = getSetDayOfMonth;
    momentPrototype__proto.day        = momentPrototype__proto.days             = getSetDayOfWeek;
    momentPrototype__proto.weekday    = getSetLocaleDayOfWeek;
    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;
    momentPrototype__proto.dayOfYear  = getSetDayOfYear;

    // Hour
    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;

    // Minute
    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;

    // Second
    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;

    // Millisecond
    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;

    // Offset
    momentPrototype__proto.utcOffset            = getSetOffset;
    momentPrototype__proto.utc                  = setOffsetToUTC;
    momentPrototype__proto.local                = setOffsetToLocal;
    momentPrototype__proto.parseZone            = setOffsetToParsedOffset;
    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;
    momentPrototype__proto.isDST                = isDaylightSavingTime;
    momentPrototype__proto.isDSTShifted         = isDaylightSavingTimeShifted;
    momentPrototype__proto.isLocal              = isLocal;
    momentPrototype__proto.isUtcOffset          = isUtcOffset;
    momentPrototype__proto.isUtc                = isUtc;
    momentPrototype__proto.isUTC                = isUtc;

    // Timezone
    momentPrototype__proto.zoneAbbr = getZoneAbbr;
    momentPrototype__proto.zoneName = getZoneName;

    // Deprecations
    momentPrototype__proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    momentPrototype__proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    momentPrototype__proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779', getSetZone);

    var momentPrototype = momentPrototype__proto;

    function moment__createUnix (input) {
        return local__createLocal(input * 1000);
    }

    function moment__createInZone () {
        return local__createLocal.apply(null, arguments).parseZone();
    }

    var defaultCalendar = {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    };

    function locale_calendar__calendar (key, mom, now) {
        var output = this._calendar[key];
        return typeof output === 'function' ? output.call(mom, now) : output;
    }

    var defaultLongDateFormat = {
        LTS  : 'h:mm:ss A',
        LT   : 'h:mm A',
        L    : 'MM/DD/YYYY',
        LL   : 'MMMM D, YYYY',
        LLL  : 'MMMM D, YYYY h:mm A',
        LLLL : 'dddd, MMMM D, YYYY h:mm A'
    };

    function longDateFormat (key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
            return val.slice(1);
        });

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate () {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d';
    var defaultOrdinalParse = /\d{1,2}/;

    function ordinal (number) {
        return this._ordinal.replace('%d', number);
    }

    function preParsePostFormat (string) {
        return string;
    }

    var defaultRelativeTime = {
        future : 'in %s',
        past   : '%s ago',
        s  : 'a few seconds',
        m  : 'a minute',
        mm : '%d minutes',
        h  : 'an hour',
        hh : '%d hours',
        d  : 'a day',
        dd : '%d days',
        M  : 'a month',
        MM : '%d months',
        y  : 'a year',
        yy : '%d years'
    };

    function relative__relativeTime (number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return (typeof output === 'function') ?
            output(number, withoutSuffix, string, isFuture) :
            output.replace(/%d/i, number);
    }

    function pastFuture (diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
    }

    function locale_set__set (config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (typeof prop === 'function') {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _ordinalParseLenient.
        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
    }

    var prototype__proto = Locale.prototype;

    prototype__proto._calendar       = defaultCalendar;
    prototype__proto.calendar        = locale_calendar__calendar;
    prototype__proto._longDateFormat = defaultLongDateFormat;
    prototype__proto.longDateFormat  = longDateFormat;
    prototype__proto._invalidDate    = defaultInvalidDate;
    prototype__proto.invalidDate     = invalidDate;
    prototype__proto._ordinal        = defaultOrdinal;
    prototype__proto.ordinal         = ordinal;
    prototype__proto._ordinalParse   = defaultOrdinalParse;
    prototype__proto.preparse        = preParsePostFormat;
    prototype__proto.postformat      = preParsePostFormat;
    prototype__proto._relativeTime   = defaultRelativeTime;
    prototype__proto.relativeTime    = relative__relativeTime;
    prototype__proto.pastFuture      = pastFuture;
    prototype__proto.set             = locale_set__set;

    // Month
    prototype__proto.months       =        localeMonths;
    prototype__proto._months      = defaultLocaleMonths;
    prototype__proto.monthsShort  =        localeMonthsShort;
    prototype__proto._monthsShort = defaultLocaleMonthsShort;
    prototype__proto.monthsParse  =        localeMonthsParse;

    // Week
    prototype__proto.week = localeWeek;
    prototype__proto._week = defaultLocaleWeek;
    prototype__proto.firstDayOfYear = localeFirstDayOfYear;
    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;

    // Day of Week
    prototype__proto.weekdays       =        localeWeekdays;
    prototype__proto._weekdays      = defaultLocaleWeekdays;
    prototype__proto.weekdaysMin    =        localeWeekdaysMin;
    prototype__proto._weekdaysMin   = defaultLocaleWeekdaysMin;
    prototype__proto.weekdaysShort  =        localeWeekdaysShort;
    prototype__proto._weekdaysShort = defaultLocaleWeekdaysShort;
    prototype__proto.weekdaysParse  =        localeWeekdaysParse;

    // Hours
    prototype__proto.isPM = localeIsPM;
    prototype__proto._meridiemParse = defaultLocaleMeridiemParse;
    prototype__proto.meridiem = localeMeridiem;

    function lists__get (format, index, field, setter) {
        var locale = locale_locales__getLocale();
        var utc = create_utc__createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function list (format, index, field, count, setter) {
        if (typeof format === 'number') {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return lists__get(format, index, field, setter);
        }

        var i;
        var out = [];
        for (i = 0; i < count; i++) {
            out[i] = lists__get(format, i, field, setter);
        }
        return out;
    }

    function lists__listMonths (format, index) {
        return list(format, index, 'months', 12, 'month');
    }

    function lists__listMonthsShort (format, index) {
        return list(format, index, 'monthsShort', 12, 'month');
    }

    function lists__listWeekdays (format, index) {
        return list(format, index, 'weekdays', 7, 'day');
    }

    function lists__listWeekdaysShort (format, index) {
        return list(format, index, 'weekdaysShort', 7, 'day');
    }

    function lists__listWeekdaysMin (format, index) {
        return list(format, index, 'weekdaysMin', 7, 'day');
    }

    locale_locales__getSetGlobalLocale('en', {
        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    // Side effect imports
    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);
    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);

    var mathAbs = Math.abs;

    function duration_abs__abs () {
        var data           = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days         = mathAbs(this._days);
        this._months       = mathAbs(this._months);

        data.milliseconds  = mathAbs(data.milliseconds);
        data.seconds       = mathAbs(data.seconds);
        data.minutes       = mathAbs(data.minutes);
        data.hours         = mathAbs(data.hours);
        data.months        = mathAbs(data.months);
        data.years         = mathAbs(data.years);

        return this;
    }

    function duration_add_subtract__addSubtract (duration, input, value, direction) {
        var other = create__createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days         += direction * other._days;
        duration._months       += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function duration_add_subtract__add (input, value) {
        return duration_add_subtract__addSubtract(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function duration_add_subtract__subtract (input, value) {
        return duration_add_subtract__addSubtract(this, input, value, -1);
    }

    function absCeil (number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble () {
        var milliseconds = this._milliseconds;
        var days         = this._days;
        var months       = this._months;
        var data         = this._data;
        var seconds, minutes, hours, years, monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0))) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds           = absFloor(milliseconds / 1000);
        data.seconds      = seconds % 60;

        minutes           = absFloor(seconds / 60);
        data.minutes      = minutes % 60;

        hours             = absFloor(minutes / 60);
        data.hours        = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days   = days;
        data.months = months;
        data.years  = years;

        return this;
    }

    function daysToMonths (days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
    }

    function monthsToDays (months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
    }

    function as (units) {
        var days;
        var months;
        var milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'year') {
            days   = this._days   + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            return units === 'month' ? months : months / 12;
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week'   : return days / 7     + milliseconds / 6048e5;
                case 'day'    : return days         + milliseconds / 864e5;
                case 'hour'   : return days * 24    + milliseconds / 36e5;
                case 'minute' : return days * 1440  + milliseconds / 6e4;
                case 'second' : return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
                default: throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function duration_as__valueOf () {
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs (alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms');
    var asSeconds      = makeAs('s');
    var asMinutes      = makeAs('m');
    var asHours        = makeAs('h');
    var asDays         = makeAs('d');
    var asWeeks        = makeAs('w');
    var asMonths       = makeAs('M');
    var asYears        = makeAs('y');

    function duration_get__get (units) {
        units = normalizeUnits(units);
        return this[units + 's']();
    }

    function makeGetter(name) {
        return function () {
            return this._data[name];
        };
    }

    var milliseconds = makeGetter('milliseconds');
    var seconds      = makeGetter('seconds');
    var minutes      = makeGetter('minutes');
    var hours        = makeGetter('hours');
    var days         = makeGetter('days');
    var months       = makeGetter('months');
    var years        = makeGetter('years');

    function weeks () {
        return absFloor(this.days() / 7);
    }

    var round = Math.round;
    var thresholds = {
        s: 45,  // seconds to minute
        m: 45,  // minutes to hour
        h: 22,  // hours to day
        d: 26,  // days to month
        M: 11   // months to year
    };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function duration_humanize__relativeTime (posNegDuration, withoutSuffix, locale) {
        var duration = create__createDuration(posNegDuration).abs();
        var seconds  = round(duration.as('s'));
        var minutes  = round(duration.as('m'));
        var hours    = round(duration.as('h'));
        var days     = round(duration.as('d'));
        var months   = round(duration.as('M'));
        var years    = round(duration.as('y'));

        var a = seconds < thresholds.s && ['s', seconds]  ||
                minutes === 1          && ['m']           ||
                minutes < thresholds.m && ['mm', minutes] ||
                hours   === 1          && ['h']           ||
                hours   < thresholds.h && ['hh', hours]   ||
                days    === 1          && ['d']           ||
                days    < thresholds.d && ['dd', days]    ||
                months  === 1          && ['M']           ||
                months  < thresholds.M && ['MM', months]  ||
                years   === 1          && ['y']           || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set a threshold for relative time strings
    function duration_humanize__getSetRelativeTimeThreshold (threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        return true;
    }

    function humanize (withSuffix) {
        var locale = this.localeData();
        var output = duration_humanize__relativeTime(this, !withSuffix, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var iso_string__abs = Math.abs;

    function iso_string__toISOString() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        var seconds = iso_string__abs(this._milliseconds) / 1000;
        var days         = iso_string__abs(this._days);
        var months       = iso_string__abs(this._months);
        var minutes, hours, years;

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes           = absFloor(seconds / 60);
        hours             = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years  = absFloor(months / 12);
        months %= 12;


        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds;
        var total = this.asSeconds();

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        return (total < 0 ? '-' : '') +
            'P' +
            (Y ? Y + 'Y' : '') +
            (M ? M + 'M' : '') +
            (D ? D + 'D' : '') +
            ((h || m || s) ? 'T' : '') +
            (h ? h + 'H' : '') +
            (m ? m + 'M' : '') +
            (s ? s + 'S' : '');
    }

    var duration_prototype__proto = Duration.prototype;

    duration_prototype__proto.abs            = duration_abs__abs;
    duration_prototype__proto.add            = duration_add_subtract__add;
    duration_prototype__proto.subtract       = duration_add_subtract__subtract;
    duration_prototype__proto.as             = as;
    duration_prototype__proto.asMilliseconds = asMilliseconds;
    duration_prototype__proto.asSeconds      = asSeconds;
    duration_prototype__proto.asMinutes      = asMinutes;
    duration_prototype__proto.asHours        = asHours;
    duration_prototype__proto.asDays         = asDays;
    duration_prototype__proto.asWeeks        = asWeeks;
    duration_prototype__proto.asMonths       = asMonths;
    duration_prototype__proto.asYears        = asYears;
    duration_prototype__proto.valueOf        = duration_as__valueOf;
    duration_prototype__proto._bubble        = bubble;
    duration_prototype__proto.get            = duration_get__get;
    duration_prototype__proto.milliseconds   = milliseconds;
    duration_prototype__proto.seconds        = seconds;
    duration_prototype__proto.minutes        = minutes;
    duration_prototype__proto.hours          = hours;
    duration_prototype__proto.days           = days;
    duration_prototype__proto.weeks          = weeks;
    duration_prototype__proto.months         = months;
    duration_prototype__proto.years          = years;
    duration_prototype__proto.humanize       = humanize;
    duration_prototype__proto.toISOString    = iso_string__toISOString;
    duration_prototype__proto.toString       = iso_string__toISOString;
    duration_prototype__proto.toJSON         = iso_string__toISOString;
    duration_prototype__proto.locale         = locale;
    duration_prototype__proto.localeData     = localeData;

    // Deprecations
    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);
    duration_prototype__proto.lang = lang;

    // Side effect imports

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    // Side effect imports


    utils_hooks__hooks.version = '2.10.6';

    setHookCallback(local__createLocal);

    utils_hooks__hooks.fn                    = momentPrototype;
    utils_hooks__hooks.min                   = min;
    utils_hooks__hooks.max                   = max;
    utils_hooks__hooks.utc                   = create_utc__createUTC;
    utils_hooks__hooks.unix                  = moment__createUnix;
    utils_hooks__hooks.months                = lists__listMonths;
    utils_hooks__hooks.isDate                = isDate;
    utils_hooks__hooks.locale                = locale_locales__getSetGlobalLocale;
    utils_hooks__hooks.invalid               = valid__createInvalid;
    utils_hooks__hooks.duration              = create__createDuration;
    utils_hooks__hooks.isMoment              = isMoment;
    utils_hooks__hooks.weekdays              = lists__listWeekdays;
    utils_hooks__hooks.parseZone             = moment__createInZone;
    utils_hooks__hooks.localeData            = locale_locales__getLocale;
    utils_hooks__hooks.isDuration            = isDuration;
    utils_hooks__hooks.monthsShort           = lists__listMonthsShort;
    utils_hooks__hooks.weekdaysMin           = lists__listWeekdaysMin;
    utils_hooks__hooks.defineLocale          = defineLocale;
    utils_hooks__hooks.weekdaysShort         = lists__listWeekdaysShort;
    utils_hooks__hooks.normalizeUnits        = normalizeUnits;
    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;

    var _moment = utils_hooks__hooks;

    return _moment;

}));
},{}],170:[function(require,module,exports){
/*!
 * numeral.js
 * version : 1.5.3
 * author : Adam Draper
 * license : MIT
 * http://adamwdraper.github.com/Numeral-js/
 */

(function () {

    /************************************
        Constants
    ************************************/

    var numeral,
        VERSION = '1.5.3',
        // internal storage for language config files
        languages = {},
        currentLanguage = 'en',
        zeroFormat = null,
        defaultFormat = '0,0',
        // check for nodeJS
        hasModule = (typeof module !== 'undefined' && module.exports);


    /************************************
        Constructors
    ************************************/


    // Numeral prototype object
    function Numeral (number) {
        this._value = number;
    }

    /**
     * Implementation of toFixed() that treats floats more like decimals
     *
     * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present
     * problems for accounting- and finance-related software.
     */
    function toFixed (value, precision, roundingFunction, optionals) {
        var power = Math.pow(10, precision),
            optionalsRegExp,
            output;
            
        //roundingFunction = (roundingFunction !== undefined ? roundingFunction : Math.round);
        // Multiply up by precision, round accurately, then divide and use native toFixed():
        output = (roundingFunction(value * power) / power).toFixed(precision);

        if (optionals) {
            optionalsRegExp = new RegExp('0{1,' + optionals + '}$');
            output = output.replace(optionalsRegExp, '');
        }

        return output;
    }

    /************************************
        Formatting
    ************************************/

    // determine what type of formatting we need to do
    function formatNumeral (n, format, roundingFunction) {
        var output;

        // figure out what kind of format we are dealing with
        if (format.indexOf('$') > -1) { // currency!!!!!
            output = formatCurrency(n, format, roundingFunction);
        } else if (format.indexOf('%') > -1) { // percentage
            output = formatPercentage(n, format, roundingFunction);
        } else if (format.indexOf(':') > -1) { // time
            output = formatTime(n, format);
        } else { // plain ol' numbers or bytes
            output = formatNumber(n._value, format, roundingFunction);
        }

        // return string
        return output;
    }

    // revert to number
    function unformatNumeral (n, string) {
        var stringOriginal = string,
            thousandRegExp,
            millionRegExp,
            billionRegExp,
            trillionRegExp,
            suffixes = ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
            bytesMultiplier = false,
            power;

        if (string.indexOf(':') > -1) {
            n._value = unformatTime(string);
        } else {
            if (string === zeroFormat) {
                n._value = 0;
            } else {
                if (languages[currentLanguage].delimiters.decimal !== '.') {
                    string = string.replace(/\./g,'').replace(languages[currentLanguage].delimiters.decimal, '.');
                }

                // see if abbreviations are there so that we can multiply to the correct number
                thousandRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.thousand + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
                millionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.million + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
                billionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.billion + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
                trillionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.trillion + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');

                // see if bytes are there so that we can multiply to the correct number
                for (power = 0; power <= suffixes.length; power++) {
                    bytesMultiplier = (string.indexOf(suffixes[power]) > -1) ? Math.pow(1024, power + 1) : false;

                    if (bytesMultiplier) {
                        break;
                    }
                }

                // do some math to create our number
                n._value = ((bytesMultiplier) ? bytesMultiplier : 1) * ((stringOriginal.match(thousandRegExp)) ? Math.pow(10, 3) : 1) * ((stringOriginal.match(millionRegExp)) ? Math.pow(10, 6) : 1) * ((stringOriginal.match(billionRegExp)) ? Math.pow(10, 9) : 1) * ((stringOriginal.match(trillionRegExp)) ? Math.pow(10, 12) : 1) * ((string.indexOf('%') > -1) ? 0.01 : 1) * (((string.split('-').length + Math.min(string.split('(').length-1, string.split(')').length-1)) % 2)? 1: -1) * Number(string.replace(/[^0-9\.]+/g, ''));

                // round if we are talking about bytes
                n._value = (bytesMultiplier) ? Math.ceil(n._value) : n._value;
            }
        }
        return n._value;
    }

    function formatCurrency (n, format, roundingFunction) {
        var symbolIndex = format.indexOf('$'),
            openParenIndex = format.indexOf('('),
            minusSignIndex = format.indexOf('-'),
            space = '',
            spliceIndex,
            output;

        // check for space before or after currency
        if (format.indexOf(' $') > -1) {
            space = ' ';
            format = format.replace(' $', '');
        } else if (format.indexOf('$ ') > -1) {
            space = ' ';
            format = format.replace('$ ', '');
        } else {
            format = format.replace('$', '');
        }

        // format the number
        output = formatNumber(n._value, format, roundingFunction);

        // position the symbol
        if (symbolIndex <= 1) {
            if (output.indexOf('(') > -1 || output.indexOf('-') > -1) {
                output = output.split('');
                spliceIndex = 1;
                if (symbolIndex < openParenIndex || symbolIndex < minusSignIndex){
                    // the symbol appears before the "(" or "-"
                    spliceIndex = 0;
                }
                output.splice(spliceIndex, 0, languages[currentLanguage].currency.symbol + space);
                output = output.join('');
            } else {
                output = languages[currentLanguage].currency.symbol + space + output;
            }
        } else {
            if (output.indexOf(')') > -1) {
                output = output.split('');
                output.splice(-1, 0, space + languages[currentLanguage].currency.symbol);
                output = output.join('');
            } else {
                output = output + space + languages[currentLanguage].currency.symbol;
            }
        }

        return output;
    }

    function formatPercentage (n, format, roundingFunction) {
        var space = '',
            output,
            value = n._value * 100;

        // check for space before %
        if (format.indexOf(' %') > -1) {
            space = ' ';
            format = format.replace(' %', '');
        } else {
            format = format.replace('%', '');
        }

        output = formatNumber(value, format, roundingFunction);
        
        if (output.indexOf(')') > -1 ) {
            output = output.split('');
            output.splice(-1, 0, space + '%');
            output = output.join('');
        } else {
            output = output + space + '%';
        }

        return output;
    }

    function formatTime (n) {
        var hours = Math.floor(n._value/60/60),
            minutes = Math.floor((n._value - (hours * 60 * 60))/60),
            seconds = Math.round(n._value - (hours * 60 * 60) - (minutes * 60));
        return hours + ':' + ((minutes < 10) ? '0' + minutes : minutes) + ':' + ((seconds < 10) ? '0' + seconds : seconds);
    }

    function unformatTime (string) {
        var timeArray = string.split(':'),
            seconds = 0;
        // turn hours and minutes into seconds and add them all up
        if (timeArray.length === 3) {
            // hours
            seconds = seconds + (Number(timeArray[0]) * 60 * 60);
            // minutes
            seconds = seconds + (Number(timeArray[1]) * 60);
            // seconds
            seconds = seconds + Number(timeArray[2]);
        } else if (timeArray.length === 2) {
            // minutes
            seconds = seconds + (Number(timeArray[0]) * 60);
            // seconds
            seconds = seconds + Number(timeArray[1]);
        }
        return Number(seconds);
    }

    function formatNumber (value, format, roundingFunction) {
        var negP = false,
            signed = false,
            optDec = false,
            abbr = '',
            abbrK = false, // force abbreviation to thousands
            abbrM = false, // force abbreviation to millions
            abbrB = false, // force abbreviation to billions
            abbrT = false, // force abbreviation to trillions
            abbrForce = false, // force abbreviation
            bytes = '',
            ord = '',
            abs = Math.abs(value),
            suffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
            min,
            max,
            power,
            w,
            precision,
            thousands,
            d = '',
            neg = false;

        // check if number is zero and a custom zero format has been set
        if (value === 0 && zeroFormat !== null) {
            return zeroFormat;
        } else {
            // see if we should use parentheses for negative number or if we should prefix with a sign
            // if both are present we default to parentheses
            if (format.indexOf('(') > -1) {
                negP = true;
                format = format.slice(1, -1);
            } else if (format.indexOf('+') > -1) {
                signed = true;
                format = format.replace(/\+/g, '');
            }

            // see if abbreviation is wanted
            if (format.indexOf('a') > -1) {
                // check if abbreviation is specified
                abbrK = format.indexOf('aK') >= 0;
                abbrM = format.indexOf('aM') >= 0;
                abbrB = format.indexOf('aB') >= 0;
                abbrT = format.indexOf('aT') >= 0;
                abbrForce = abbrK || abbrM || abbrB || abbrT;

                // check for space before abbreviation
                if (format.indexOf(' a') > -1) {
                    abbr = ' ';
                    format = format.replace(' a', '');
                } else {
                    format = format.replace('a', '');
                }

                if (abs >= Math.pow(10, 12) && !abbrForce || abbrT) {
                    // trillion
                    abbr = abbr + languages[currentLanguage].abbreviations.trillion;
                    value = value / Math.pow(10, 12);
                } else if (abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !abbrForce || abbrB) {
                    // billion
                    abbr = abbr + languages[currentLanguage].abbreviations.billion;
                    value = value / Math.pow(10, 9);
                } else if (abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !abbrForce || abbrM) {
                    // million
                    abbr = abbr + languages[currentLanguage].abbreviations.million;
                    value = value / Math.pow(10, 6);
                } else if (abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !abbrForce || abbrK) {
                    // thousand
                    abbr = abbr + languages[currentLanguage].abbreviations.thousand;
                    value = value / Math.pow(10, 3);
                }
            }

            // see if we are formatting bytes
            if (format.indexOf('b') > -1) {
                // check for space before
                if (format.indexOf(' b') > -1) {
                    bytes = ' ';
                    format = format.replace(' b', '');
                } else {
                    format = format.replace('b', '');
                }

                for (power = 0; power <= suffixes.length; power++) {
                    min = Math.pow(1024, power);
                    max = Math.pow(1024, power+1);

                    if (value >= min && value < max) {
                        bytes = bytes + suffixes[power];
                        if (min > 0) {
                            value = value / min;
                        }
                        break;
                    }
                }
            }

            // see if ordinal is wanted
            if (format.indexOf('o') > -1) {
                // check for space before
                if (format.indexOf(' o') > -1) {
                    ord = ' ';
                    format = format.replace(' o', '');
                } else {
                    format = format.replace('o', '');
                }

                ord = ord + languages[currentLanguage].ordinal(value);
            }

            if (format.indexOf('[.]') > -1) {
                optDec = true;
                format = format.replace('[.]', '.');
            }

            w = value.toString().split('.')[0];
            precision = format.split('.')[1];
            thousands = format.indexOf(',');

            if (precision) {
                if (precision.indexOf('[') > -1) {
                    precision = precision.replace(']', '');
                    precision = precision.split('[');
                    d = toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);
                } else {
                    d = toFixed(value, precision.length, roundingFunction);
                }

                w = d.split('.')[0];

                if (d.split('.')[1].length) {
                    d = languages[currentLanguage].delimiters.decimal + d.split('.')[1];
                } else {
                    d = '';
                }

                if (optDec && Number(d.slice(1)) === 0) {
                    d = '';
                }
            } else {
                w = toFixed(value, null, roundingFunction);
            }

            // format number
            if (w.indexOf('-') > -1) {
                w = w.slice(1);
                neg = true;
            }

            if (thousands > -1) {
                w = w.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1' + languages[currentLanguage].delimiters.thousands);
            }

            if (format.indexOf('.') === 0) {
                w = '';
            }

            return ((negP && neg) ? '(' : '') + ((!negP && neg) ? '-' : '') + ((!neg && signed) ? '+' : '') + w + d + ((ord) ? ord : '') + ((abbr) ? abbr : '') + ((bytes) ? bytes : '') + ((negP && neg) ? ')' : '');
        }
    }

    /************************************
        Top Level Functions
    ************************************/

    numeral = function (input) {
        if (numeral.isNumeral(input)) {
            input = input.value();
        } else if (input === 0 || typeof input === 'undefined') {
            input = 0;
        } else if (!Number(input)) {
            input = numeral.fn.unformat(input);
        }

        return new Numeral(Number(input));
    };

    // version number
    numeral.version = VERSION;

    // compare numeral object
    numeral.isNumeral = function (obj) {
        return obj instanceof Numeral;
    };

    // This function will load languages and then set the global language.  If
    // no arguments are passed in, it will simply return the current global
    // language key.
    numeral.language = function (key, values) {
        if (!key) {
            return currentLanguage;
        }

        if (key && !values) {
            if(!languages[key]) {
                throw new Error('Unknown language : ' + key);
            }
            currentLanguage = key;
        }

        if (values || !languages[key]) {
            loadLanguage(key, values);
        }

        return numeral;
    };
    
    // This function provides access to the loaded language data.  If
    // no arguments are passed in, it will simply return the current
    // global language object.
    numeral.languageData = function (key) {
        if (!key) {
            return languages[currentLanguage];
        }
        
        if (!languages[key]) {
            throw new Error('Unknown language : ' + key);
        }
        
        return languages[key];
    };

    numeral.language('en', {
        delimiters: {
            thousands: ',',
            decimal: '.'
        },
        abbreviations: {
            thousand: 'k',
            million: 'm',
            billion: 'b',
            trillion: 't'
        },
        ordinal: function (number) {
            var b = number % 10;
            return (~~ (number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
        },
        currency: {
            symbol: '$'
        }
    });

    numeral.zeroFormat = function (format) {
        zeroFormat = typeof(format) === 'string' ? format : null;
    };

    numeral.defaultFormat = function (format) {
        defaultFormat = typeof(format) === 'string' ? format : '0.0';
    };

    /************************************
        Helpers
    ************************************/

    function loadLanguage(key, values) {
        languages[key] = values;
    }

    /************************************
        Floating-point helpers
    ************************************/

    // The floating-point helper functions and implementation
    // borrows heavily from sinful.js: http://guipn.github.io/sinful.js/

    /**
     * Array.prototype.reduce for browsers that don't support it
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce#Compatibility
     */
    if ('function' !== typeof Array.prototype.reduce) {
        Array.prototype.reduce = function (callback, opt_initialValue) {
            'use strict';
            
            if (null === this || 'undefined' === typeof this) {
                // At the moment all modern browsers, that support strict mode, have
                // native implementation of Array.prototype.reduce. For instance, IE8
                // does not support strict mode, so this check is actually useless.
                throw new TypeError('Array.prototype.reduce called on null or undefined');
            }
            
            if ('function' !== typeof callback) {
                throw new TypeError(callback + ' is not a function');
            }

            var index,
                value,
                length = this.length >>> 0,
                isValueSet = false;

            if (1 < arguments.length) {
                value = opt_initialValue;
                isValueSet = true;
            }

            for (index = 0; length > index; ++index) {
                if (this.hasOwnProperty(index)) {
                    if (isValueSet) {
                        value = callback(value, this[index], index, this);
                    } else {
                        value = this[index];
                        isValueSet = true;
                    }
                }
            }

            if (!isValueSet) {
                throw new TypeError('Reduce of empty array with no initial value');
            }

            return value;
        };
    }

    
    /**
     * Computes the multiplier necessary to make x >= 1,
     * effectively eliminating miscalculations caused by
     * finite precision.
     */
    function multiplier(x) {
        var parts = x.toString().split('.');
        if (parts.length < 2) {
            return 1;
        }
        return Math.pow(10, parts[1].length);
    }

    /**
     * Given a variable number of arguments, returns the maximum
     * multiplier that must be used to normalize an operation involving
     * all of them.
     */
    function correctionFactor() {
        var args = Array.prototype.slice.call(arguments);
        return args.reduce(function (prev, next) {
            var mp = multiplier(prev),
                mn = multiplier(next);
        return mp > mn ? mp : mn;
        }, -Infinity);
    }        


    /************************************
        Numeral Prototype
    ************************************/


    numeral.fn = Numeral.prototype = {

        clone : function () {
            return numeral(this);
        },

        format : function (inputString, roundingFunction) {
            return formatNumeral(this, 
                  inputString ? inputString : defaultFormat, 
                  (roundingFunction !== undefined) ? roundingFunction : Math.round
              );
        },

        unformat : function (inputString) {
            if (Object.prototype.toString.call(inputString) === '[object Number]') { 
                return inputString; 
            }
            return unformatNumeral(this, inputString ? inputString : defaultFormat);
        },

        value : function () {
            return this._value;
        },

        valueOf : function () {
            return this._value;
        },

        set : function (value) {
            this._value = Number(value);
            return this;
        },

        add : function (value) {
            var corrFactor = correctionFactor.call(null, this._value, value);
            function cback(accum, curr, currI, O) {
                return accum + corrFactor * curr;
            }
            this._value = [this._value, value].reduce(cback, 0) / corrFactor;
            return this;
        },

        subtract : function (value) {
            var corrFactor = correctionFactor.call(null, this._value, value);
            function cback(accum, curr, currI, O) {
                return accum - corrFactor * curr;
            }
            this._value = [value].reduce(cback, this._value * corrFactor) / corrFactor;            
            return this;
        },

        multiply : function (value) {
            function cback(accum, curr, currI, O) {
                var corrFactor = correctionFactor(accum, curr);
                return (accum * corrFactor) * (curr * corrFactor) /
                    (corrFactor * corrFactor);
            }
            this._value = [this._value, value].reduce(cback, 1);
            return this;
        },

        divide : function (value) {
            function cback(accum, curr, currI, O) {
                var corrFactor = correctionFactor(accum, curr);
                return (accum * corrFactor) / (curr * corrFactor);
            }
            this._value = [this._value, value].reduce(cback);            
            return this;
        },

        difference : function (value) {
            return Math.abs(numeral(this._value).subtract(value).value());
        }

    };

    /************************************
        Exposing Numeral
    ************************************/

    // CommonJS module is defined
    if (hasModule) {
        module.exports = numeral;
    }

    /*global ender:false */
    if (typeof ender === 'undefined') {
        // here, `this` means `window` in the browser, or `global` on the server
        // add `numeral` as a global object via a string identifier,
        // for Closure Compiler 'advanced' mode
        this['numeral'] = numeral;
    }

    /*global define:false */
    if (typeof define === 'function' && define.amd) {
        define([], function () {
            return numeral;
        });
    }
}).call(this);

},{}],171:[function(require,module,exports){
/**
 * Represents a cancellation caused by navigating away
 * before the previous transition has fully resolved.
 */
"use strict";

function Cancellation() {}

module.exports = Cancellation;
},{}],172:[function(require,module,exports){
'use strict';

var invariant = require('react/lib/invariant');
var canUseDOM = require('react/lib/ExecutionEnvironment').canUseDOM;

var History = {

  /**
   * The current number of entries in the history.
   *
   * Note: This property is read-only.
   */
  length: 1,

  /**
   * Sends the browser back one entry in the history.
   */
  back: function back() {
    invariant(canUseDOM, 'Cannot use History.back without a DOM');

    // Do this first so that History.length will
    // be accurate in location change listeners.
    History.length -= 1;

    window.history.back();
  }

};

module.exports = History;
},{"react/lib/ExecutionEnvironment":229,"react/lib/invariant":344}],173:[function(require,module,exports){
'use strict';

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

/* jshint -W084 */
var PathUtils = require('./PathUtils');

function deepSearch(route, pathname, query) {
  // Check the subtree first to find the most deeply-nested match.
  var childRoutes = route.childRoutes;
  if (childRoutes) {
    var match, childRoute;
    for (var i = 0, len = childRoutes.length; i < len; ++i) {
      childRoute = childRoutes[i];

      if (childRoute.isDefault || childRoute.isNotFound) continue; // Check these in order later.

      if (match = deepSearch(childRoute, pathname, query)) {
        // A route in the subtree matched! Add this route and we're done.
        match.routes.unshift(route);
        return match;
      }
    }
  }

  // No child routes matched; try the default route.
  var defaultRoute = route.defaultRoute;
  if (defaultRoute && (params = PathUtils.extractParams(defaultRoute.path, pathname))) {
    return new Match(pathname, params, query, [route, defaultRoute]);
  } // Does the "not found" route match?
  var notFoundRoute = route.notFoundRoute;
  if (notFoundRoute && (params = PathUtils.extractParams(notFoundRoute.path, pathname))) {
    return new Match(pathname, params, query, [route, notFoundRoute]);
  } // Last attempt: check this route.
  var params = PathUtils.extractParams(route.path, pathname);
  if (params) {
    return new Match(pathname, params, query, [route]);
  }return null;
}

var Match = (function () {
  function Match(pathname, params, query, routes) {
    _classCallCheck(this, Match);

    this.pathname = pathname;
    this.params = params;
    this.query = query;
    this.routes = routes;
  }

  _createClass(Match, null, [{
    key: 'findMatch',

    /**
     * Attempts to match depth-first a route in the given route's
     * subtree against the given path and returns the match if it
     * succeeds, null if no match can be made.
     */
    value: function findMatch(routes, path) {
      var pathname = PathUtils.withoutQuery(path);
      var query = PathUtils.extractQuery(path);
      var match = null;

      for (var i = 0, len = routes.length; match == null && i < len; ++i) match = deepSearch(routes[i], pathname, query);

      return match;
    }
  }]);

  return Match;
})();

module.exports = Match;
},{"./PathUtils":175}],174:[function(require,module,exports){
'use strict';

var PropTypes = require('./PropTypes');

/**
 * A mixin for components that modify the URL.
 *
 * Example:
 *
 *   var MyLink = React.createClass({
 *     mixins: [ Router.Navigation ],
 *     handleClick(event) {
 *       event.preventDefault();
 *       this.transitionTo('aRoute', { the: 'params' }, { the: 'query' });
 *     },
 *     render() {
 *       return (
 *         <a onClick={this.handleClick}>Click me!</a>
 *       );
 *     }
 *   });
 */
var Navigation = {

  contextTypes: {
    router: PropTypes.router.isRequired
  },

  /**
   * Returns an absolute URL path created from the given route
   * name, URL parameters, and query values.
   */
  makePath: function makePath(to, params, query) {
    return this.context.router.makePath(to, params, query);
  },

  /**
   * Returns a string that may safely be used as the href of a
   * link to the route with the given name.
   */
  makeHref: function makeHref(to, params, query) {
    return this.context.router.makeHref(to, params, query);
  },

  /**
   * Transitions to the URL specified in the arguments by pushing
   * a new URL onto the history stack.
   */
  transitionTo: function transitionTo(to, params, query) {
    this.context.router.transitionTo(to, params, query);
  },

  /**
   * Transitions to the URL specified in the arguments by replacing
   * the current URL in the history stack.
   */
  replaceWith: function replaceWith(to, params, query) {
    this.context.router.replaceWith(to, params, query);
  },

  /**
   * Transitions to the previous URL.
   */
  goBack: function goBack() {
    return this.context.router.goBack();
  }

};

module.exports = Navigation;
},{"./PropTypes":176}],175:[function(require,module,exports){
'use strict';

var invariant = require('react/lib/invariant');
var assign = require('object-assign');
var qs = require('qs');

var paramCompileMatcher = /:([a-zA-Z_$][a-zA-Z0-9_$]*)|[*.()\[\]\\+|{}^$]/g;
var paramInjectMatcher = /:([a-zA-Z_$][a-zA-Z0-9_$?]*[?]?)|[*]/g;
var paramInjectTrailingSlashMatcher = /\/\/\?|\/\?\/|\/\?/g;
var queryMatcher = /\?(.*)$/;

var _compiledPatterns = {};

function compilePattern(pattern) {
  if (!(pattern in _compiledPatterns)) {
    var paramNames = [];
    var source = pattern.replace(paramCompileMatcher, function (match, paramName) {
      if (paramName) {
        paramNames.push(paramName);
        return '([^/?#]+)';
      } else if (match === '*') {
        paramNames.push('splat');
        return '(.*?)';
      } else {
        return '\\' + match;
      }
    });

    _compiledPatterns[pattern] = {
      matcher: new RegExp('^' + source + '$', 'i'),
      paramNames: paramNames
    };
  }

  return _compiledPatterns[pattern];
}

var PathUtils = {

  /**
   * Returns true if the given path is absolute.
   */
  isAbsolute: function isAbsolute(path) {
    return path.charAt(0) === '/';
  },

  /**
   * Joins two URL paths together.
   */
  join: function join(a, b) {
    return a.replace(/\/*$/, '/') + b;
  },

  /**
   * Returns an array of the names of all parameters in the given pattern.
   */
  extractParamNames: function extractParamNames(pattern) {
    return compilePattern(pattern).paramNames;
  },

  /**
   * Extracts the portions of the given URL path that match the given pattern
   * and returns an object of param name => value pairs. Returns null if the
   * pattern does not match the given path.
   */
  extractParams: function extractParams(pattern, path) {
    var _compilePattern = compilePattern(pattern);

    var matcher = _compilePattern.matcher;
    var paramNames = _compilePattern.paramNames;

    var match = path.match(matcher);

    if (!match) {
      return null;
    }var params = {};

    paramNames.forEach(function (paramName, index) {
      params[paramName] = match[index + 1];
    });

    return params;
  },

  /**
   * Returns a version of the given route path with params interpolated. Throws
   * if there is a dynamic segment of the route path for which there is no param.
   */
  injectParams: function injectParams(pattern, params) {
    params = params || {};

    var splatIndex = 0;

    return pattern.replace(paramInjectMatcher, function (match, paramName) {
      paramName = paramName || 'splat';

      // If param is optional don't check for existence
      if (paramName.slice(-1) === '?') {
        paramName = paramName.slice(0, -1);

        if (params[paramName] == null) return '';
      } else {
        invariant(params[paramName] != null, 'Missing "%s" parameter for path "%s"', paramName, pattern);
      }

      var segment;
      if (paramName === 'splat' && Array.isArray(params[paramName])) {
        segment = params[paramName][splatIndex++];

        invariant(segment != null, 'Missing splat # %s for path "%s"', splatIndex, pattern);
      } else {
        segment = params[paramName];
      }

      return segment;
    }).replace(paramInjectTrailingSlashMatcher, '/');
  },

  /**
   * Returns an object that is the result of parsing any query string contained
   * in the given path, null if the path contains no query string.
   */
  extractQuery: function extractQuery(path) {
    var match = path.match(queryMatcher);
    return match && qs.parse(match[1]);
  },

  /**
   * Returns a version of the given path without the query string.
   */
  withoutQuery: function withoutQuery(path) {
    return path.replace(queryMatcher, '');
  },

  /**
   * Returns a version of the given path with the parameters in the given
   * query merged into the query string.
   */
  withQuery: function withQuery(path, query) {
    var existingQuery = PathUtils.extractQuery(path);

    if (existingQuery) query = query ? assign(existingQuery, query) : existingQuery;

    var queryString = qs.stringify(query, { arrayFormat: 'brackets' });

    if (queryString) {
      return PathUtils.withoutQuery(path) + '?' + queryString;
    }return PathUtils.withoutQuery(path);
  }

};

module.exports = PathUtils;
},{"object-assign":204,"qs":205,"react/lib/invariant":344}],176:[function(require,module,exports){
'use strict';

var assign = require('react/lib/Object.assign');
var ReactPropTypes = require('react').PropTypes;
var Route = require('./Route');

var PropTypes = assign({}, ReactPropTypes, {

  /**
   * Indicates that a prop should be falsy.
   */
  falsy: function falsy(props, propName, componentName) {
    if (props[propName]) {
      return new Error('<' + componentName + '> should not have a "' + propName + '" prop');
    }
  },

  /**
   * Indicates that a prop should be a Route object.
   */
  route: ReactPropTypes.instanceOf(Route),

  /**
   * Indicates that a prop should be a Router object.
   */
  //router: ReactPropTypes.instanceOf(Router) // TODO
  router: ReactPropTypes.func

});

module.exports = PropTypes;
},{"./Route":178,"react":364,"react/lib/Object.assign":235}],177:[function(require,module,exports){
/**
 * Encapsulates a redirect to the given route.
 */
"use strict";

function Redirect(to, params, query) {
  this.to = to;
  this.params = params;
  this.query = query;
}

module.exports = Redirect;
},{}],178:[function(require,module,exports){
'use strict';

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var assign = require('react/lib/Object.assign');
var invariant = require('react/lib/invariant');
var warning = require('react/lib/warning');
var PathUtils = require('./PathUtils');

var _currentRoute;

var Route = (function () {
  function Route(name, path, ignoreScrollBehavior, isDefault, isNotFound, onEnter, onLeave, handler) {
    _classCallCheck(this, Route);

    this.name = name;
    this.path = path;
    this.paramNames = PathUtils.extractParamNames(this.path);
    this.ignoreScrollBehavior = !!ignoreScrollBehavior;
    this.isDefault = !!isDefault;
    this.isNotFound = !!isNotFound;
    this.onEnter = onEnter;
    this.onLeave = onLeave;
    this.handler = handler;
  }

  _createClass(Route, [{
    key: 'appendChild',

    /**
     * Appends the given route to this route's child routes.
     */
    value: function appendChild(route) {
      invariant(route instanceof Route, 'route.appendChild must use a valid Route');

      if (!this.childRoutes) this.childRoutes = [];

      this.childRoutes.push(route);
    }
  }, {
    key: 'toString',
    value: function toString() {
      var string = '<Route';

      if (this.name) string += ' name="' + this.name + '"';

      string += ' path="' + this.path + '">';

      return string;
    }
  }], [{
    key: 'createRoute',

    /**
     * Creates and returns a new route. Options may be a URL pathname string
     * with placeholders for named params or an object with any of the following
     * properties:
     *
     * - name                     The name of the route. This is used to lookup a
     *                            route relative to its parent route and should be
     *                            unique among all child routes of the same parent
     * - path                     A URL pathname string with optional placeholders
     *                            that specify the names of params to extract from
     *                            the URL when the path matches. Defaults to `/${name}`
     *                            when there is a name given, or the path of the parent
     *                            route, or /
     * - ignoreScrollBehavior     True to make this route (and all descendants) ignore
     *                            the scroll behavior of the router
     * - isDefault                True to make this route the default route among all
     *                            its siblings
     * - isNotFound               True to make this route the "not found" route among
     *                            all its siblings
     * - onEnter                  A transition hook that will be called when the
     *                            router is going to enter this route
     * - onLeave                  A transition hook that will be called when the
     *                            router is going to leave this route
     * - handler                  A React component that will be rendered when
     *                            this route is active
     * - parentRoute              The parent route to use for this route. This option
     *                            is automatically supplied when creating routes inside
     *                            the callback to another invocation of createRoute. You
     *                            only ever need to use this when declaring routes
     *                            independently of one another to manually piece together
     *                            the route hierarchy
     *
     * The callback may be used to structure your route hierarchy. Any call to
     * createRoute, createDefaultRoute, createNotFoundRoute, or createRedirect
     * inside the callback automatically uses this route as its parent.
     */
    value: function createRoute(options, callback) {
      options = options || {};

      if (typeof options === 'string') options = { path: options };

      var parentRoute = _currentRoute;

      if (parentRoute) {
        warning(options.parentRoute == null || options.parentRoute === parentRoute, 'You should not use parentRoute with createRoute inside another route\'s child callback; it is ignored');
      } else {
        parentRoute = options.parentRoute;
      }

      var name = options.name;
      var path = options.path || name;

      if (path && !(options.isDefault || options.isNotFound)) {
        if (PathUtils.isAbsolute(path)) {
          if (parentRoute) {
            invariant(path === parentRoute.path || parentRoute.paramNames.length === 0, 'You cannot nest path "%s" inside "%s"; the parent requires URL parameters', path, parentRoute.path);
          }
        } else if (parentRoute) {
          // Relative paths extend their parent.
          path = PathUtils.join(parentRoute.path, path);
        } else {
          path = '/' + path;
        }
      } else {
        path = parentRoute ? parentRoute.path : '/';
      }

      if (options.isNotFound && !/\*$/.test(path)) path += '*'; // Auto-append * to the path of not found routes.

      var route = new Route(name, path, options.ignoreScrollBehavior, options.isDefault, options.isNotFound, options.onEnter, options.onLeave, options.handler);

      if (parentRoute) {
        if (route.isDefault) {
          invariant(parentRoute.defaultRoute == null, '%s may not have more than one default route', parentRoute);

          parentRoute.defaultRoute = route;
        } else if (route.isNotFound) {
          invariant(parentRoute.notFoundRoute == null, '%s may not have more than one not found route', parentRoute);

          parentRoute.notFoundRoute = route;
        }

        parentRoute.appendChild(route);
      }

      // Any routes created in the callback
      // use this route as their parent.
      if (typeof callback === 'function') {
        var currentRoute = _currentRoute;
        _currentRoute = route;
        callback.call(route, route);
        _currentRoute = currentRoute;
      }

      return route;
    }
  }, {
    key: 'createDefaultRoute',

    /**
     * Creates and returns a route that is rendered when its parent matches
     * the current URL.
     */
    value: function createDefaultRoute(options) {
      return Route.createRoute(assign({}, options, { isDefault: true }));
    }
  }, {
    key: 'createNotFoundRoute',

    /**
     * Creates and returns a route that is rendered when its parent matches
     * the current URL but none of its siblings do.
     */
    value: function createNotFoundRoute(options) {
      return Route.createRoute(assign({}, options, { isNotFound: true }));
    }
  }, {
    key: 'createRedirect',

    /**
     * Creates and returns a route that automatically redirects the transition
     * to another route. In addition to the normal options to createRoute, this
     * function accepts the following options:
     *
     * - from         An alias for the `path` option. Defaults to *
     * - to           The path/route/route name to redirect to
     * - params       The params to use in the redirect URL. Defaults
     *                to using the current params
     * - query        The query to use in the redirect URL. Defaults
     *                to using the current query
     */
    value: function createRedirect(options) {
      return Route.createRoute(assign({}, options, {
        path: options.path || options.from || '*',
        onEnter: function onEnter(transition, params, query) {
          transition.redirect(options.to, options.params || params, options.query || query);
        }
      }));
    }
  }]);

  return Route;
})();

module.exports = Route;
},{"./PathUtils":175,"react/lib/Object.assign":235,"react/lib/invariant":344,"react/lib/warning":363}],179:[function(require,module,exports){
'use strict';

var invariant = require('react/lib/invariant');
var canUseDOM = require('react/lib/ExecutionEnvironment').canUseDOM;
var getWindowScrollPosition = require('./getWindowScrollPosition');

function shouldUpdateScroll(state, prevState) {
  if (!prevState) {
    return true;
  } // Don't update scroll position when only the query has changed.
  if (state.pathname === prevState.pathname) {
    return false;
  }var routes = state.routes;
  var prevRoutes = prevState.routes;

  var sharedAncestorRoutes = routes.filter(function (route) {
    return prevRoutes.indexOf(route) !== -1;
  });

  return !sharedAncestorRoutes.some(function (route) {
    return route.ignoreScrollBehavior;
  });
}

/**
 * Provides the router with the ability to manage window scroll position
 * according to its scroll behavior.
 */
var ScrollHistory = {

  statics: {

    /**
     * Records curent scroll position as the last known position for the given URL path.
     */
    recordScrollPosition: function recordScrollPosition(path) {
      if (!this.scrollHistory) this.scrollHistory = {};

      this.scrollHistory[path] = getWindowScrollPosition();
    },

    /**
     * Returns the last known scroll position for the given URL path.
     */
    getScrollPosition: function getScrollPosition(path) {
      if (!this.scrollHistory) this.scrollHistory = {};

      return this.scrollHistory[path] || null;
    }

  },

  componentWillMount: function componentWillMount() {
    invariant(this.constructor.getScrollBehavior() == null || canUseDOM, 'Cannot use scroll behavior without a DOM');
  },

  componentDidMount: function componentDidMount() {
    this._updateScroll();
  },

  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
    this._updateScroll(prevState);
  },

  _updateScroll: function _updateScroll(prevState) {
    if (!shouldUpdateScroll(this.state, prevState)) {
      return;
    }var scrollBehavior = this.constructor.getScrollBehavior();

    if (scrollBehavior) scrollBehavior.updateScrollPosition(this.constructor.getScrollPosition(this.state.path), this.state.action);
  }

};

module.exports = ScrollHistory;
},{"./getWindowScrollPosition":194,"react/lib/ExecutionEnvironment":229,"react/lib/invariant":344}],180:[function(require,module,exports){
'use strict';

var PropTypes = require('./PropTypes');

/**
 * A mixin for components that need to know the path, routes, URL
 * params and query that are currently active.
 *
 * Example:
 *
 *   var AboutLink = React.createClass({
 *     mixins: [ Router.State ],
 *     render() {
 *       var className = this.props.className;
 *
 *       if (this.isActive('about'))
 *         className += ' is-active';
 *
 *       return React.DOM.a({ className: className }, this.props.children);
 *     }
 *   });
 */
var State = {

  contextTypes: {
    router: PropTypes.router.isRequired
  },

  /**
   * Returns the current URL path.
   */
  getPath: function getPath() {
    return this.context.router.getCurrentPath();
  },

  /**
   * Returns the current URL path without the query string.
   */
  getPathname: function getPathname() {
    return this.context.router.getCurrentPathname();
  },

  /**
   * Returns an object of the URL params that are currently active.
   */
  getParams: function getParams() {
    return this.context.router.getCurrentParams();
  },

  /**
   * Returns an object of the query params that are currently active.
   */
  getQuery: function getQuery() {
    return this.context.router.getCurrentQuery();
  },

  /**
   * Returns an array of the routes that are currently active.
   */
  getRoutes: function getRoutes() {
    return this.context.router.getCurrentRoutes();
  },

  /**
   * A helper method to determine if a given route, params, and query
   * are active.
   */
  isActive: function isActive(to, params, query) {
    return this.context.router.isActive(to, params, query);
  }

};

module.exports = State;
},{"./PropTypes":176}],181:[function(require,module,exports){
/* jshint -W058 */

'use strict';

var Cancellation = require('./Cancellation');
var Redirect = require('./Redirect');

/**
 * Encapsulates a transition to a given path.
 *
 * The willTransitionTo and willTransitionFrom handlers receive
 * an instance of this class as their first argument.
 */
function Transition(path, retry) {
  this.path = path;
  this.abortReason = null;
  // TODO: Change this to router.retryTransition(transition)
  this.retry = retry.bind(this);
}

Transition.prototype.abort = function (reason) {
  if (this.abortReason == null) this.abortReason = reason || 'ABORT';
};

Transition.prototype.redirect = function (to, params, query) {
  this.abort(new Redirect(to, params, query));
};

Transition.prototype.cancel = function () {
  this.abort(new Cancellation());
};

Transition.from = function (transition, routes, components, callback) {
  routes.reduce(function (callback, route, index) {
    return function (error) {
      if (error || transition.abortReason) {
        callback(error);
      } else if (route.onLeave) {
        try {
          route.onLeave(transition, components[index], callback);

          // If there is no callback in the argument list, call it automatically.
          if (route.onLeave.length < 3) callback();
        } catch (e) {
          callback(e);
        }
      } else {
        callback();
      }
    };
  }, callback)();
};

Transition.to = function (transition, routes, params, query, callback) {
  routes.reduceRight(function (callback, route) {
    return function (error) {
      if (error || transition.abortReason) {
        callback(error);
      } else if (route.onEnter) {
        try {
          route.onEnter(transition, params, query, callback);

          // If there is no callback in the argument list, call it automatically.
          if (route.onEnter.length < 4) callback();
        } catch (e) {
          callback(e);
        }
      } else {
        callback();
      }
    };
  }, callback)();
};

module.exports = Transition;
},{"./Cancellation":171,"./Redirect":177}],182:[function(require,module,exports){
/**
 * Actions that modify the URL.
 */
'use strict';

var LocationActions = {

  /**
   * Indicates a new location is being pushed to the history stack.
   */
  PUSH: 'push',

  /**
   * Indicates the current location should be replaced.
   */
  REPLACE: 'replace',

  /**
   * Indicates the most recent entry should be removed from the history stack.
   */
  POP: 'pop'

};

module.exports = LocationActions;
},{}],183:[function(require,module,exports){
'use strict';

var LocationActions = require('../actions/LocationActions');

/**
 * A scroll behavior that attempts to imitate the default behavior
 * of modern browsers.
 */
var ImitateBrowserBehavior = {

  updateScrollPosition: function updateScrollPosition(position, actionType) {
    switch (actionType) {
      case LocationActions.PUSH:
      case LocationActions.REPLACE:
        window.scrollTo(0, 0);
        break;
      case LocationActions.POP:
        if (position) {
          window.scrollTo(position.x, position.y);
        } else {
          window.scrollTo(0, 0);
        }
        break;
    }
  }

};

module.exports = ImitateBrowserBehavior;
},{"../actions/LocationActions":182}],184:[function(require,module,exports){
/**
 * A scroll behavior that always scrolls to the top of the page
 * after a transition.
 */
"use strict";

var ScrollToTopBehavior = {

  updateScrollPosition: function updateScrollPosition() {
    window.scrollTo(0, 0);
  }

};

module.exports = ScrollToTopBehavior;
},{}],185:[function(require,module,exports){
'use strict';

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

/**
 * This component is necessary to get around a context warning
 * present in React 0.13.0. It sovles this by providing a separation
 * between the "owner" and "parent" contexts.
 */

var React = require('react');

var ContextWrapper = (function (_React$Component) {
  function ContextWrapper() {
    _classCallCheck(this, ContextWrapper);

    if (_React$Component != null) {
      _React$Component.apply(this, arguments);
    }
  }

  _inherits(ContextWrapper, _React$Component);

  _createClass(ContextWrapper, [{
    key: 'render',
    value: function render() {
      return this.props.children;
    }
  }]);

  return ContextWrapper;
})(React.Component);

module.exports = ContextWrapper;
},{"react":364}],186:[function(require,module,exports){
'use strict';

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var PropTypes = require('../PropTypes');
var RouteHandler = require('./RouteHandler');
var Route = require('./Route');

/**
 * A <DefaultRoute> component is a special kind of <Route> that
 * renders when its parent matches but none of its siblings do.
 * Only one such route may be used at any given level in the
 * route hierarchy.
 */

var DefaultRoute = (function (_Route) {
  function DefaultRoute() {
    _classCallCheck(this, DefaultRoute);

    if (_Route != null) {
      _Route.apply(this, arguments);
    }
  }

  _inherits(DefaultRoute, _Route);

  return DefaultRoute;
})(Route);

// TODO: Include these in the above class definition
// once we can use ES7 property initializers.
// https://github.com/babel/babel/issues/619

DefaultRoute.propTypes = {
  name: PropTypes.string,
  path: PropTypes.falsy,
  children: PropTypes.falsy,
  handler: PropTypes.func.isRequired
};

DefaultRoute.defaultProps = {
  handler: RouteHandler
};

module.exports = DefaultRoute;
},{"../PropTypes":176,"./Route":190,"./RouteHandler":191}],187:[function(require,module,exports){
'use strict';

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var React = require('react');
var assign = require('react/lib/Object.assign');
var PropTypes = require('../PropTypes');

function isLeftClickEvent(event) {
  return event.button === 0;
}

function isModifiedEvent(event) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}

/**
 * <Link> components are used to create an <a> element that links to a route.
 * When that route is active, the link gets an "active" class name (or the
 * value of its `activeClassName` prop).
 *
 * For example, assuming you have the following route:
 *
 *   <Route name="showPost" path="/posts/:postID" handler={Post}/>
 *
 * You could use the following component to link to that route:
 *
 *   <Link to="showPost" params={{ postID: "123" }} />
 *
 * In addition to params, links may pass along query string parameters
 * using the `query` prop.
 *
 *   <Link to="showPost" params={{ postID: "123" }} query={{ show:true }}/>
 */

var Link = (function (_React$Component) {
  function Link() {
    _classCallCheck(this, Link);

    if (_React$Component != null) {
      _React$Component.apply(this, arguments);
    }
  }

  _inherits(Link, _React$Component);

  _createClass(Link, [{
    key: 'handleClick',
    value: function handleClick(event) {
      var allowTransition = true;
      var clickResult;

      if (this.props.onClick) clickResult = this.props.onClick(event);

      if (isModifiedEvent(event) || !isLeftClickEvent(event)) {
        return;
      }if (clickResult === false || event.defaultPrevented === true) allowTransition = false;

      event.preventDefault();

      if (allowTransition) this.context.router.transitionTo(this.props.to, this.props.params, this.props.query);
    }
  }, {
    key: 'getHref',

    /**
     * Returns the value of the "href" attribute to use on the DOM element.
     */
    value: function getHref() {
      return this.context.router.makeHref(this.props.to, this.props.params, this.props.query);
    }
  }, {
    key: 'getClassName',

    /**
     * Returns the value of the "class" attribute to use on the DOM element, which contains
     * the value of the activeClassName property when this <Link> is active.
     */
    value: function getClassName() {
      var className = this.props.className;

      if (this.getActiveState()) className += ' ' + this.props.activeClassName;

      return className;
    }
  }, {
    key: 'getActiveState',
    value: function getActiveState() {
      return this.context.router.isActive(this.props.to, this.props.params, this.props.query);
    }
  }, {
    key: 'render',
    value: function render() {
      var props = assign({}, this.props, {
        href: this.getHref(),
        className: this.getClassName(),
        onClick: this.handleClick.bind(this)
      });

      if (props.activeStyle && this.getActiveState()) props.style = props.activeStyle;

      return React.DOM.a(props, this.props.children);
    }
  }]);

  return Link;
})(React.Component);

// TODO: Include these in the above class definition
// once we can use ES7 property initializers.
// https://github.com/babel/babel/issues/619

Link.contextTypes = {
  router: PropTypes.router.isRequired
};

Link.propTypes = {
  activeClassName: PropTypes.string.isRequired,
  to: PropTypes.oneOfType([PropTypes.string, PropTypes.route]).isRequired,
  params: PropTypes.object,
  query: PropTypes.object,
  activeStyle: PropTypes.object,
  onClick: PropTypes.func
};

Link.defaultProps = {
  activeClassName: 'active',
  className: ''
};

module.exports = Link;
},{"../PropTypes":176,"react":364,"react/lib/Object.assign":235}],188:[function(require,module,exports){
'use strict';

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var PropTypes = require('../PropTypes');
var RouteHandler = require('./RouteHandler');
var Route = require('./Route');

/**
 * A <NotFoundRoute> is a special kind of <Route> that
 * renders when the beginning of its parent's path matches
 * but none of its siblings do, including any <DefaultRoute>.
 * Only one such route may be used at any given level in the
 * route hierarchy.
 */

var NotFoundRoute = (function (_Route) {
  function NotFoundRoute() {
    _classCallCheck(this, NotFoundRoute);

    if (_Route != null) {
      _Route.apply(this, arguments);
    }
  }

  _inherits(NotFoundRoute, _Route);

  return NotFoundRoute;
})(Route);

// TODO: Include these in the above class definition
// once we can use ES7 property initializers.
// https://github.com/babel/babel/issues/619

NotFoundRoute.propTypes = {
  name: PropTypes.string,
  path: PropTypes.falsy,
  children: PropTypes.falsy,
  handler: PropTypes.func.isRequired
};

NotFoundRoute.defaultProps = {
  handler: RouteHandler
};

module.exports = NotFoundRoute;
},{"../PropTypes":176,"./Route":190,"./RouteHandler":191}],189:[function(require,module,exports){
'use strict';

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var PropTypes = require('../PropTypes');
var Route = require('./Route');

/**
 * A <Redirect> component is a special kind of <Route> that always
 * redirects to another route when it matches.
 */

var Redirect = (function (_Route) {
  function Redirect() {
    _classCallCheck(this, Redirect);

    if (_Route != null) {
      _Route.apply(this, arguments);
    }
  }

  _inherits(Redirect, _Route);

  return Redirect;
})(Route);

// TODO: Include these in the above class definition
// once we can use ES7 property initializers.
// https://github.com/babel/babel/issues/619

Redirect.propTypes = {
  path: PropTypes.string,
  from: PropTypes.string, // Alias for path.
  to: PropTypes.string,
  handler: PropTypes.falsy
};

// Redirects should not have a default handler
Redirect.defaultProps = {};

module.exports = Redirect;
},{"../PropTypes":176,"./Route":190}],190:[function(require,module,exports){
'use strict';

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var React = require('react');
var invariant = require('react/lib/invariant');
var PropTypes = require('../PropTypes');
var RouteHandler = require('./RouteHandler');

/**
 * <Route> components specify components that are rendered to the page when the
 * URL matches a given pattern.
 *
 * Routes are arranged in a nested tree structure. When a new URL is requested,
 * the tree is searched depth-first to find a route whose path matches the URL.
 * When one is found, all routes in the tree that lead to it are considered
 * "active" and their components are rendered into the DOM, nested in the same
 * order as they are in the tree.
 *
 * The preferred way to configure a router is using JSX. The XML-like syntax is
 * a great way to visualize how routes are laid out in an application.
 *
 *   var routes = [
 *     <Route handler={App}>
 *       <Route name="login" handler={Login}/>
 *       <Route name="logout" handler={Logout}/>
 *       <Route name="about" handler={About}/>
 *     </Route>
 *   ];
 *   
 *   Router.run(routes, function (Handler) {
 *     React.render(<Handler/>, document.body);
 *   });
 *
 * Handlers for Route components that contain children can render their active
 * child route using a <RouteHandler> element.
 *
 *   var App = React.createClass({
 *     render: function () {
 *       return (
 *         <div class="application">
 *           <RouteHandler/>
 *         </div>
 *       );
 *     }
 *   });
 *
 * If no handler is provided for the route, it will render a matched child route.
 */

var Route = (function (_React$Component) {
  function Route() {
    _classCallCheck(this, Route);

    if (_React$Component != null) {
      _React$Component.apply(this, arguments);
    }
  }

  _inherits(Route, _React$Component);

  _createClass(Route, [{
    key: 'render',
    value: function render() {
      invariant(false, '%s elements are for router configuration only and should not be rendered', this.constructor.name);
    }
  }]);

  return Route;
})(React.Component);

// TODO: Include these in the above class definition
// once we can use ES7 property initializers.
// https://github.com/babel/babel/issues/619

Route.propTypes = {
  name: PropTypes.string,
  path: PropTypes.string,
  handler: PropTypes.func,
  ignoreScrollBehavior: PropTypes.bool
};

Route.defaultProps = {
  handler: RouteHandler
};

module.exports = Route;
},{"../PropTypes":176,"./RouteHandler":191,"react":364,"react/lib/invariant":344}],191:[function(require,module,exports){
'use strict';

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var React = require('react');
var ContextWrapper = require('./ContextWrapper');
var assign = require('react/lib/Object.assign');
var PropTypes = require('../PropTypes');

var REF_NAME = '__routeHandler__';

/**
 * A <RouteHandler> component renders the active child route handler
 * when routes are nested.
 */

var RouteHandler = (function (_React$Component) {
  function RouteHandler() {
    _classCallCheck(this, RouteHandler);

    if (_React$Component != null) {
      _React$Component.apply(this, arguments);
    }
  }

  _inherits(RouteHandler, _React$Component);

  _createClass(RouteHandler, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        routeDepth: this.context.routeDepth + 1
      };
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._updateRouteComponent(this.refs[REF_NAME]);
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this._updateRouteComponent(this.refs[REF_NAME]);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._updateRouteComponent(null);
    }
  }, {
    key: '_updateRouteComponent',
    value: function _updateRouteComponent(component) {
      this.context.router.setRouteComponentAtDepth(this.getRouteDepth(), component);
    }
  }, {
    key: 'getRouteDepth',
    value: function getRouteDepth() {
      return this.context.routeDepth;
    }
  }, {
    key: 'createChildRouteHandler',
    value: function createChildRouteHandler(props) {
      var route = this.context.router.getRouteAtDepth(this.getRouteDepth());

      if (route == null) {
        return null;
      }var childProps = assign({}, props || this.props, {
        ref: REF_NAME,
        params: this.context.router.getCurrentParams(),
        query: this.context.router.getCurrentQuery()
      });

      return React.createElement(route.handler, childProps);
    }
  }, {
    key: 'render',
    value: function render() {
      var handler = this.createChildRouteHandler();
      // <script/> for things like <CSSTransitionGroup/> that don't like null
      return handler ? React.createElement(
        ContextWrapper,
        null,
        handler
      ) : React.createElement('script', null);
    }
  }]);

  return RouteHandler;
})(React.Component);

// TODO: Include these in the above class definition
// once we can use ES7 property initializers.
// https://github.com/babel/babel/issues/619

RouteHandler.contextTypes = {
  routeDepth: PropTypes.number.isRequired,
  router: PropTypes.router.isRequired
};

RouteHandler.childContextTypes = {
  routeDepth: PropTypes.number.isRequired
};

module.exports = RouteHandler;
},{"../PropTypes":176,"./ContextWrapper":185,"react":364,"react/lib/Object.assign":235}],192:[function(require,module,exports){
(function (process){
/* jshint -W058 */
'use strict';

var React = require('react');
var warning = require('react/lib/warning');
var invariant = require('react/lib/invariant');
var canUseDOM = require('react/lib/ExecutionEnvironment').canUseDOM;
var LocationActions = require('./actions/LocationActions');
var ImitateBrowserBehavior = require('./behaviors/ImitateBrowserBehavior');
var HashLocation = require('./locations/HashLocation');
var HistoryLocation = require('./locations/HistoryLocation');
var RefreshLocation = require('./locations/RefreshLocation');
var StaticLocation = require('./locations/StaticLocation');
var ScrollHistory = require('./ScrollHistory');
var createRoutesFromReactChildren = require('./createRoutesFromReactChildren');
var isReactChildren = require('./isReactChildren');
var Transition = require('./Transition');
var PropTypes = require('./PropTypes');
var Redirect = require('./Redirect');
var History = require('./History');
var Cancellation = require('./Cancellation');
var Match = require('./Match');
var Route = require('./Route');
var supportsHistory = require('./supportsHistory');
var PathUtils = require('./PathUtils');

/**
 * The default location for new routers.
 */
var DEFAULT_LOCATION = canUseDOM ? HashLocation : '/';

/**
 * The default scroll behavior for new routers.
 */
var DEFAULT_SCROLL_BEHAVIOR = canUseDOM ? ImitateBrowserBehavior : null;

function hasProperties(object, properties) {
  for (var propertyName in properties) if (properties.hasOwnProperty(propertyName) && object[propertyName] !== properties[propertyName]) {
    return false;
  }return true;
}

function hasMatch(routes, route, prevParams, nextParams, prevQuery, nextQuery) {
  return routes.some(function (r) {
    if (r !== route) return false;

    var paramNames = route.paramNames;
    var paramName;

    // Ensure that all params the route cares about did not change.
    for (var i = 0, len = paramNames.length; i < len; ++i) {
      paramName = paramNames[i];

      if (nextParams[paramName] !== prevParams[paramName]) return false;
    }

    // Ensure the query hasn't changed.
    return hasProperties(prevQuery, nextQuery) && hasProperties(nextQuery, prevQuery);
  });
}

function addRoutesToNamedRoutes(routes, namedRoutes) {
  var route;
  for (var i = 0, len = routes.length; i < len; ++i) {
    route = routes[i];

    if (route.name) {
      invariant(namedRoutes[route.name] == null, 'You may not have more than one route named "%s"', route.name);

      namedRoutes[route.name] = route;
    }

    if (route.childRoutes) addRoutesToNamedRoutes(route.childRoutes, namedRoutes);
  }
}

function routeIsActive(activeRoutes, routeName) {
  return activeRoutes.some(function (route) {
    return route.name === routeName;
  });
}

function paramsAreActive(activeParams, params) {
  for (var property in params) if (String(activeParams[property]) !== String(params[property])) {
    return false;
  }return true;
}

function queryIsActive(activeQuery, query) {
  for (var property in query) if (String(activeQuery[property]) !== String(query[property])) {
    return false;
  }return true;
}

/**
 * Creates and returns a new router using the given options. A router
 * is a ReactComponent class that knows how to react to changes in the
 * URL and keep the contents of the page in sync.
 *
 * Options may be any of the following:
 *
 * - routes           (required) The route config
 * - location         The location to use. Defaults to HashLocation when
 *                    the DOM is available, "/" otherwise
 * - scrollBehavior   The scroll behavior to use. Defaults to ImitateBrowserBehavior
 *                    when the DOM is available, null otherwise
 * - onError          A function that is used to handle errors
 * - onAbort          A function that is used to handle aborted transitions
 *
 * When rendering in a server-side environment, the location should simply
 * be the URL path that was used in the request, including the query string.
 */
function createRouter(options) {
  options = options || {};

  if (isReactChildren(options)) options = { routes: options };

  var mountedComponents = [];
  var location = options.location || DEFAULT_LOCATION;
  var scrollBehavior = options.scrollBehavior || DEFAULT_SCROLL_BEHAVIOR;
  var state = {};
  var nextState = {};
  var pendingTransition = null;
  var dispatchHandler = null;

  if (typeof location === 'string') location = new StaticLocation(location);

  if (location instanceof StaticLocation) {
    warning(!canUseDOM || process.env.NODE_ENV === 'test', 'You should not use a static location in a DOM environment because ' + 'the router will not be kept in sync with the current URL');
  } else {
    invariant(canUseDOM || location.needsDOM === false, 'You cannot use %s without a DOM', location);
  }

  // Automatically fall back to full page refreshes in
  // browsers that don't support the HTML history API.
  if (location === HistoryLocation && !supportsHistory()) location = RefreshLocation;

  var Router = React.createClass({

    displayName: 'Router',

    statics: {

      isRunning: false,

      cancelPendingTransition: function cancelPendingTransition() {
        if (pendingTransition) {
          pendingTransition.cancel();
          pendingTransition = null;
        }
      },

      clearAllRoutes: function clearAllRoutes() {
        Router.cancelPendingTransition();
        Router.namedRoutes = {};
        Router.routes = [];
      },

      /**
       * Adds routes to this router from the given children object (see ReactChildren).
       */
      addRoutes: function addRoutes(routes) {
        if (isReactChildren(routes)) routes = createRoutesFromReactChildren(routes);

        addRoutesToNamedRoutes(routes, Router.namedRoutes);

        Router.routes.push.apply(Router.routes, routes);
      },

      /**
       * Replaces routes of this router from the given children object (see ReactChildren).
       */
      replaceRoutes: function replaceRoutes(routes) {
        Router.clearAllRoutes();
        Router.addRoutes(routes);
        Router.refresh();
      },

      /**
       * Performs a match of the given path against this router and returns an object
       * with the { routes, params, pathname, query } that match. Returns null if no
       * match can be made.
       */
      match: function match(path) {
        return Match.findMatch(Router.routes, path);
      },

      /**
       * Returns an absolute URL path created from the given route
       * name, URL parameters, and query.
       */
      makePath: function makePath(to, params, query) {
        var path;
        if (PathUtils.isAbsolute(to)) {
          path = to;
        } else {
          var route = to instanceof Route ? to : Router.namedRoutes[to];

          invariant(route instanceof Route, 'Cannot find a route named "%s"', to);

          path = route.path;
        }

        return PathUtils.withQuery(PathUtils.injectParams(path, params), query);
      },

      /**
       * Returns a string that may safely be used as the href of a link
       * to the route with the given name, URL parameters, and query.
       */
      makeHref: function makeHref(to, params, query) {
        var path = Router.makePath(to, params, query);
        return location === HashLocation ? '#' + path : path;
      },

      /**
       * Transitions to the URL specified in the arguments by pushing
       * a new URL onto the history stack.
       */
      transitionTo: function transitionTo(to, params, query) {
        var path = Router.makePath(to, params, query);

        if (pendingTransition) {
          // Replace so pending location does not stay in history.
          location.replace(path);
        } else {
          location.push(path);
        }
      },

      /**
       * Transitions to the URL specified in the arguments by replacing
       * the current URL in the history stack.
       */
      replaceWith: function replaceWith(to, params, query) {
        location.replace(Router.makePath(to, params, query));
      },

      /**
       * Transitions to the previous URL if one is available. Returns true if the
       * router was able to go back, false otherwise.
       *
       * Note: The router only tracks history entries in your application, not the
       * current browser session, so you can safely call this function without guarding
       * against sending the user back to some other site. However, when using
       * RefreshLocation (which is the fallback for HistoryLocation in browsers that
       * don't support HTML5 history) this method will *always* send the client back
       * because we cannot reliably track history length.
       */
      goBack: function goBack() {
        if (History.length > 1 || location === RefreshLocation) {
          location.pop();
          return true;
        }

        warning(false, 'goBack() was ignored because there is no router history');

        return false;
      },

      handleAbort: options.onAbort || function (abortReason) {
        if (location instanceof StaticLocation) throw new Error('Unhandled aborted transition! Reason: ' + abortReason);

        if (abortReason instanceof Cancellation) {
          return;
        } else if (abortReason instanceof Redirect) {
          location.replace(Router.makePath(abortReason.to, abortReason.params, abortReason.query));
        } else {
          location.pop();
        }
      },

      handleError: options.onError || function (error) {
        // Throw so we don't silently swallow async errors.
        throw error; // This error probably originated in a transition hook.
      },

      handleLocationChange: function handleLocationChange(change) {
        Router.dispatch(change.path, change.type);
      },

      /**
       * Performs a transition to the given path and calls callback(error, abortReason)
       * when the transition is finished. If both arguments are null the router's state
       * was updated. Otherwise the transition did not complete.
       *
       * In a transition, a router first determines which routes are involved by beginning
       * with the current route, up the route tree to the first parent route that is shared
       * with the destination route, and back down the tree to the destination route. The
       * willTransitionFrom hook is invoked on all route handlers we're transitioning away
       * from, in reverse nesting order. Likewise, the willTransitionTo hook is invoked on
       * all route handlers we're transitioning to.
       *
       * Both willTransitionFrom and willTransitionTo hooks may either abort or redirect the
       * transition. To resolve asynchronously, they may use the callback argument. If no
       * hooks wait, the transition is fully synchronous.
       */
      dispatch: function dispatch(path, action) {
        Router.cancelPendingTransition();

        var prevPath = state.path;
        var isRefreshing = action == null;

        if (prevPath === path && !isRefreshing) {
          return;
        } // Nothing to do!

        // Record the scroll position as early as possible to
        // get it before browsers try update it automatically.
        if (prevPath && action === LocationActions.PUSH) Router.recordScrollPosition(prevPath);

        var match = Router.match(path);

        warning(match != null, 'No route matches path "%s". Make sure you have <Route path="%s"> somewhere in your routes', path, path);

        if (match == null) match = {};

        var prevRoutes = state.routes || [];
        var prevParams = state.params || {};
        var prevQuery = state.query || {};

        var nextRoutes = match.routes || [];
        var nextParams = match.params || {};
        var nextQuery = match.query || {};

        var fromRoutes, toRoutes;
        if (prevRoutes.length) {
          fromRoutes = prevRoutes.filter(function (route) {
            return !hasMatch(nextRoutes, route, prevParams, nextParams, prevQuery, nextQuery);
          });

          toRoutes = nextRoutes.filter(function (route) {
            return !hasMatch(prevRoutes, route, prevParams, nextParams, prevQuery, nextQuery);
          });
        } else {
          fromRoutes = [];
          toRoutes = nextRoutes;
        }

        var transition = new Transition(path, Router.replaceWith.bind(Router, path));
        pendingTransition = transition;

        var fromComponents = mountedComponents.slice(prevRoutes.length - fromRoutes.length);

        Transition.from(transition, fromRoutes, fromComponents, function (error) {
          if (error || transition.abortReason) return dispatchHandler.call(Router, error, transition); // No need to continue.

          Transition.to(transition, toRoutes, nextParams, nextQuery, function (error) {
            dispatchHandler.call(Router, error, transition, {
              path: path,
              action: action,
              pathname: match.pathname,
              routes: nextRoutes,
              params: nextParams,
              query: nextQuery
            });
          });
        });
      },

      /**
       * Starts this router and calls callback(router, state) when the route changes.
       *
       * If the router's location is static (i.e. a URL path in a server environment)
       * the callback is called only once. Otherwise, the location should be one of the
       * Router.*Location objects (e.g. Router.HashLocation or Router.HistoryLocation).
       */
      run: function run(callback) {
        invariant(!Router.isRunning, 'Router is already running');

        dispatchHandler = function (error, transition, newState) {
          if (error) Router.handleError(error);

          if (pendingTransition !== transition) return;

          pendingTransition = null;

          if (transition.abortReason) {
            Router.handleAbort(transition.abortReason);
          } else {
            callback.call(Router, Router, nextState = newState);
          }
        };

        if (!(location instanceof StaticLocation)) {
          if (location.addChangeListener) location.addChangeListener(Router.handleLocationChange);

          Router.isRunning = true;
        }

        // Bootstrap using the current path.
        Router.refresh();
      },

      refresh: function refresh() {
        Router.dispatch(location.getCurrentPath(), null);
      },

      stop: function stop() {
        Router.cancelPendingTransition();

        if (location.removeChangeListener) location.removeChangeListener(Router.handleLocationChange);

        Router.isRunning = false;
      },

      getLocation: function getLocation() {
        return location;
      },

      getScrollBehavior: function getScrollBehavior() {
        return scrollBehavior;
      },

      getRouteAtDepth: function getRouteAtDepth(routeDepth) {
        var routes = state.routes;
        return routes && routes[routeDepth];
      },

      setRouteComponentAtDepth: function setRouteComponentAtDepth(routeDepth, component) {
        mountedComponents[routeDepth] = component;
      },

      /**
       * Returns the current URL path + query string.
       */
      getCurrentPath: function getCurrentPath() {
        return state.path;
      },

      /**
       * Returns the current URL path without the query string.
       */
      getCurrentPathname: function getCurrentPathname() {
        return state.pathname;
      },

      /**
       * Returns an object of the currently active URL parameters.
       */
      getCurrentParams: function getCurrentParams() {
        return state.params;
      },

      /**
       * Returns an object of the currently active query parameters.
       */
      getCurrentQuery: function getCurrentQuery() {
        return state.query;
      },

      /**
       * Returns an array of the currently active routes.
       */
      getCurrentRoutes: function getCurrentRoutes() {
        return state.routes;
      },

      /**
       * Returns true if the given route, params, and query are active.
       */
      isActive: function isActive(to, params, query) {
        if (PathUtils.isAbsolute(to)) {
          return to === state.path;
        }return routeIsActive(state.routes, to) && paramsAreActive(state.params, params) && (query == null || queryIsActive(state.query, query));
      }

    },

    mixins: [ScrollHistory],

    propTypes: {
      children: PropTypes.falsy
    },

    childContextTypes: {
      routeDepth: PropTypes.number.isRequired,
      router: PropTypes.router.isRequired
    },

    getChildContext: function getChildContext() {
      return {
        routeDepth: 1,
        router: Router
      };
    },

    getInitialState: function getInitialState() {
      return state = nextState;
    },

    componentWillReceiveProps: function componentWillReceiveProps() {
      this.setState(state = nextState);
    },

    componentWillUnmount: function componentWillUnmount() {
      Router.stop();
    },

    render: function render() {
      var route = Router.getRouteAtDepth(0);
      return route ? React.createElement(route.handler, this.props) : null;
    }

  });

  Router.clearAllRoutes();

  if (options.routes) Router.addRoutes(options.routes);

  return Router;
}

module.exports = createRouter;
}).call(this,require('_process'))

},{"./Cancellation":171,"./History":172,"./Match":173,"./PathUtils":175,"./PropTypes":176,"./Redirect":177,"./Route":178,"./ScrollHistory":179,"./Transition":181,"./actions/LocationActions":182,"./behaviors/ImitateBrowserBehavior":183,"./createRoutesFromReactChildren":193,"./isReactChildren":196,"./locations/HashLocation":197,"./locations/HistoryLocation":198,"./locations/RefreshLocation":199,"./locations/StaticLocation":200,"./supportsHistory":203,"_process":166,"react":364,"react/lib/ExecutionEnvironment":229,"react/lib/invariant":344,"react/lib/warning":363}],193:[function(require,module,exports){
/* jshint -W084 */
'use strict';

var React = require('react');
var assign = require('react/lib/Object.assign');
var warning = require('react/lib/warning');
var DefaultRoute = require('./components/DefaultRoute');
var NotFoundRoute = require('./components/NotFoundRoute');
var Redirect = require('./components/Redirect');
var Route = require('./Route');

function checkPropTypes(componentName, propTypes, props) {
  componentName = componentName || 'UnknownComponent';

  for (var propName in propTypes) {
    if (propTypes.hasOwnProperty(propName)) {
      var error = propTypes[propName](props, propName, componentName);

      if (error instanceof Error) warning(false, error.message);
    }
  }
}

function createRouteOptions(props) {
  var options = assign({}, props);
  var handler = options.handler;

  if (handler) {
    options.onEnter = handler.willTransitionTo;
    options.onLeave = handler.willTransitionFrom;
  }

  return options;
}

function createRouteFromReactElement(element) {
  if (!React.isValidElement(element)) {
    return;
  }var type = element.type;
  var props = assign({}, type.defaultProps, element.props);

  if (type.propTypes) checkPropTypes(type.displayName, type.propTypes, props);

  if (type === DefaultRoute) {
    return Route.createDefaultRoute(createRouteOptions(props));
  }if (type === NotFoundRoute) {
    return Route.createNotFoundRoute(createRouteOptions(props));
  }if (type === Redirect) {
    return Route.createRedirect(createRouteOptions(props));
  }return Route.createRoute(createRouteOptions(props), function () {
    if (props.children) createRoutesFromReactChildren(props.children);
  });
}

/**
 * Creates and returns an array of routes created from the given
 * ReactChildren, all of which should be one of <Route>, <DefaultRoute>,
 * <NotFoundRoute>, or <Redirect>, e.g.:
 *
 *   var { createRoutesFromReactChildren, Route, Redirect } = require('react-router');
 *
 *   var routes = createRoutesFromReactChildren(
 *     <Route path="/" handler={App}>
 *       <Route name="user" path="/user/:userId" handler={User}>
 *         <Route name="task" path="tasks/:taskId" handler={Task}/>
 *         <Redirect from="todos/:taskId" to="task"/>
 *       </Route>
 *     </Route>
 *   );
 */
function createRoutesFromReactChildren(children) {
  var routes = [];

  React.Children.forEach(children, function (child) {
    if (child = createRouteFromReactElement(child)) routes.push(child);
  });

  return routes;
}

module.exports = createRoutesFromReactChildren;
},{"./Route":178,"./components/DefaultRoute":186,"./components/NotFoundRoute":188,"./components/Redirect":189,"react":364,"react/lib/Object.assign":235,"react/lib/warning":363}],194:[function(require,module,exports){
'use strict';

var invariant = require('react/lib/invariant');
var canUseDOM = require('react/lib/ExecutionEnvironment').canUseDOM;

/**
 * Returns the current scroll position of the window as { x, y }.
 */
function getWindowScrollPosition() {
  invariant(canUseDOM, 'Cannot get current scroll position without a DOM');

  return {
    x: window.pageXOffset || document.documentElement.scrollLeft,
    y: window.pageYOffset || document.documentElement.scrollTop
  };
}

module.exports = getWindowScrollPosition;
},{"react/lib/ExecutionEnvironment":229,"react/lib/invariant":344}],195:[function(require,module,exports){
'use strict';

exports.DefaultRoute = require('./components/DefaultRoute');
exports.Link = require('./components/Link');
exports.NotFoundRoute = require('./components/NotFoundRoute');
exports.Redirect = require('./components/Redirect');
exports.Route = require('./components/Route');
exports.ActiveHandler = require('./components/RouteHandler');
exports.RouteHandler = exports.ActiveHandler;

exports.HashLocation = require('./locations/HashLocation');
exports.HistoryLocation = require('./locations/HistoryLocation');
exports.RefreshLocation = require('./locations/RefreshLocation');
exports.StaticLocation = require('./locations/StaticLocation');
exports.TestLocation = require('./locations/TestLocation');

exports.ImitateBrowserBehavior = require('./behaviors/ImitateBrowserBehavior');
exports.ScrollToTopBehavior = require('./behaviors/ScrollToTopBehavior');

exports.History = require('./History');
exports.Navigation = require('./Navigation');
exports.State = require('./State');

exports.createRoute = require('./Route').createRoute;
exports.createDefaultRoute = require('./Route').createDefaultRoute;
exports.createNotFoundRoute = require('./Route').createNotFoundRoute;
exports.createRedirect = require('./Route').createRedirect;
exports.createRoutesFromReactChildren = require('./createRoutesFromReactChildren');

exports.create = require('./createRouter');
exports.run = require('./runRouter');
},{"./History":172,"./Navigation":174,"./Route":178,"./State":180,"./behaviors/ImitateBrowserBehavior":183,"./behaviors/ScrollToTopBehavior":184,"./components/DefaultRoute":186,"./components/Link":187,"./components/NotFoundRoute":188,"./components/Redirect":189,"./components/Route":190,"./components/RouteHandler":191,"./createRouter":192,"./createRoutesFromReactChildren":193,"./locations/HashLocation":197,"./locations/HistoryLocation":198,"./locations/RefreshLocation":199,"./locations/StaticLocation":200,"./locations/TestLocation":201,"./runRouter":202}],196:[function(require,module,exports){
'use strict';

var React = require('react');

function isValidChild(object) {
  return object == null || React.isValidElement(object);
}

function isReactChildren(object) {
  return isValidChild(object) || Array.isArray(object) && object.every(isValidChild);
}

module.exports = isReactChildren;
},{"react":364}],197:[function(require,module,exports){
'use strict';

var LocationActions = require('../actions/LocationActions');
var History = require('../History');

var _listeners = [];
var _isListening = false;
var _actionType;

function notifyChange(type) {
  if (type === LocationActions.PUSH) History.length += 1;

  var change = {
    path: HashLocation.getCurrentPath(),
    type: type
  };

  _listeners.forEach(function (listener) {
    listener.call(HashLocation, change);
  });
}

function ensureSlash() {
  var path = HashLocation.getCurrentPath();

  if (path.charAt(0) === '/') {
    return true;
  }HashLocation.replace('/' + path);

  return false;
}

function onHashChange() {
  if (ensureSlash()) {
    // If we don't have an _actionType then all we know is the hash
    // changed. It was probably caused by the user clicking the Back
    // button, but may have also been the Forward button or manual
    // manipulation. So just guess 'pop'.
    var curActionType = _actionType;
    _actionType = null;
    notifyChange(curActionType || LocationActions.POP);
  }
}

/**
 * A Location that uses `window.location.hash`.
 */
var HashLocation = {

  addChangeListener: function addChangeListener(listener) {
    _listeners.push(listener);

    // Do this BEFORE listening for hashchange.
    ensureSlash();

    if (!_isListening) {
      if (window.addEventListener) {
        window.addEventListener('hashchange', onHashChange, false);
      } else {
        window.attachEvent('onhashchange', onHashChange);
      }

      _isListening = true;
    }
  },

  removeChangeListener: function removeChangeListener(listener) {
    _listeners = _listeners.filter(function (l) {
      return l !== listener;
    });

    if (_listeners.length === 0) {
      if (window.removeEventListener) {
        window.removeEventListener('hashchange', onHashChange, false);
      } else {
        window.removeEvent('onhashchange', onHashChange);
      }

      _isListening = false;
    }
  },

  push: function push(path) {
    _actionType = LocationActions.PUSH;
    window.location.hash = path;
  },

  replace: function replace(path) {
    _actionType = LocationActions.REPLACE;
    window.location.replace(window.location.pathname + window.location.search + '#' + path);
  },

  pop: function pop() {
    _actionType = LocationActions.POP;
    History.back();
  },

  getCurrentPath: function getCurrentPath() {
    return decodeURI(
    // We can't use window.location.hash here because it's not
    // consistent across browsers - Firefox will pre-decode it!
    window.location.href.split('#')[1] || '');
  },

  toString: function toString() {
    return '<HashLocation>';
  }

};

module.exports = HashLocation;
},{"../History":172,"../actions/LocationActions":182}],198:[function(require,module,exports){
'use strict';

var LocationActions = require('../actions/LocationActions');
var History = require('../History');

var _listeners = [];
var _isListening = false;

function notifyChange(type) {
  var change = {
    path: HistoryLocation.getCurrentPath(),
    type: type
  };

  _listeners.forEach(function (listener) {
    listener.call(HistoryLocation, change);
  });
}

function onPopState(event) {
  if (event.state === undefined) {
    return;
  } // Ignore extraneous popstate events in WebKit.

  notifyChange(LocationActions.POP);
}

/**
 * A Location that uses HTML5 history.
 */
var HistoryLocation = {

  addChangeListener: function addChangeListener(listener) {
    _listeners.push(listener);

    if (!_isListening) {
      if (window.addEventListener) {
        window.addEventListener('popstate', onPopState, false);
      } else {
        window.attachEvent('onpopstate', onPopState);
      }

      _isListening = true;
    }
  },

  removeChangeListener: function removeChangeListener(listener) {
    _listeners = _listeners.filter(function (l) {
      return l !== listener;
    });

    if (_listeners.length === 0) {
      if (window.addEventListener) {
        window.removeEventListener('popstate', onPopState, false);
      } else {
        window.removeEvent('onpopstate', onPopState);
      }

      _isListening = false;
    }
  },

  push: function push(path) {
    window.history.pushState({ path: path }, '', path);
    History.length += 1;
    notifyChange(LocationActions.PUSH);
  },

  replace: function replace(path) {
    window.history.replaceState({ path: path }, '', path);
    notifyChange(LocationActions.REPLACE);
  },

  pop: History.back,

  getCurrentPath: function getCurrentPath() {
    return decodeURI(window.location.pathname + window.location.search);
  },

  toString: function toString() {
    return '<HistoryLocation>';
  }

};

module.exports = HistoryLocation;
},{"../History":172,"../actions/LocationActions":182}],199:[function(require,module,exports){
'use strict';

var HistoryLocation = require('./HistoryLocation');
var History = require('../History');

/**
 * A Location that uses full page refreshes. This is used as
 * the fallback for HistoryLocation in browsers that do not
 * support the HTML5 history API.
 */
var RefreshLocation = {

  push: function push(path) {
    window.location = path;
  },

  replace: function replace(path) {
    window.location.replace(path);
  },

  pop: History.back,

  getCurrentPath: HistoryLocation.getCurrentPath,

  toString: function toString() {
    return '<RefreshLocation>';
  }

};

module.exports = RefreshLocation;
},{"../History":172,"./HistoryLocation":198}],200:[function(require,module,exports){
'use strict';

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var invariant = require('react/lib/invariant');

function throwCannotModify() {
  invariant(false, 'You cannot modify a static location');
}

/**
 * A location that only ever contains a single path. Useful in
 * stateless environments like servers where there is no path history,
 * only the path that was used in the request.
 */

var StaticLocation = (function () {
  function StaticLocation(path) {
    _classCallCheck(this, StaticLocation);

    this.path = path;
  }

  _createClass(StaticLocation, [{
    key: 'getCurrentPath',
    value: function getCurrentPath() {
      return this.path;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '<StaticLocation path="' + this.path + '">';
    }
  }]);

  return StaticLocation;
})();

// TODO: Include these in the above class definition
// once we can use ES7 property initializers.
// https://github.com/babel/babel/issues/619

StaticLocation.prototype.push = throwCannotModify;
StaticLocation.prototype.replace = throwCannotModify;
StaticLocation.prototype.pop = throwCannotModify;

module.exports = StaticLocation;
},{"react/lib/invariant":344}],201:[function(require,module,exports){
'use strict';

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var invariant = require('react/lib/invariant');
var LocationActions = require('../actions/LocationActions');
var History = require('../History');

/**
 * A location that is convenient for testing and does not require a DOM.
 */

var TestLocation = (function () {
  function TestLocation(history) {
    _classCallCheck(this, TestLocation);

    this.history = history || [];
    this.listeners = [];
    this._updateHistoryLength();
  }

  _createClass(TestLocation, [{
    key: 'needsDOM',
    get: function () {
      return false;
    }
  }, {
    key: '_updateHistoryLength',
    value: function _updateHistoryLength() {
      History.length = this.history.length;
    }
  }, {
    key: '_notifyChange',
    value: function _notifyChange(type) {
      var change = {
        path: this.getCurrentPath(),
        type: type
      };

      for (var i = 0, len = this.listeners.length; i < len; ++i) this.listeners[i].call(this, change);
    }
  }, {
    key: 'addChangeListener',
    value: function addChangeListener(listener) {
      this.listeners.push(listener);
    }
  }, {
    key: 'removeChangeListener',
    value: function removeChangeListener(listener) {
      this.listeners = this.listeners.filter(function (l) {
        return l !== listener;
      });
    }
  }, {
    key: 'push',
    value: function push(path) {
      this.history.push(path);
      this._updateHistoryLength();
      this._notifyChange(LocationActions.PUSH);
    }
  }, {
    key: 'replace',
    value: function replace(path) {
      invariant(this.history.length, 'You cannot replace the current path with no history');

      this.history[this.history.length - 1] = path;

      this._notifyChange(LocationActions.REPLACE);
    }
  }, {
    key: 'pop',
    value: function pop() {
      this.history.pop();
      this._updateHistoryLength();
      this._notifyChange(LocationActions.POP);
    }
  }, {
    key: 'getCurrentPath',
    value: function getCurrentPath() {
      return this.history[this.history.length - 1];
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '<TestLocation>';
    }
  }]);

  return TestLocation;
})();

module.exports = TestLocation;
},{"../History":172,"../actions/LocationActions":182,"react/lib/invariant":344}],202:[function(require,module,exports){
'use strict';

var createRouter = require('./createRouter');

/**
 * A high-level convenience method that creates, configures, and
 * runs a router in one shot. The method signature is:
 *
 *   Router.run(routes[, location ], callback);
 *
 * Using `window.location.hash` to manage the URL, you could do:
 *
 *   Router.run(routes, function (Handler) {
 *     React.render(<Handler/>, document.body);
 *   });
 * 
 * Using HTML5 history and a custom "cursor" prop:
 * 
 *   Router.run(routes, Router.HistoryLocation, function (Handler) {
 *     React.render(<Handler cursor={cursor}/>, document.body);
 *   });
 *
 * Returns the newly created router.
 *
 * Note: If you need to specify further options for your router such
 * as error/abort handling or custom scroll behavior, use Router.create
 * instead.
 *
 *   var router = Router.create(options);
 *   router.run(function (Handler) {
 *     // ...
 *   });
 */
function runRouter(routes, location, callback) {
  if (typeof location === 'function') {
    callback = location;
    location = null;
  }

  var router = createRouter({
    routes: routes,
    location: location
  });

  router.run(callback);

  return router;
}

module.exports = runRouter;
},{"./createRouter":192}],203:[function(require,module,exports){
'use strict';

function supportsHistory() {
  /*! taken from modernizr
   * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
   * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
   * changed to avoid false negatives for Windows Phones: https://github.com/rackt/react-router/issues/586
   */
  var ua = navigator.userAgent;
  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {
    return false;
  }
  return window.history && 'pushState' in window.history;
}

module.exports = supportsHistory;
},{}],204:[function(require,module,exports){
'use strict';

function ToObject(val) {
	if (val == null) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

module.exports = Object.assign || function (target, source) {
	var from;
	var keys;
	var to = ToObject(target);

	for (var s = 1; s < arguments.length; s++) {
		from = arguments[s];
		keys = Object.keys(Object(from));

		for (var i = 0; i < keys.length; i++) {
			to[keys[i]] = from[keys[i]];
		}
	}

	return to;
};

},{}],205:[function(require,module,exports){
module.exports = require('./lib/');

},{"./lib/":206}],206:[function(require,module,exports){
// Load modules

var Stringify = require('./stringify');
var Parse = require('./parse');


// Declare internals

var internals = {};


module.exports = {
    stringify: Stringify,
    parse: Parse
};

},{"./parse":207,"./stringify":208}],207:[function(require,module,exports){
// Load modules

var Utils = require('./utils');


// Declare internals

var internals = {
    delimiter: '&',
    depth: 5,
    arrayLimit: 20,
    parameterLimit: 1000
};


internals.parseValues = function (str, options) {

    var obj = {};
    var parts = str.split(options.delimiter, options.parameterLimit === Infinity ? undefined : options.parameterLimit);

    for (var i = 0, il = parts.length; i < il; ++i) {
        var part = parts[i];
        var pos = part.indexOf(']=') === -1 ? part.indexOf('=') : part.indexOf(']=') + 1;

        if (pos === -1) {
            obj[Utils.decode(part)] = '';
        }
        else {
            var key = Utils.decode(part.slice(0, pos));
            var val = Utils.decode(part.slice(pos + 1));

            if (Object.prototype.hasOwnProperty(key)) {
                continue;
            }

            if (!obj.hasOwnProperty(key)) {
                obj[key] = val;
            }
            else {
                obj[key] = [].concat(obj[key]).concat(val);
            }
        }
    }

    return obj;
};


internals.parseObject = function (chain, val, options) {

    if (!chain.length) {
        return val;
    }

    var root = chain.shift();

    var obj = {};
    if (root === '[]') {
        obj = [];
        obj = obj.concat(internals.parseObject(chain, val, options));
    }
    else {
        var cleanRoot = root[0] === '[' && root[root.length - 1] === ']' ? root.slice(1, root.length - 1) : root;
        var index = parseInt(cleanRoot, 10);
        var indexString = '' + index;
        if (!isNaN(index) &&
            root !== cleanRoot &&
            indexString === cleanRoot &&
            index >= 0 &&
            index <= options.arrayLimit) {

            obj = [];
            obj[index] = internals.parseObject(chain, val, options);
        }
        else {
            obj[cleanRoot] = internals.parseObject(chain, val, options);
        }
    }

    return obj;
};


internals.parseKeys = function (key, val, options) {

    if (!key) {
        return;
    }

    // The regex chunks

    var parent = /^([^\[\]]*)/;
    var child = /(\[[^\[\]]*\])/g;

    // Get the parent

    var segment = parent.exec(key);

    // Don't allow them to overwrite object prototype properties

    if (Object.prototype.hasOwnProperty(segment[1])) {
        return;
    }

    // Stash the parent if it exists

    var keys = [];
    if (segment[1]) {
        keys.push(segment[1]);
    }

    // Loop through children appending to the array until we hit depth

    var i = 0;
    while ((segment = child.exec(key)) !== null && i < options.depth) {

        ++i;
        if (!Object.prototype.hasOwnProperty(segment[1].replace(/\[|\]/g, ''))) {
            keys.push(segment[1]);
        }
    }

    // If there's a remainder, just add whatever is left

    if (segment) {
        keys.push('[' + key.slice(segment.index) + ']');
    }

    return internals.parseObject(keys, val, options);
};


module.exports = function (str, options) {

    if (str === '' ||
        str === null ||
        typeof str === 'undefined') {

        return {};
    }

    options = options || {};
    options.delimiter = typeof options.delimiter === 'string' || Utils.isRegExp(options.delimiter) ? options.delimiter : internals.delimiter;
    options.depth = typeof options.depth === 'number' ? options.depth : internals.depth;
    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : internals.arrayLimit;
    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : internals.parameterLimit;

    var tempObj = typeof str === 'string' ? internals.parseValues(str, options) : str;
    var obj = {};

    // Iterate over the keys and setup the new object

    var keys = Object.keys(tempObj);
    for (var i = 0, il = keys.length; i < il; ++i) {
        var key = keys[i];
        var newObj = internals.parseKeys(key, tempObj[key], options);
        obj = Utils.merge(obj, newObj);
    }

    return Utils.compact(obj);
};

},{"./utils":209}],208:[function(require,module,exports){
// Load modules

var Utils = require('./utils');


// Declare internals

var internals = {
    delimiter: '&',
    arrayPrefixGenerators: {
        brackets: function (prefix, key) {
            return prefix + '[]';
        },
        indices: function (prefix, key) {
            return prefix + '[' + key + ']';
        },
        repeat: function (prefix, key) {
            return prefix;
        }
    }
};


internals.stringify = function (obj, prefix, generateArrayPrefix) {

    if (Utils.isBuffer(obj)) {
        obj = obj.toString();
    }
    else if (obj instanceof Date) {
        obj = obj.toISOString();
    }
    else if (obj === null) {
        obj = '';
    }

    if (typeof obj === 'string' ||
        typeof obj === 'number' ||
        typeof obj === 'boolean') {

        return [encodeURIComponent(prefix) + '=' + encodeURIComponent(obj)];
    }

    var values = [];

    if (typeof obj === 'undefined') {
        return values;
    }

    var objKeys = Object.keys(obj);
    for (var i = 0, il = objKeys.length; i < il; ++i) {
        var key = objKeys[i];
        if (Array.isArray(obj)) {
            values = values.concat(internals.stringify(obj[key], generateArrayPrefix(prefix, key), generateArrayPrefix));
        }
        else {
            values = values.concat(internals.stringify(obj[key], prefix + '[' + key + ']', generateArrayPrefix));
        }
    }

    return values;
};


module.exports = function (obj, options) {

    options = options || {};
    var delimiter = typeof options.delimiter === 'undefined' ? internals.delimiter : options.delimiter;

    var keys = [];

    if (typeof obj !== 'object' ||
        obj === null) {

        return '';
    }

    var arrayFormat;
    if (options.arrayFormat in internals.arrayPrefixGenerators) {
        arrayFormat = options.arrayFormat;
    }
    else if ('indices' in options) {
        arrayFormat = options.indices ? 'indices' : 'repeat';
    }
    else {
        arrayFormat = 'indices';
    }

    var generateArrayPrefix = internals.arrayPrefixGenerators[arrayFormat];

    var objKeys = Object.keys(obj);
    for (var i = 0, il = objKeys.length; i < il; ++i) {
        var key = objKeys[i];
        keys = keys.concat(internals.stringify(obj[key], key, generateArrayPrefix));
    }

    return keys.join(delimiter);
};

},{"./utils":209}],209:[function(require,module,exports){
// Load modules


// Declare internals

var internals = {};


exports.arrayToObject = function (source) {

    var obj = {};
    for (var i = 0, il = source.length; i < il; ++i) {
        if (typeof source[i] !== 'undefined') {

            obj[i] = source[i];
        }
    }

    return obj;
};


exports.merge = function (target, source) {

    if (!source) {
        return target;
    }

    if (typeof source !== 'object') {
        if (Array.isArray(target)) {
            target.push(source);
        }
        else {
            target[source] = true;
        }

        return target;
    }

    if (typeof target !== 'object') {
        target = [target].concat(source);
        return target;
    }

    if (Array.isArray(target) &&
        !Array.isArray(source)) {

        target = exports.arrayToObject(target);
    }

    var keys = Object.keys(source);
    for (var k = 0, kl = keys.length; k < kl; ++k) {
        var key = keys[k];
        var value = source[key];

        if (!target[key]) {
            target[key] = value;
        }
        else {
            target[key] = exports.merge(target[key], value);
        }
    }

    return target;
};


exports.decode = function (str) {

    try {
        return decodeURIComponent(str.replace(/\+/g, ' '));
    } catch (e) {
        return str;
    }
};


exports.compact = function (obj, refs) {

    if (typeof obj !== 'object' ||
        obj === null) {

        return obj;
    }

    refs = refs || [];
    var lookup = refs.indexOf(obj);
    if (lookup !== -1) {
        return refs[lookup];
    }

    refs.push(obj);

    if (Array.isArray(obj)) {
        var compacted = [];

        for (var i = 0, il = obj.length; i < il; ++i) {
            if (typeof obj[i] !== 'undefined') {
                compacted.push(obj[i]);
            }
        }

        return compacted;
    }

    var keys = Object.keys(obj);
    for (i = 0, il = keys.length; i < il; ++i) {
        var key = keys[i];
        obj[key] = exports.compact(obj[key], refs);
    }

    return obj;
};


exports.isRegExp = function (obj) {
    return Object.prototype.toString.call(obj) === '[object RegExp]';
};


exports.isBuffer = function (obj) {

    if (obj === null ||
        typeof obj === 'undefined') {

        return false;
    }

    return !!(obj.constructor &&
        obj.constructor.isBuffer &&
        obj.constructor.isBuffer(obj));
};

},{}],210:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule AutoFocusMixin
 * @typechecks static-only
 */

'use strict';

var focusNode = require("./focusNode");

var AutoFocusMixin = {
  componentDidMount: function() {
    if (this.props.autoFocus) {
      focusNode(this.getDOMNode());
    }
  }
};

module.exports = AutoFocusMixin;

},{"./focusNode":328}],211:[function(require,module,exports){
/**
 * Copyright 2013-2015 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule BeforeInputEventPlugin
 * @typechecks static-only
 */

'use strict';

var EventConstants = require("./EventConstants");
var EventPropagators = require("./EventPropagators");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var FallbackCompositionState = require("./FallbackCompositionState");
var SyntheticCompositionEvent = require("./SyntheticCompositionEvent");
var SyntheticInputEvent = require("./SyntheticInputEvent");

var keyOf = require("./keyOf");

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = (
  ExecutionEnvironment.canUseDOM &&
  'CompositionEvent' in window
);

var documentMode = null;
if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = (
  ExecutionEnvironment.canUseDOM &&
  'TextEvent' in window &&
  !documentMode &&
  !isPresto()
);

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = (
  ExecutionEnvironment.canUseDOM &&
  (
    (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11)
  )
);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return (
    typeof opera === 'object' &&
    typeof opera.version === 'function' &&
    parseInt(opera.version(), 10) <= 12
  );
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

var topLevelTypes = EventConstants.topLevelTypes;

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBeforeInput: null}),
      captured: keyOf({onBeforeInputCapture: null})
    },
    dependencies: [
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyPress,
      topLevelTypes.topTextInput,
      topLevelTypes.topPaste
    ]
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionEnd: null}),
      captured: keyOf({onCompositionEndCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionStart: null}),
      captured: keyOf({onCompositionStartCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionStart,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionUpdate: null}),
      captured: keyOf({onCompositionUpdateCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionUpdate,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (
    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
    !(nativeEvent.ctrlKey && nativeEvent.altKey)
  );
}


/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionStart:
      return eventTypes.compositionStart;
    case topLevelTypes.topCompositionEnd:
      return eventTypes.compositionEnd;
    case topLevelTypes.topCompositionUpdate:
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return (
    topLevelType === topLevelTypes.topKeyDown &&
    nativeEvent.keyCode === START_KEYCODE
  );
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topKeyUp:
      // Command keys insert or clear IME input.
      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
    case topLevelTypes.topKeyDown:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return (nativeEvent.keyCode !== START_KEYCODE);
    case topLevelTypes.topKeyPress:
    case topLevelTypes.topMouseDown:
    case topLevelTypes.topBlur:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }
  return null;
}

// Track the current IME composition fallback object, if any.
var currentComposition = null;

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {DOMEventTarget} topLevelTarget The listening component root node.
 * @param {string} topLevelTargetID ID of `topLevelTarget`.
 * @param {object} nativeEvent Native browser event.
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(
  topLevelType,
  topLevelTarget,
  topLevelTargetID,
  nativeEvent
) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!currentComposition) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!currentComposition && eventType === eventTypes.compositionStart) {
      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (currentComposition) {
        fallbackData = currentComposition.getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(
    eventType,
    topLevelTargetID,
    nativeEvent
  );

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;
    }
  }

  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionEnd:
      return getDataFromCustomEvent(nativeEvent);
    case topLevelTypes.topKeyPress:
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case topLevelTypes.topTextInput:
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to blacklist it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  if (currentComposition) {
    if (
      topLevelType === topLevelTypes.topCompositionEnd ||
      isFallbackCompositionEnd(topLevelType, nativeEvent)
    ) {
      var chars = currentComposition.getData();
      FallbackCompositionState.release(currentComposition);
      currentComposition = null;
      return chars;
    }
    return null;
  }

  switch (topLevelType) {
    case topLevelTypes.topPaste:
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case topLevelTypes.topKeyPress:
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
        return String.fromCharCode(nativeEvent.which);
      }
      return null;
    case topLevelTypes.topCompositionEnd:
      return useFallbackCompositionData ? null : nativeEvent.data;
    default:
      return null;
  }
}

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {DOMEventTarget} topLevelTarget The listening component root node.
 * @param {string} topLevelTargetID ID of `topLevelTarget`.
 * @param {object} nativeEvent Native browser event.
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(
  topLevelType,
  topLevelTarget,
  topLevelTargetID,
  nativeEvent
) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  }

  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(
    eventTypes.beforeInput,
    topLevelTargetID,
    nativeEvent
  );

  event.data = chars;
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
    topLevelType,
    topLevelTarget,
    topLevelTargetID,
    nativeEvent
  ) {
    return [
      extractCompositionEvent(
        topLevelType,
        topLevelTarget,
        topLevelTargetID,
        nativeEvent
      ),
      extractBeforeInputEvent(
        topLevelType,
        topLevelTarget,
        topLevelTargetID,
        nativeEvent
      )
    ];
  }
};

module.exports = BeforeInputEventPlugin;

},{"./EventConstants":223,"./EventPropagators":228,"./ExecutionEnvironment":229,"./FallbackCompositionState":230,"./SyntheticCompositionEvent":302,"./SyntheticInputEvent":306,"./keyOf":350}],212:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSProperty
 */

'use strict';

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  boxFlex: true,
  boxFlexGroup: true,
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  strokeDashoffset: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function(prop) {
  prefixes.forEach(function(prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundImage: true,
    backgroundPosition: true,
    backgroundRepeat: true,
    backgroundColor: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;

},{}],213:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSPropertyOperations
 * @typechecks static-only
 */

'use strict';

var CSSProperty = require("./CSSProperty");
var ExecutionEnvironment = require("./ExecutionEnvironment");

var camelizeStyleName = require("./camelizeStyleName");
var dangerousStyleValue = require("./dangerousStyleValue");
var hyphenateStyleName = require("./hyphenateStyleName");
var memoizeStringOnly = require("./memoizeStringOnly");
var warning = require("./warning");

var processStyleName = memoizeStringOnly(function(styleName) {
  return hyphenateStyleName(styleName);
});

var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if ("production" !== process.env.NODE_ENV) {
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};

  var warnHyphenatedStyleName = function(name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    ("production" !== process.env.NODE_ENV ? warning(
      false,
      'Unsupported style property %s. Did you mean %s?',
      name,
      camelizeStyleName(name)
    ) : null);
  };

  var warnBadVendoredStyleName = function(name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    ("production" !== process.env.NODE_ENV ? warning(
      false,
      'Unsupported vendor-prefixed style property %s. Did you mean %s?',
      name,
      name.charAt(0).toUpperCase() + name.slice(1)
    ) : null);
  };

  var warnStyleValueWithSemicolon = function(name, value) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    ("production" !== process.env.NODE_ENV ? warning(
      false,
      'Style property values shouldn\'t contain a semicolon. ' +
      'Try "%s: %s" instead.',
      name,
      value.replace(badStyleValueWithSemicolonPattern, '')
    ) : null);
  };

  /**
   * @param {string} name
   * @param {*} value
   */
  var warnValidStyle = function(name, value) {
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value);
    }
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @return {?string}
   */
  createMarkupForStyles: function(styles) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var styleValue = styles[styleName];
      if ("production" !== process.env.NODE_ENV) {
        warnValidStyle(styleName, styleValue);
      }
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   */
  setValueForStyles: function(node, styles) {
    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== process.env.NODE_ENV) {
        warnValidStyle(styleName, styles[styleName]);
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
      if (styleName === 'float') {
        styleName = styleFloatAccessor;
      }
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

module.exports = CSSPropertyOperations;

}).call(this,require('_process'))

},{"./CSSProperty":212,"./ExecutionEnvironment":229,"./camelizeStyleName":317,"./dangerousStyleValue":322,"./hyphenateStyleName":342,"./memoizeStringOnly":352,"./warning":363,"_process":166}],214:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CallbackQueue
 */

'use strict';

var PooledClass = require("./PooledClass");

var assign = require("./Object.assign");
var invariant = require("./invariant");

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */
function CallbackQueue() {
  this._callbacks = null;
  this._contexts = null;
}

assign(CallbackQueue.prototype, {

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */
  enqueue: function(callback, context) {
    this._callbacks = this._callbacks || [];
    this._contexts = this._contexts || [];
    this._callbacks.push(callback);
    this._contexts.push(context);
  },

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */
  notifyAll: function() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    if (callbacks) {
      ("production" !== process.env.NODE_ENV ? invariant(
        callbacks.length === contexts.length,
        'Mismatched list of contexts in callback queue'
      ) : invariant(callbacks.length === contexts.length));
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0, l = callbacks.length; i < l; i++) {
        callbacks[i].call(contexts[i]);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  },

  /**
   * Resets the internal queue.
   *
   * @internal
   */
  reset: function() {
    this._callbacks = null;
    this._contexts = null;
  },

  /**
   * `PooledClass` looks for this.
   */
  destructor: function() {
    this.reset();
  }

});

PooledClass.addPoolingTo(CallbackQueue);

module.exports = CallbackQueue;

}).call(this,require('_process'))

},{"./Object.assign":235,"./PooledClass":236,"./invariant":344,"_process":166}],215:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ChangeEventPlugin
 */

'use strict';

var EventConstants = require("./EventConstants");
var EventPluginHub = require("./EventPluginHub");
var EventPropagators = require("./EventPropagators");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var ReactUpdates = require("./ReactUpdates");
var SyntheticEvent = require("./SyntheticEvent");

var isEventSupported = require("./isEventSupported");
var isTextInputElement = require("./isTextInputElement");
var keyOf = require("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: keyOf({onChange: null}),
      captured: keyOf({onChangeCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topChange,
      topLevelTypes.topClick,
      topLevelTypes.topFocus,
      topLevelTypes.topInput,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementID = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  return (
    elem.nodeName === 'SELECT' ||
    (elem.nodeName === 'INPUT' && elem.type === 'file')
  );
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (
    (!('documentMode' in document) || document.documentMode > 8)
  );
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(
    eventTypes.change,
    activeElementID,
    nativeEvent
  );
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue();
}

function startWatchingForChangeEventIE8(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementID = null;
}

function getTargetIDForChangeEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topChange) {
    return topLevelTargetID;
  }
}
function handleEventsForChangeEventIE8(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForChangeEventIE8();
  }
}


/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events
  isInputEventSupported = isEventSupported('input') && (
    (!('documentMode' in document) || document.documentMode > 9)
  );
}

/**
 * (For old IE.) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp =  {
  get: function() {
    return activeElementValueProp.get.call(this);
  },
  set: function(val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For old IE.) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(
    target.constructor.prototype,
    'value'
  );

  Object.defineProperty(activeElement, 'value', newValueProp);
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For old IE.) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementID = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For old IE.) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetIDForInputEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topInput) {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return topLevelTargetID;
  }
}

// For IE8 and IE9.
function handleEventsForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetIDForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topSelectionChange ||
      topLevelType === topLevelTypes.topKeyUp ||
      topLevelType === topLevelTypes.topKeyDown) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementID;
    }
  }
}


/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return (
    elem.nodeName === 'INPUT' &&
    (elem.type === 'checkbox' || elem.type === 'radio')
  );
}

function getTargetIDForClickEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topClick) {
    return topLevelTargetID;
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var getTargetIDFunc, handleEventFunc;
    if (shouldUseChangeEvent(topLevelTarget)) {
      if (doesChangeEventBubble) {
        getTargetIDFunc = getTargetIDForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(topLevelTarget)) {
      if (isInputEventSupported) {
        getTargetIDFunc = getTargetIDForInputEvent;
      } else {
        getTargetIDFunc = getTargetIDForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(topLevelTarget)) {
      getTargetIDFunc = getTargetIDForClickEvent;
    }

    if (getTargetIDFunc) {
      var targetID = getTargetIDFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
      if (targetID) {
        var event = SyntheticEvent.getPooled(
          eventTypes.change,
          targetID,
          nativeEvent
        );
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
    }
  }

};

module.exports = ChangeEventPlugin;

},{"./EventConstants":223,"./EventPluginHub":225,"./EventPropagators":228,"./ExecutionEnvironment":229,"./ReactUpdates":296,"./SyntheticEvent":304,"./isEventSupported":345,"./isTextInputElement":347,"./keyOf":350}],216:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ClientReactRootIndex
 * @typechecks
 */

'use strict';

var nextReactRootIndex = 0;

var ClientReactRootIndex = {
  createReactRootIndex: function() {
    return nextReactRootIndex++;
  }
};

module.exports = ClientReactRootIndex;

},{}],217:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMChildrenOperations
 * @typechecks static-only
 */

'use strict';

var Danger = require("./Danger");
var ReactMultiChildUpdateTypes = require("./ReactMultiChildUpdateTypes");

var setTextContent = require("./setTextContent");
var invariant = require("./invariant");

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
function insertChildAt(parentNode, childNode, index) {
  // By exploiting arrays returning `undefined` for an undefined index, we can
  // rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. However, using `undefined` is not allowed by all
  // browsers so we must replace it with `null`.
  parentNode.insertBefore(
    childNode,
    parentNode.childNodes[index] || null
  );
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

  updateTextContent: setTextContent,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markupList List of markup strings.
   * @internal
   */
  processUpdates: function(updates, markupList) {
    var update;
    // Mapping from parent IDs to initial child orderings.
    var initialChildren = null;
    // List of children that will be moved or removed.
    var updatedChildren = null;

    for (var i = 0; i < updates.length; i++) {
      update = updates[i];
      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
        var updatedIndex = update.fromIndex;
        var updatedChild = update.parentNode.childNodes[updatedIndex];
        var parentID = update.parentID;

        ("production" !== process.env.NODE_ENV ? invariant(
          updatedChild,
          'processUpdates(): Unable to find child %s of element. This ' +
          'probably means the DOM was unexpectedly mutated (e.g., by the ' +
          'browser), usually due to forgetting a <tbody> when using tables, ' +
          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' +
          'in an <svg> parent. Try inspecting the child nodes of the element ' +
          'with React ID `%s`.',
          updatedIndex,
          parentID
        ) : invariant(updatedChild));

        initialChildren = initialChildren || {};
        initialChildren[parentID] = initialChildren[parentID] || [];
        initialChildren[parentID][updatedIndex] = updatedChild;

        updatedChildren = updatedChildren || [];
        updatedChildren.push(updatedChild);
      }
    }

    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

    // Remove updated children first so that `toIndex` is consistent.
    if (updatedChildren) {
      for (var j = 0; j < updatedChildren.length; j++) {
        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
      }
    }

    for (var k = 0; k < updates.length; k++) {
      update = updates[k];
      switch (update.type) {
        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
          insertChildAt(
            update.parentNode,
            renderedMarkup[update.markupIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
          insertChildAt(
            update.parentNode,
            initialChildren[update.parentID][update.fromIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
          setTextContent(
            update.parentNode,
            update.textContent
          );
          break;
        case ReactMultiChildUpdateTypes.REMOVE_NODE:
          // Already removed by the for-loop above.
          break;
      }
    }
  }

};

module.exports = DOMChildrenOperations;

}).call(this,require('_process'))

},{"./Danger":220,"./ReactMultiChildUpdateTypes":281,"./invariant":344,"./setTextContent":358,"_process":166}],218:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMProperty
 * @typechecks static-only
 */

/*jslint bitwise: true */

'use strict';

var invariant = require("./invariant");

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_ATTRIBUTE: 0x1,
  MUST_USE_PROPERTY: 0x2,
  HAS_SIDE_EFFECTS: 0x4,
  HAS_BOOLEAN_VALUE: 0x8,
  HAS_NUMERIC_VALUE: 0x10,
  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function(domPropertyConfig) {
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(
        domPropertyConfig.isCustomAttribute
      );
    }

    for (var propName in Properties) {
      ("production" !== process.env.NODE_ENV ? invariant(
        !DOMProperty.isStandardName.hasOwnProperty(propName),
        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
        '\'%s\' which has already been injected. You may be accidentally ' +
        'injecting the same DOM property config twice, or you may be ' +
        'injecting two configs that have conflicting property names.',
        propName
      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));

      DOMProperty.isStandardName[propName] = true;

      var lowerCased = propName.toLowerCase();
      DOMProperty.getPossibleStandardName[lowerCased] = propName;

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        DOMProperty.getPossibleStandardName[attributeName] = propName;
        DOMProperty.getAttributeName[propName] = attributeName;
      } else {
        DOMProperty.getAttributeName[propName] = lowerCased;
      }

      DOMProperty.getPropertyName[propName] =
        DOMPropertyNames.hasOwnProperty(propName) ?
          DOMPropertyNames[propName] :
          propName;

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
      } else {
        DOMProperty.getMutationMethod[propName] = null;
      }

      var propConfig = Properties[propName];
      DOMProperty.mustUseAttribute[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
      DOMProperty.mustUseProperty[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
      DOMProperty.hasSideEffects[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
      DOMProperty.hasBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
      DOMProperty.hasNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
      DOMProperty.hasPositiveNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
      DOMProperty.hasOverloadedBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);

      ("production" !== process.env.NODE_ENV ? invariant(
        !DOMProperty.mustUseAttribute[propName] ||
          !DOMProperty.mustUseProperty[propName],
        'DOMProperty: Cannot require using both attribute and property: %s',
        propName
      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
        !DOMProperty.mustUseProperty[propName]));
      ("production" !== process.env.NODE_ENV ? invariant(
        DOMProperty.mustUseProperty[propName] ||
          !DOMProperty.hasSideEffects[propName],
        'DOMProperty: Properties that have side effects must use property: %s',
        propName
      ) : invariant(DOMProperty.mustUseProperty[propName] ||
        !DOMProperty.hasSideEffects[propName]));
      ("production" !== process.env.NODE_ENV ? invariant(
        !!DOMProperty.hasBooleanValue[propName] +
          !!DOMProperty.hasNumericValue[propName] +
          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
        'numeric value, but not a combination: %s',
        propName
      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
        !!DOMProperty.hasNumericValue[propName] +
        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
    }
  }
};
var defaultValueCache = {};

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',

  /**
   * Checks whether a property name is a standard property.
   * @type {Object}
   */
  isStandardName: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties.
   * @type {Object}
   */
  getPossibleStandardName: {},

  /**
   * Mapping from normalized names to attribute names that differ. Attribute
   * names are used when rendering markup or with `*Attribute()`.
   * @type {Object}
   */
  getAttributeName: {},

  /**
   * Mapping from normalized names to properties on DOM node instances.
   * (This includes properties that mutate due to external factors.)
   * @type {Object}
   */
  getPropertyName: {},

  /**
   * Mapping from normalized names to mutation methods. This will only exist if
   * mutation cannot be set simply by the property or `setAttribute()`.
   * @type {Object}
   */
  getMutationMethod: {},

  /**
   * Whether the property must be accessed and mutated as an object property.
   * @type {Object}
   */
  mustUseAttribute: {},

  /**
   * Whether the property must be accessed and mutated using `*Attribute()`.
   * (This includes anything that fails `<propName> in <element>`.)
   * @type {Object}
   */
  mustUseProperty: {},

  /**
   * Whether or not setting a value causes side effects such as triggering
   * resources to be loaded or text selection changes. We must ensure that
   * the value is only set if it has changed.
   * @type {Object}
   */
  hasSideEffects: {},

  /**
   * Whether the property should be removed when set to a falsey value.
   * @type {Object}
   */
  hasBooleanValue: {},

  /**
   * Whether the property must be numeric or parse as a
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasNumericValue: {},

  /**
   * Whether the property must be positive numeric or parse as a positive
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasPositiveNumericValue: {},

  /**
   * Whether the property can be used as a flag as well as with a value. Removed
   * when strictly equal to false; present without a value when strictly equal
   * to true; present with a value otherwise.
   * @type {Object}
   */
  hasOverloadedBooleanValue: {},

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function(attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  /**
   * Returns the default property value for a DOM property (i.e., not an
   * attribute). Most default values are '' or false, but not all. Worse yet,
   * some (in particular, `type`) vary depending on the type of element.
   *
   * TODO: Is it better to grab all the possible properties when creating an
   * element to avoid having to create the same element twice?
   */
  getDefaultValueForProperty: function(nodeName, prop) {
    var nodeDefaults = defaultValueCache[nodeName];
    var testElement;
    if (!nodeDefaults) {
      defaultValueCache[nodeName] = nodeDefaults = {};
    }
    if (!(prop in nodeDefaults)) {
      testElement = document.createElement(nodeName);
      nodeDefaults[prop] = testElement[prop];
    }
    return nodeDefaults[prop];
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;

}).call(this,require('_process'))

},{"./invariant":344,"_process":166}],219:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMPropertyOperations
 * @typechecks static-only
 */

'use strict';

var DOMProperty = require("./DOMProperty");

var quoteAttributeValueForBrowser = require("./quoteAttributeValueForBrowser");
var warning = require("./warning");

function shouldIgnoreValue(name, value) {
  return value == null ||
    (DOMProperty.hasBooleanValue[name] && !value) ||
    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
}

if ("production" !== process.env.NODE_ENV) {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true
  };
  var warnedProperties = {};

  var warnUnknownProperty = function(name) {
    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return;
    }

    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = (
      DOMProperty.isCustomAttribute(lowerCasedName) ?
        lowerCasedName :
      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
        DOMProperty.getPossibleStandardName[lowerCasedName] :
        null
    );

    // For now, only warn when we have a suggested correction. This prevents
    // logging too much when using transferPropsTo.
    ("production" !== process.env.NODE_ENV ? warning(
      standardName == null,
      'Unknown DOM property %s. Did you mean %s?',
      name,
      standardName
    ) : null);

  };
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function(id) {
    return DOMProperty.ID_ATTRIBUTE_NAME + '=' +
      quoteAttributeValueForBrowser(id);
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function(name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      if (shouldIgnoreValue(name, value)) {
        return '';
      }
      var attributeName = DOMProperty.getAttributeName[name];
      if (DOMProperty.hasBooleanValue[name] ||
          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
        return attributeName;
      }
      return attributeName + '=' + quoteAttributeValueForBrowser(value);
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return name + '=' + quoteAttributeValueForBrowser(value);
    } else if ("production" !== process.env.NODE_ENV) {
      warnUnknownProperty(name);
    }
    return null;
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function(node, name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(name, value)) {
        this.deleteValueForProperty(node, name);
      } else if (DOMProperty.mustUseAttribute[name]) {
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
        // property type before comparing; only `value` does and is string.
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== ('' + value)) {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propName] = value;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        node.removeAttribute(name);
      } else {
        node.setAttribute(name, '' + value);
      }
    } else if ("production" !== process.env.NODE_ENV) {
      warnUnknownProperty(name);
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function(node, name) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (DOMProperty.mustUseAttribute[name]) {
        node.removeAttribute(DOMProperty.getAttributeName[name]);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        var defaultValue = DOMProperty.getDefaultValueForProperty(
          node.nodeName,
          propName
        );
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== defaultValue) {
          node[propName] = defaultValue;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    } else if ("production" !== process.env.NODE_ENV) {
      warnUnknownProperty(name);
    }
  }

};

module.exports = DOMPropertyOperations;

}).call(this,require('_process'))

},{"./DOMProperty":218,"./quoteAttributeValueForBrowser":356,"./warning":363,"_process":166}],220:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Danger
 * @typechecks static-only
 */

/*jslint evil: true, sub: true */

'use strict';

var ExecutionEnvironment = require("./ExecutionEnvironment");

var createNodesFromMarkup = require("./createNodesFromMarkup");
var emptyFunction = require("./emptyFunction");
var getMarkupWrap = require("./getMarkupWrap");
var invariant = require("./invariant");

var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
var RESULT_INDEX_ATTR = 'data-danger-index';

/**
 * Extracts the `nodeName` from a string of markup.
 *
 * NOTE: Extracting the `nodeName` does not require a regular expression match
 * because we make assumptions about React-generated markup (i.e. there are no
 * spaces surrounding the opening tag and there is at least one attribute).
 *
 * @param {string} markup String of markup.
 * @return {string} Node name of the supplied markup.
 * @see http://jsperf.com/extract-nodename
 */
function getNodeName(markup) {
  return markup.substring(1, markup.indexOf(' '));
}

var Danger = {

  /**
   * Renders markup into an array of nodes. The markup is expected to render
   * into a list of root nodes. Also, the length of `resultList` and
   * `markupList` should be the same.
   *
   * @param {array<string>} markupList List of markup strings to render.
   * @return {array<DOMElement>} List of rendered nodes.
   * @internal
   */
  dangerouslyRenderMarkup: function(markupList) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
      'thread. Make sure `window` and `document` are available globally ' +
      'before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    var nodeName;
    var markupByNodeName = {};
    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
    for (var i = 0; i < markupList.length; i++) {
      ("production" !== process.env.NODE_ENV ? invariant(
        markupList[i],
        'dangerouslyRenderMarkup(...): Missing markup.'
      ) : invariant(markupList[i]));
      nodeName = getNodeName(markupList[i]);
      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
      markupByNodeName[nodeName][i] = markupList[i];
    }
    var resultList = [];
    var resultListAssignmentCount = 0;
    for (nodeName in markupByNodeName) {
      if (!markupByNodeName.hasOwnProperty(nodeName)) {
        continue;
      }
      var markupListByNodeName = markupByNodeName[nodeName];

      // This for-in loop skips the holes of the sparse array. The order of
      // iteration should follow the order of assignment, which happens to match
      // numerical index order, but we don't rely on that.
      var resultIndex;
      for (resultIndex in markupListByNodeName) {
        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
          var markup = markupListByNodeName[resultIndex];

          // Push the requested markup with an additional RESULT_INDEX_ATTR
          // attribute.  If the markup does not start with a < character, it
          // will be discarded below (with an appropriate console.error).
          markupListByNodeName[resultIndex] = markup.replace(
            OPEN_TAG_NAME_EXP,
            // This index will be parsed back out below.
            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
          );
        }
      }

      // Render each group of markup with similar wrapping `nodeName`.
      var renderNodes = createNodesFromMarkup(
        markupListByNodeName.join(''),
        emptyFunction // Do nothing special with <script> tags.
      );

      for (var j = 0; j < renderNodes.length; ++j) {
        var renderNode = renderNodes[j];
        if (renderNode.hasAttribute &&
            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
          renderNode.removeAttribute(RESULT_INDEX_ATTR);

          ("production" !== process.env.NODE_ENV ? invariant(
            !resultList.hasOwnProperty(resultIndex),
            'Danger: Assigning to an already-occupied result index.'
          ) : invariant(!resultList.hasOwnProperty(resultIndex)));

          resultList[resultIndex] = renderNode;

          // This should match resultList.length and markupList.length when
          // we're done.
          resultListAssignmentCount += 1;

        } else if ("production" !== process.env.NODE_ENV) {
          console.error(
            'Danger: Discarding unexpected node:',
            renderNode
          );
        }
      }
    }

    // Although resultList was populated out of order, it should now be a dense
    // array.
    ("production" !== process.env.NODE_ENV ? invariant(
      resultListAssignmentCount === resultList.length,
      'Danger: Did not assign to every index of resultList.'
    ) : invariant(resultListAssignmentCount === resultList.length));

    ("production" !== process.env.NODE_ENV ? invariant(
      resultList.length === markupList.length,
      'Danger: Expected markup to render %s nodes, but rendered %s.',
      markupList.length,
      resultList.length
    ) : invariant(resultList.length === markupList.length));

    return resultList;
  },

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
      'worker thread. Make sure `window` and `document` are available ' +
      'globally before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    ("production" !== process.env.NODE_ENV ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
    ("production" !== process.env.NODE_ENV ? invariant(
      oldChild.tagName.toLowerCase() !== 'html',
      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
      '<html> node. This is because browser quirks make this unreliable ' +
      'and/or slow. If you want to render to the root you must use ' +
      'server rendering. See React.renderToString().'
    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
    oldChild.parentNode.replaceChild(newChild, oldChild);
  }

};

module.exports = Danger;

}).call(this,require('_process'))

},{"./ExecutionEnvironment":229,"./createNodesFromMarkup":321,"./emptyFunction":323,"./getMarkupWrap":336,"./invariant":344,"_process":166}],221:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DefaultEventPluginOrder
 */

'use strict';

var keyOf = require("./keyOf");

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DefaultEventPluginOrder = [
  keyOf({ResponderEventPlugin: null}),
  keyOf({SimpleEventPlugin: null}),
  keyOf({TapEventPlugin: null}),
  keyOf({EnterLeaveEventPlugin: null}),
  keyOf({ChangeEventPlugin: null}),
  keyOf({SelectEventPlugin: null}),
  keyOf({BeforeInputEventPlugin: null}),
  keyOf({AnalyticsEventPlugin: null}),
  keyOf({MobileSafariClickEventPlugin: null})
];

module.exports = DefaultEventPluginOrder;

},{"./keyOf":350}],222:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EnterLeaveEventPlugin
 * @typechecks static-only
 */

'use strict';

var EventConstants = require("./EventConstants");
var EventPropagators = require("./EventPropagators");
var SyntheticMouseEvent = require("./SyntheticMouseEvent");

var ReactMount = require("./ReactMount");
var keyOf = require("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;
var getFirstReactDOM = ReactMount.getFirstReactDOM;

var eventTypes = {
  mouseEnter: {
    registrationName: keyOf({onMouseEnter: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  },
  mouseLeave: {
    registrationName: keyOf({onMouseLeave: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  }
};

var extractedEvents = [null, null];

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topMouseOver &&
        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== topLevelTypes.topMouseOut &&
        topLevelType !== topLevelTypes.topMouseOver) {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (topLevelTarget.window === topLevelTarget) {
      // `topLevelTarget` is probably a window object.
      win = topLevelTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = topLevelTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from, to;
    if (topLevelType === topLevelTypes.topMouseOut) {
      from = topLevelTarget;
      to =
        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
        win;
    } else {
      from = win;
      to = topLevelTarget;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromID = from ? ReactMount.getID(from) : '';
    var toID = to ? ReactMount.getID(to) : '';

    var leave = SyntheticMouseEvent.getPooled(
      eventTypes.mouseLeave,
      fromID,
      nativeEvent
    );
    leave.type = 'mouseleave';
    leave.target = from;
    leave.relatedTarget = to;

    var enter = SyntheticMouseEvent.getPooled(
      eventTypes.mouseEnter,
      toID,
      nativeEvent
    );
    enter.type = 'mouseenter';
    enter.target = to;
    enter.relatedTarget = from;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

    extractedEvents[0] = leave;
    extractedEvents[1] = enter;

    return extractedEvents;
  }

};

module.exports = EnterLeaveEventPlugin;

},{"./EventConstants":223,"./EventPropagators":228,"./ReactMount":279,"./SyntheticMouseEvent":308,"./keyOf":350}],223:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventConstants
 */

'use strict';

var keyMirror = require("./keyMirror");

var PropagationPhases = keyMirror({bubbled: null, captured: null});

/**
 * Types of raw signals from the browser caught at the top level.
 */
var topLevelTypes = keyMirror({
  topBlur: null,
  topChange: null,
  topClick: null,
  topCompositionEnd: null,
  topCompositionStart: null,
  topCompositionUpdate: null,
  topContextMenu: null,
  topCopy: null,
  topCut: null,
  topDoubleClick: null,
  topDrag: null,
  topDragEnd: null,
  topDragEnter: null,
  topDragExit: null,
  topDragLeave: null,
  topDragOver: null,
  topDragStart: null,
  topDrop: null,
  topError: null,
  topFocus: null,
  topInput: null,
  topKeyDown: null,
  topKeyPress: null,
  topKeyUp: null,
  topLoad: null,
  topMouseDown: null,
  topMouseMove: null,
  topMouseOut: null,
  topMouseOver: null,
  topMouseUp: null,
  topPaste: null,
  topReset: null,
  topScroll: null,
  topSelectionChange: null,
  topSubmit: null,
  topTextInput: null,
  topTouchCancel: null,
  topTouchEnd: null,
  topTouchMove: null,
  topTouchStart: null,
  topWheel: null
});

var EventConstants = {
  topLevelTypes: topLevelTypes,
  PropagationPhases: PropagationPhases
};

module.exports = EventConstants;

},{"./keyMirror":349}],224:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventListener
 * @typechecks
 */

var emptyFunction = require("./emptyFunction");

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function(target, eventType, callback) {
    if (!target.addEventListener) {
      if ("production" !== process.env.NODE_ENV) {
        console.error(
          'Attempted to listen to events during the capture phase on a ' +
          'browser that does not support the capture phase. Your application ' +
          'will not receive some events.'
        );
      }
      return {
        remove: emptyFunction
      };
    } else {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    }
  },

  registerDefault: function() {}
};

module.exports = EventListener;

}).call(this,require('_process'))

},{"./emptyFunction":323,"_process":166}],225:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginHub
 */

'use strict';

var EventPluginRegistry = require("./EventPluginRegistry");
var EventPluginUtils = require("./EventPluginUtils");

var accumulateInto = require("./accumulateInto");
var forEachAccumulated = require("./forEachAccumulated");
var invariant = require("./invariant");

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @private
 */
var executeDispatchesAndRelease = function(event) {
  if (event) {
    var executeDispatch = EventPluginUtils.executeDispatch;
    // Plugins can provide custom behavior when dispatching events.
    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
    if (PluginModule && PluginModule.executeDispatch) {
      executeDispatch = PluginModule.executeDispatch;
    }
    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};

/**
 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
 *   hierarchy given ids of the logical DOM elements involved.
 */
var InstanceHandle = null;

function validateInstanceHandle() {
  var valid =
    InstanceHandle &&
    InstanceHandle.traverseTwoPhase &&
    InstanceHandle.traverseEnterLeave;
  ("production" !== process.env.NODE_ENV ? invariant(
    valid,
    'InstanceHandle not injected before use!'
  ) : invariant(valid));
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {object} InjectedMount
     * @public
     */
    injectMount: EventPluginUtils.injection.injectMount,

    /**
     * @param {object} InjectedInstanceHandle
     * @public
     */
    injectInstanceHandle: function(InjectedInstanceHandle) {
      InstanceHandle = InjectedInstanceHandle;
      if ("production" !== process.env.NODE_ENV) {
        validateInstanceHandle();
      }
    },

    getInstanceHandle: function() {
      if ("production" !== process.env.NODE_ENV) {
        validateInstanceHandle();
      }
      return InstanceHandle;
    },

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

  registrationNameModules: EventPluginRegistry.registrationNameModules,

  /**
   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {?function} listener The callback to store.
   */
  putListener: function(id, registrationName, listener) {
    ("production" !== process.env.NODE_ENV ? invariant(
      !listener || typeof listener === 'function',
      'Expected %s listener to be a function, instead got type %s',
      registrationName, typeof listener
    ) : invariant(!listener || typeof listener === 'function'));

    var bankForRegistrationName =
      listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[id] = listener;
  },

  /**
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    return bankForRegistrationName && bankForRegistrationName[id];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    if (bankForRegistrationName) {
      delete bankForRegistrationName[id];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {string} id ID of the DOM element.
   */
  deleteAllListeners: function(id) {
    for (var registrationName in listenerBank) {
      delete listenerBank[registrationName][id];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0, l = plugins.length; i < l; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(
          topLevelType,
          topLevelTarget,
          topLevelTargetID,
          nativeEvent
        );
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function(events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function() {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
    ("production" !== process.env.NODE_ENV ? invariant(
      !eventQueue,
      'processEventQueue(): Additional events were enqueued while processing ' +
      'an event queue. Support for this has not yet been implemented.'
    ) : invariant(!eventQueue));
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function() {
    listenerBank = {};
  },

  __getListenerBank: function() {
    return listenerBank;
  }

};

module.exports = EventPluginHub;

}).call(this,require('_process'))

},{"./EventPluginRegistry":226,"./EventPluginUtils":227,"./accumulateInto":314,"./forEachAccumulated":329,"./invariant":344,"_process":166}],226:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginRegistry
 * @typechecks static-only
 */

'use strict';

var invariant = require("./invariant");

/**
 * Injectable ordering of event plugins.
 */
var EventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!EventPluginOrder) {
    // Wait until an `EventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var PluginModule = namesToPlugins[pluginName];
    var pluginIndex = EventPluginOrder.indexOf(pluginName);
    ("production" !== process.env.NODE_ENV ? invariant(
      pluginIndex > -1,
      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
      'the plugin ordering, `%s`.',
      pluginName
    ) : invariant(pluginIndex > -1));
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    ("production" !== process.env.NODE_ENV ? invariant(
      PluginModule.extractEvents,
      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
      'method, but `%s` does not.',
      pluginName
    ) : invariant(PluginModule.extractEvents));
    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
    var publishedEvents = PluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      ("production" !== process.env.NODE_ENV ? invariant(
        publishEventForPlugin(
          publishedEvents[eventName],
          PluginModule,
          eventName
        ),
        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
        eventName,
        pluginName
      ) : invariant(publishEventForPlugin(
        publishedEvents[eventName],
        PluginModule,
        eventName
      )));
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
  ("production" !== process.env.NODE_ENV ? invariant(
    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'event name, `%s`.',
    eventName
  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(
          phasedRegistrationName,
          PluginModule,
          eventName
        );
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(
      dispatchConfig.registrationName,
      PluginModule,
      eventName
    );
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, PluginModule, eventName) {
  ("production" !== process.env.NODE_ENV ? invariant(
    !EventPluginRegistry.registrationNameModules[registrationName],
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'registration name, `%s`.',
    registrationName
  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] =
    PluginModule.eventTypes[eventName].dependencies;
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function(InjectedEventPluginOrder) {
    ("production" !== process.env.NODE_ENV ? invariant(
      !EventPluginOrder,
      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
      'once. You are likely trying to load more than one copy of React.'
    ) : invariant(!EventPluginOrder));
    // Clone the ordering so it cannot be dynamically mutated.
    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function(injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var PluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) ||
          namesToPlugins[pluginName] !== PluginModule) {
        ("production" !== process.env.NODE_ENV ? invariant(
          !namesToPlugins[pluginName],
          'EventPluginRegistry: Cannot inject two different event plugins ' +
          'using the same name, `%s`.',
          pluginName
        ) : invariant(!namesToPlugins[pluginName]));
        namesToPlugins[pluginName] = PluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function(event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[
        dispatchConfig.registrationName
      ] || null;
    }
    for (var phase in dispatchConfig.phasedRegistrationNames) {
      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
        continue;
      }
      var PluginModule = EventPluginRegistry.registrationNameModules[
        dispatchConfig.phasedRegistrationNames[phase]
      ];
      if (PluginModule) {
        return PluginModule;
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function() {
    EventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }
  }

};

module.exports = EventPluginRegistry;

}).call(this,require('_process'))

},{"./invariant":344,"_process":166}],227:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginUtils
 */

'use strict';

var EventConstants = require("./EventConstants");

var invariant = require("./invariant");

/**
 * Injected dependencies:
 */

/**
 * - `Mount`: [required] Module that can convert between React dom IDs and
 *   actual node references.
 */
var injection = {
  Mount: null,
  injectMount: function(InjectedMount) {
    injection.Mount = InjectedMount;
    if ("production" !== process.env.NODE_ENV) {
      ("production" !== process.env.NODE_ENV ? invariant(
        InjectedMount && InjectedMount.getNode,
        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
        'is missing getNode.'
      ) : invariant(InjectedMount && InjectedMount.getNode));
    }
  }
};

var topLevelTypes = EventConstants.topLevelTypes;

function isEndish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseUp ||
         topLevelType === topLevelTypes.topTouchEnd ||
         topLevelType === topLevelTypes.topTouchCancel;
}

function isMoveish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseMove ||
         topLevelType === topLevelTypes.topTouchMove;
}
function isStartish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseDown ||
         topLevelType === topLevelTypes.topTouchStart;
}


var validateEventDispatches;
if ("production" !== process.env.NODE_ENV) {
  validateEventDispatches = function(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var idsIsArr = Array.isArray(dispatchIDs);
    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
    var listenersLen = listenersIsArr ?
      dispatchListeners.length :
      dispatchListeners ? 1 : 0;

    ("production" !== process.env.NODE_ENV ? invariant(
      idsIsArr === listenersIsArr && IDsLen === listenersLen,
      'EventPluginUtils: Invalid `event`.'
    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
  };
}

/**
 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
 * kept separate to conserve memory.
 */
function forEachEventDispatch(event, cb) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== process.env.NODE_ENV) {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      cb(event, dispatchListeners[i], dispatchIDs[i]);
    }
  } else if (dispatchListeners) {
    cb(event, dispatchListeners, dispatchIDs);
  }
}

/**
 * Default implementation of PluginModule.executeDispatch().
 * @param {SyntheticEvent} SyntheticEvent to handle
 * @param {function} Application-level callback
 * @param {string} domID DOM id to pass to the callback.
 */
function executeDispatch(event, listener, domID) {
  event.currentTarget = injection.Mount.getNode(domID);
  var returnValue = listener(event, domID);
  event.currentTarget = null;
  return returnValue;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, cb) {
  forEachEventDispatch(event, cb);
  event._dispatchListeners = null;
  event._dispatchIDs = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return id of the first dispatch execution who's listener returns true, or
 * null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== process.env.NODE_ENV) {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchIDs[i])) {
        return dispatchIDs[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchIDs)) {
      return dispatchIDs;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchIDs = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if ("production" !== process.env.NODE_ENV) {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchID = event._dispatchIDs;
  ("production" !== process.env.NODE_ENV ? invariant(
    !Array.isArray(dispatchListener),
    'executeDirectDispatch(...): Invalid `event`.'
  ) : invariant(!Array.isArray(dispatchListener)));
  var res = dispatchListener ?
    dispatchListener(event, dispatchID) :
    null;
  event._dispatchListeners = null;
  event._dispatchIDs = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {bool} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatch: executeDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,
  injection: injection,
  useTouchEvents: false
};

module.exports = EventPluginUtils;

}).call(this,require('_process'))

},{"./EventConstants":223,"./invariant":344,"_process":166}],228:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPropagators
 */

'use strict';

var EventConstants = require("./EventConstants");
var EventPluginHub = require("./EventPluginHub");

var accumulateInto = require("./accumulateInto");
var forEachAccumulated = require("./forEachAccumulated");

var PropagationPhases = EventConstants.PropagationPhases;
var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(id, event, propagationPhase) {
  var registrationName =
    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(id, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(domID, upwards, event) {
  if ("production" !== process.env.NODE_ENV) {
    if (!domID) {
      throw new Error('Dispatching id must not be null');
    }
  }
  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
  var listener = listenerAtPhase(domID, event, phase);
  if (listener) {
    event._dispatchListeners =
      accumulateInto(event._dispatchListeners, listener);
    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We can not perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
      event.dispatchMarker,
      accumulateDirectionalDispatches,
      event
    );
  }
}


/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(id, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(id, registrationName);
    if (listener) {
      event._dispatchListeners =
        accumulateInto(event._dispatchListeners, listener);
      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event.dispatchMarker, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
    fromID,
    toID,
    accumulateDispatches,
    leave,
    enter
  );
}


function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}



/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;

}).call(this,require('_process'))

},{"./EventConstants":223,"./EventPluginHub":225,"./accumulateInto":314,"./forEachAccumulated":329,"_process":166}],229:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ExecutionEnvironment
 */

/*jslint evil: true */

"use strict";

var canUseDOM = !!(
  (typeof window !== 'undefined' &&
  window.document && window.document.createElement)
);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners:
    canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

},{}],230:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule FallbackCompositionState
 * @typechecks static-only
 */

'use strict';

var PooledClass = require("./PooledClass");

var assign = require("./Object.assign");
var getTextContentAccessor = require("./getTextContentAccessor");

/**
 * This helper class stores information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this._root = root;
  this._startText = this.getText();
  this._fallbackText = null;
}

assign(FallbackCompositionState.prototype, {
  /**
   * Get current text of input.
   *
   * @return {string}
   */
  getText: function() {
    if ('value' in this._root) {
      return this._root.value;
    }
    return this._root[getTextContentAccessor()];
  },

  /**
   * Determine the differing substring between the initially stored
   * text content and the current content.
   *
   * @return {string}
   */
  getData: function() {
    if (this._fallbackText) {
      return this._fallbackText;
    }

    var start;
    var startValue = this._startText;
    var startLength = startValue.length;
    var end;
    var endValue = this.getText();
    var endLength = endValue.length;

    for (start = 0; start < startLength; start++) {
      if (startValue[start] !== endValue[start]) {
        break;
      }
    }

    var minEnd = startLength - start;
    for (end = 1; end <= minEnd; end++) {
      if (startValue[startLength - end] !== endValue[endLength - end]) {
        break;
      }
    }

    var sliceTail = end > 1 ? 1 - end : undefined;
    this._fallbackText = endValue.slice(start, sliceTail);
    return this._fallbackText;
  }
});

PooledClass.addPoolingTo(FallbackCompositionState);

module.exports = FallbackCompositionState;

},{"./Object.assign":235,"./PooledClass":236,"./getTextContentAccessor":339}],231:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule HTMLDOMPropertyConfig
 */

/*jslint bitwise: true*/

'use strict';

var DOMProperty = require("./DOMProperty");
var ExecutionEnvironment = require("./ExecutionEnvironment");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE =
  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE =
  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var hasSVG;
if (ExecutionEnvironment.canUseDOM) {
  var implementation = document.implementation;
  hasSVG = (
    implementation &&
    implementation.hasFeature &&
    implementation.hasFeature(
      'http://www.w3.org/TR/SVG11/feature#BasicStructure',
      '1.1'
    )
  );
}


var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(
    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
  ),
  Properties: {
    /**
     * Standard Properties
     */
    accept: null,
    acceptCharset: null,
    accessKey: null,
    action: null,
    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    allowTransparency: MUST_USE_ATTRIBUTE,
    alt: null,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: null,
    // autoFocus is polyfilled/normalized by AutoFocusMixin
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    cellPadding: null,
    cellSpacing: null,
    charSet: MUST_USE_ATTRIBUTE,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    classID: MUST_USE_ATTRIBUTE,
    // To set className on SVG elements, it's necessary to use .setAttribute;
    // this works on HTML elements too in all browsers except IE8. Conveniently,
    // IE8 doesn't support SVG and so we can simply use the attribute in
    // browsers that support SVG and the property in browsers that don't,
    // regardless of whether the element is HTML or SVG.
    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: null,
    content: null,
    contentEditable: null,
    contextMenu: MUST_USE_ATTRIBUTE,
    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    coords: null,
    crossOrigin: null,
    data: null, // For `<object />` acts as `src`.
    dateTime: MUST_USE_ATTRIBUTE,
    defer: HAS_BOOLEAN_VALUE,
    dir: null,
    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: null,
    encType: null,
    form: MUST_USE_ATTRIBUTE,
    formAction: MUST_USE_ATTRIBUTE,
    formEncType: MUST_USE_ATTRIBUTE,
    formMethod: MUST_USE_ATTRIBUTE,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: MUST_USE_ATTRIBUTE,
    frameBorder: MUST_USE_ATTRIBUTE,
    headers: null,
    height: MUST_USE_ATTRIBUTE,
    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    high: null,
    href: null,
    hrefLang: null,
    htmlFor: null,
    httpEquiv: null,
    icon: null,
    id: MUST_USE_PROPERTY,
    label: null,
    lang: null,
    list: MUST_USE_ATTRIBUTE,
    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    low: null,
    manifest: MUST_USE_ATTRIBUTE,
    marginHeight: null,
    marginWidth: null,
    max: null,
    maxLength: MUST_USE_ATTRIBUTE,
    media: MUST_USE_ATTRIBUTE,
    mediaGroup: null,
    method: null,
    min: null,
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: null,
    noValidate: HAS_BOOLEAN_VALUE,
    open: HAS_BOOLEAN_VALUE,
    optimum: null,
    pattern: null,
    placeholder: null,
    poster: null,
    preload: null,
    radioGroup: null,
    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    rel: null,
    required: HAS_BOOLEAN_VALUE,
    role: MUST_USE_ATTRIBUTE,
    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: null,
    sandbox: null,
    scope: null,
    scoped: HAS_BOOLEAN_VALUE,
    scrolling: null,
    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: null,
    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    sizes: MUST_USE_ATTRIBUTE,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: null,
    src: null,
    srcDoc: MUST_USE_PROPERTY,
    srcSet: MUST_USE_ATTRIBUTE,
    start: HAS_NUMERIC_VALUE,
    step: null,
    style: null,
    tabIndex: null,
    target: null,
    title: null,
    type: null,
    useMap: null,
    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
    width: MUST_USE_ATTRIBUTE,
    wmode: MUST_USE_ATTRIBUTE,

    /**
     * Non-standard Properties
     */
    // autoCapitalize and autoCorrect are supported in Mobile Safari for
    // keyboard hints.
    autoCapitalize: null,
    autoCorrect: null,
    // itemProp, itemScope, itemType are for
    // Microdata support. See http://schema.org/docs/gs.html
    itemProp: MUST_USE_ATTRIBUTE,
    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    itemType: MUST_USE_ATTRIBUTE,
    // itemID and itemRef are for Microdata support as well but
    // only specified in the the WHATWG spec document. See
    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
    itemID: MUST_USE_ATTRIBUTE,
    itemRef: MUST_USE_ATTRIBUTE,
    // property is supported for OpenGraph in meta tags.
    property: null,
    // IE-only attribute that controls focus behavior
    unselectable: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {
    autoCapitalize: 'autocapitalize',
    autoComplete: 'autocomplete',
    autoCorrect: 'autocorrect',
    autoFocus: 'autofocus',
    autoPlay: 'autoplay',
    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
    encType: 'encoding',
    hrefLang: 'hreflang',
    radioGroup: 'radiogroup',
    spellCheck: 'spellcheck',
    srcDoc: 'srcdoc',
    srcSet: 'srcset'
  }
};

module.exports = HTMLDOMPropertyConfig;

},{"./DOMProperty":218,"./ExecutionEnvironment":229}],232:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LinkedValueUtils
 * @typechecks static-only
 */

'use strict';

var ReactPropTypes = require("./ReactPropTypes");

var invariant = require("./invariant");

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(input) {
  ("production" !== process.env.NODE_ENV ? invariant(
    input.props.checkedLink == null || input.props.valueLink == null,
    'Cannot provide a checkedLink and a valueLink. If you want to use ' +
    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
}
function _assertValueLink(input) {
  _assertSingleLink(input);
  ("production" !== process.env.NODE_ENV ? invariant(
    input.props.value == null && input.props.onChange == null,
    'Cannot provide a valueLink and a value or onChange event. If you want ' +
    'to use value or onChange, you probably don\'t want to use valueLink.'
  ) : invariant(input.props.value == null && input.props.onChange == null));
}

function _assertCheckedLink(input) {
  _assertSingleLink(input);
  ("production" !== process.env.NODE_ENV ? invariant(
    input.props.checked == null && input.props.onChange == null,
    'Cannot provide a checkedLink and a checked property or onChange event. ' +
    'If you want to use checked or onChange, you probably don\'t want to ' +
    'use checkedLink'
  ) : invariant(input.props.checked == null && input.props.onChange == null));
}

/**
 * @param {SyntheticEvent} e change event to handle
 */
function _handleLinkedValueChange(e) {
  /*jshint validthis:true */
  this.props.valueLink.requestChange(e.target.value);
}

/**
  * @param {SyntheticEvent} e change event to handle
  */
function _handleLinkedCheckChange(e) {
  /*jshint validthis:true */
  this.props.checkedLink.requestChange(e.target.checked);
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  Mixin: {
    propTypes: {
      value: function(props, propName, componentName) {
        if (!props[propName] ||
            hasReadOnlyValue[props.type] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return null;
        }
        return new Error(
          'You provided a `value` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultValue`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      checked: function(props, propName, componentName) {
        if (!props[propName] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return null;
        }
        return new Error(
          'You provided a `checked` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultChecked`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      onChange: ReactPropTypes.func
    }
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return input.props.valueLink.value;
    }
    return input.props.value;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function(input) {
    if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return input.props.checkedLink.value;
    }
    return input.props.checked;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {function} change callback either from onChange prop or link.
   */
  getOnChange: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return _handleLinkedValueChange;
    } else if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return _handleLinkedCheckChange;
    }
    return input.props.onChange;
  }
};

module.exports = LinkedValueUtils;

}).call(this,require('_process'))

},{"./ReactPropTypes":287,"./invariant":344,"_process":166}],233:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LocalEventTrapMixin
 */

'use strict';

var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");

var accumulateInto = require("./accumulateInto");
var forEachAccumulated = require("./forEachAccumulated");
var invariant = require("./invariant");

function remove(event) {
  event.remove();
}

var LocalEventTrapMixin = {
  trapBubbledEvent:function(topLevelType, handlerBaseName) {
    ("production" !== process.env.NODE_ENV ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
    // If a component renders to null or if another component fatals and causes
    // the state of the tree to be corrupted, `node` here can be null.
    var node = this.getDOMNode();
    ("production" !== process.env.NODE_ENV ? invariant(
      node,
      'LocalEventTrapMixin.trapBubbledEvent(...): Requires node to be rendered.'
    ) : invariant(node));
    var listener = ReactBrowserEventEmitter.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      node
    );
    this._localEventListeners =
      accumulateInto(this._localEventListeners, listener);
  },

  // trapCapturedEvent would look nearly identical. We don't implement that
  // method because it isn't currently needed.

  componentWillUnmount:function() {
    if (this._localEventListeners) {
      forEachAccumulated(this._localEventListeners, remove);
    }
  }
};

module.exports = LocalEventTrapMixin;

}).call(this,require('_process'))

},{"./ReactBrowserEventEmitter":239,"./accumulateInto":314,"./forEachAccumulated":329,"./invariant":344,"_process":166}],234:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule MobileSafariClickEventPlugin
 * @typechecks static-only
 */

'use strict';

var EventConstants = require("./EventConstants");

var emptyFunction = require("./emptyFunction");

var topLevelTypes = EventConstants.topLevelTypes;

/**
 * Mobile Safari does not fire properly bubble click events on non-interactive
 * elements, which means delegated click listeners do not fire. The workaround
 * for this bug involves attaching an empty click listener on the target node.
 *
 * This particular plugin works around the bug by attaching an empty click
 * listener on `touchstart` (which does fire on every element).
 */
var MobileSafariClickEventPlugin = {

  eventTypes: null,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topTouchStart) {
      var target = nativeEvent.target;
      if (target && !target.onclick) {
        target.onclick = emptyFunction;
      }
    }
  }

};

module.exports = MobileSafariClickEventPlugin;

},{"./EventConstants":223,"./emptyFunction":323}],235:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Object.assign
 */

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

'use strict';

function assign(target, sources) {
  if (target == null) {
    throw new TypeError('Object.assign target cannot be null or undefined');
  }

  var to = Object(target);
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
    var nextSource = arguments[nextIndex];
    if (nextSource == null) {
      continue;
    }

    var from = Object(nextSource);

    // We don't currently support accessors nor proxies. Therefore this
    // copy cannot throw. If we ever supported this then we must handle
    // exceptions and side-effects. We don't support symbols so they won't
    // be transferred.

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
  }

  return to;
}

module.exports = assign;

},{}],236:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule PooledClass
 */

'use strict';

var invariant = require("./invariant");

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4, a5);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4, a5);
  }
};

var standardReleaser = function(instance) {
  var Klass = this;
  ("production" !== process.env.NODE_ENV ? invariant(
    instance instanceof Klass,
    'Trying to release an instance into a pool of a different type.'
  ) : invariant(instance instanceof Klass));
  if (instance.destructor) {
    instance.destructor();
  }
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances (optional).
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function(CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fiveArgumentPooler: fiveArgumentPooler
};

module.exports = PooledClass;

}).call(this,require('_process'))

},{"./invariant":344,"_process":166}],237:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule React
 */

/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

'use strict';

var EventPluginUtils = require("./EventPluginUtils");
var ReactChildren = require("./ReactChildren");
var ReactComponent = require("./ReactComponent");
var ReactClass = require("./ReactClass");
var ReactContext = require("./ReactContext");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactElement = require("./ReactElement");
var ReactElementValidator = require("./ReactElementValidator");
var ReactDOM = require("./ReactDOM");
var ReactDOMTextComponent = require("./ReactDOMTextComponent");
var ReactDefaultInjection = require("./ReactDefaultInjection");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMount = require("./ReactMount");
var ReactPerf = require("./ReactPerf");
var ReactPropTypes = require("./ReactPropTypes");
var ReactReconciler = require("./ReactReconciler");
var ReactServerRendering = require("./ReactServerRendering");

var assign = require("./Object.assign");
var findDOMNode = require("./findDOMNode");
var onlyChild = require("./onlyChild");

ReactDefaultInjection.inject();

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;
var cloneElement = ReactElement.cloneElement;

if ("production" !== process.env.NODE_ENV) {
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var render = ReactPerf.measure('React', 'render', ReactMount.render);

var React = {
  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    only: onlyChild
  },
  Component: ReactComponent,
  DOM: ReactDOM,
  PropTypes: ReactPropTypes,
  initializeTouchEvents: function(shouldUseTouch) {
    EventPluginUtils.useTouchEvents = shouldUseTouch;
  },
  createClass: ReactClass.createClass,
  createElement: createElement,
  cloneElement: cloneElement,
  createFactory: createFactory,
  createMixin: function(mixin) {
    // Currently a noop. Will be used to validate and trace mixins.
    return mixin;
  },
  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
  findDOMNode: findDOMNode,
  render: render,
  renderToString: ReactServerRendering.renderToString,
  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  isValidElement: ReactElement.isValidElement,
  withContext: ReactContext.withContext,

  // Hook for JSX spread, don't use this for anything else.
  __spread: assign
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    CurrentOwner: ReactCurrentOwner,
    InstanceHandles: ReactInstanceHandles,
    Mount: ReactMount,
    Reconciler: ReactReconciler,
    TextComponent: ReactDOMTextComponent
  });
}

if ("production" !== process.env.NODE_ENV) {
  var ExecutionEnvironment = require("./ExecutionEnvironment");
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

    // If we're in Chrome, look for the devtools marker and provide a download
    // link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
        console.debug(
          'Download the React DevTools for a better development experience: ' +
          'https://fb.me/react-devtools'
        );
      }
    }

    var expectedFeatures = [
      // shims
      Array.isArray,
      Array.prototype.every,
      Array.prototype.forEach,
      Array.prototype.indexOf,
      Array.prototype.map,
      Date.now,
      Function.prototype.bind,
      Object.keys,
      String.prototype.split,
      String.prototype.trim,

      // shams
      Object.create,
      Object.freeze
    ];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        console.error(
          'One or more ES5 shim/shams expected by React are not available: ' +
          'https://fb.me/react-warning-polyfills'
        );
        break;
      }
    }
  }
}

React.version = '0.13.3';

module.exports = React;

}).call(this,require('_process'))

},{"./EventPluginUtils":227,"./ExecutionEnvironment":229,"./Object.assign":235,"./ReactChildren":241,"./ReactClass":242,"./ReactComponent":243,"./ReactContext":247,"./ReactCurrentOwner":248,"./ReactDOM":249,"./ReactDOMTextComponent":260,"./ReactDefaultInjection":263,"./ReactElement":266,"./ReactElementValidator":267,"./ReactInstanceHandles":275,"./ReactMount":279,"./ReactPerf":284,"./ReactPropTypes":287,"./ReactReconciler":290,"./ReactServerRendering":293,"./findDOMNode":326,"./onlyChild":353,"_process":166}],238:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserComponentMixin
 */

'use strict';

var findDOMNode = require("./findDOMNode");

var ReactBrowserComponentMixin = {
  /**
   * Returns the DOM node rendered by this component.
   *
   * @return {DOMElement} The root node of this component.
   * @final
   * @protected
   */
  getDOMNode: function() {
    return findDOMNode(this);
  }
};

module.exports = ReactBrowserComponentMixin;

},{"./findDOMNode":326}],239:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserEventEmitter
 * @typechecks static-only
 */

'use strict';

var EventConstants = require("./EventConstants");
var EventPluginHub = require("./EventPluginHub");
var EventPluginRegistry = require("./EventPluginRegistry");
var ReactEventEmitterMixin = require("./ReactEventEmitterMixin");
var ViewportMetrics = require("./ViewportMetrics");

var assign = require("./Object.assign");
var isEventSupported = require("./isEventSupported");

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topBlur: 'blur',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topScroll: 'scroll',
  topSelectionChange: 'selectionchange',
  topTextInput: 'textInput',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function(ReactEventListener) {
      ReactEventListener.setHandleTopLevel(
        ReactBrowserEventEmitter.handleTopLevel
      );
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function(enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function() {
    return !!(
      (ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled())
    );
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function(registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.
      registrationNameDependencies[registrationName];

    var topLevelTypes = EventConstants.topLevelTypes;
    for (var i = 0, l = dependencies.length; i < l; i++) {
      var dependency = dependencies[i];
      if (!(
            (isListening.hasOwnProperty(dependency) && isListening[dependency])
          )) {
        if (dependency === topLevelTypes.topWheel) {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'wheel',
              mountAt
            );
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'mousewheel',
              mountAt
            );
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'DOMMouseScroll',
              mountAt
            );
          }
        } else if (dependency === topLevelTypes.topScroll) {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topScroll,
              'scroll',
              mountAt
            );
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topScroll,
              'scroll',
              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
            );
          }
        } else if (dependency === topLevelTypes.topFocus ||
            dependency === topLevelTypes.topBlur) {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topFocus,
              'focus',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topBlur,
              'blur',
              mountAt
            );
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topFocus,
              'focusin',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topBlur,
              'focusout',
              mountAt
            );
          }

          // to make sure blur and focus event listeners are only attached once
          isListening[topLevelTypes.topBlur] = true;
          isListening[topLevelTypes.topFocus] = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
            dependency,
            topEventMapping[dependency],
            mountAt
          );
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function() {
    if (!isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  },

  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

  registrationNameModules: EventPluginHub.registrationNameModules,

  putListener: EventPluginHub.putListener,

  getListener: EventPluginHub.getListener,

  deleteListener: EventPluginHub.deleteListener,

  deleteAllListeners: EventPluginHub.deleteAllListeners

});

module.exports = ReactBrowserEventEmitter;

},{"./EventConstants":223,"./EventPluginHub":225,"./EventPluginRegistry":226,"./Object.assign":235,"./ReactEventEmitterMixin":270,"./ViewportMetrics":313,"./isEventSupported":345}],240:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildReconciler
 * @typechecks static-only
 */

'use strict';

var ReactReconciler = require("./ReactReconciler");

var flattenChildren = require("./flattenChildren");
var instantiateReactComponent = require("./instantiateReactComponent");
var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");

/**
 * ReactChildReconciler provides helpers for initializing or updating a set of
 * children. Its output is suitable for passing it onto ReactMultiChild which
 * does diffed reordering and insertion.
 */
var ReactChildReconciler = {

  /**
   * Generates a "mount image" for each of the supplied children. In the case
   * of `ReactDOMComponent`, a mount image is a string of markup.
   *
   * @param {?object} nestedChildNodes Nested child maps.
   * @return {?object} A set of child instances.
   * @internal
   */
  instantiateChildren: function(nestedChildNodes, transaction, context) {
    var children = flattenChildren(nestedChildNodes);
    for (var name in children) {
      if (children.hasOwnProperty(name)) {
        var child = children[name];
        // The rendered children must be turned into instances as they're
        // mounted.
        var childInstance = instantiateReactComponent(child, null);
        children[name] = childInstance;
      }
    }
    return children;
  },

  /**
   * Updates the rendered children and returns a new set of children.
   *
   * @param {?object} prevChildren Previously initialized set of children.
   * @param {?object} nextNestedChildNodes Nested child maps.
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @return {?object} A new set of child instances.
   * @internal
   */
  updateChildren: function(
    prevChildren,
    nextNestedChildNodes,
    transaction,
    context) {
    // We currently don't have a way to track moves here but if we use iterators
    // instead of for..in we can zip the iterators and check if an item has
    // moved.
    // TODO: If nothing has changed, return the prevChildren object so that we
    // can quickly bailout if nothing has changed.
    var nextChildren = flattenChildren(nextNestedChildNodes);
    if (!nextChildren && !prevChildren) {
      return null;
    }
    var name;
    for (name in nextChildren) {
      if (!nextChildren.hasOwnProperty(name)) {
        continue;
      }
      var prevChild = prevChildren && prevChildren[name];
      var prevElement = prevChild && prevChild._currentElement;
      var nextElement = nextChildren[name];
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        ReactReconciler.receiveComponent(
          prevChild, nextElement, transaction, context
        );
        nextChildren[name] = prevChild;
      } else {
        if (prevChild) {
          ReactReconciler.unmountComponent(prevChild, name);
        }
        // The child must be instantiated before it's mounted.
        var nextChildInstance = instantiateReactComponent(
          nextElement,
          null
        );
        nextChildren[name] = nextChildInstance;
      }
    }
    // Unmount children that are no longer present.
    for (name in prevChildren) {
      if (prevChildren.hasOwnProperty(name) &&
          !(nextChildren && nextChildren.hasOwnProperty(name))) {
        ReactReconciler.unmountComponent(prevChildren[name]);
      }
    }
    return nextChildren;
  },

  /**
   * Unmounts all rendered children. This should be used to clean up children
   * when this component is unmounted.
   *
   * @param {?object} renderedChildren Previously initialized set of children.
   * @internal
   */
  unmountChildren: function(renderedChildren) {
    for (var name in renderedChildren) {
      var renderedChild = renderedChildren[name];
      ReactReconciler.unmountComponent(renderedChild);
    }
  }

};

module.exports = ReactChildReconciler;

},{"./ReactReconciler":290,"./flattenChildren":327,"./instantiateReactComponent":343,"./shouldUpdateReactComponent":360}],241:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildren
 */

'use strict';

var PooledClass = require("./PooledClass");
var ReactFragment = require("./ReactFragment");

var traverseAllChildren = require("./traverseAllChildren");
var warning = require("./warning");

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var threeArgumentPooler = PooledClass.threeArgumentPooler;

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.forEachFunction = forEachFunction;
  this.forEachContext = forEachContext;
}
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(traverseContext, child, name, i) {
  var forEachBookKeeping = traverseContext;
  forEachBookKeeping.forEachFunction.call(
    forEachBookKeeping.forEachContext, child, i);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc.
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }

  var traverseContext =
    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, mapFunction, mapContext) {
  this.mapResult = mapResult;
  this.mapFunction = mapFunction;
  this.mapContext = mapContext;
}
PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

function mapSingleChildIntoContext(traverseContext, child, name, i) {
  var mapBookKeeping = traverseContext;
  var mapResult = mapBookKeeping.mapResult;

  var keyUnique = !mapResult.hasOwnProperty(name);
  if ("production" !== process.env.NODE_ENV) {
    ("production" !== process.env.NODE_ENV ? warning(
      keyUnique,
      'ReactChildren.map(...): Encountered two children with the same key, ' +
      '`%s`. Child keys must be unique; when two children share a key, only ' +
      'the first child will be used.',
      name
    ) : null);
  }

  if (keyUnique) {
    var mappedChild =
      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
    mapResult[name] = mappedChild;
  }
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * TODO: This may likely break any calls to `ReactChildren.map` that were
 * previously relying on the fact that we guarded against null children.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} mapFunction.
 * @param {*} mapContext Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var mapResult = {};
  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
  return ReactFragment.create(mapResult);
}

function forEachSingleChildDummy(traverseContext, child, name, i) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  count: countChildren
};

module.exports = ReactChildren;

}).call(this,require('_process'))

},{"./PooledClass":236,"./ReactFragment":272,"./traverseAllChildren":362,"./warning":363,"_process":166}],242:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactClass
 */

'use strict';

var ReactComponent = require("./ReactComponent");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactElement = require("./ReactElement");
var ReactErrorUtils = require("./ReactErrorUtils");
var ReactInstanceMap = require("./ReactInstanceMap");
var ReactLifeCycle = require("./ReactLifeCycle");
var ReactPropTypeLocations = require("./ReactPropTypeLocations");
var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");
var ReactUpdateQueue = require("./ReactUpdateQueue");

var assign = require("./Object.assign");
var invariant = require("./invariant");
var keyMirror = require("./keyMirror");
var keyOf = require("./keyOf");
var warning = require("./warning");

var MIXINS_KEY = keyOf({mixins: null});

/**
 * Policies that describe methods in `ReactClassInterface`.
 */
var SpecPolicy = keyMirror({
  /**
   * These methods may be defined only once by the class specification or mixin.
   */
  DEFINE_ONCE: null,
  /**
   * These methods may be defined by both the class specification and mixins.
   * Subsequent definitions will be chained. These methods must return void.
   */
  DEFINE_MANY: null,
  /**
   * These methods are overriding the base class.
   */
  OVERRIDE_BASE: null,
  /**
   * These methods are similar to DEFINE_MANY, except we assume they return
   * objects. We try to merge the keys of the return values of all the mixed in
   * functions. If there is a key conflict we throw.
   */
  DEFINE_MANY_MERGED: null
});


var injectedMixins = [];

/**
 * Composite components are higher-level components that compose other composite
 * or native components.
 *
 * To create a new type of `ReactClass`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactClassInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will available on the prototype.
 *
 * @interface ReactClassInterface
 * @internal
 */
var ReactClassInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: SpecPolicy.DEFINE_MANY,

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: SpecPolicy.DEFINE_MANY,

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * @return {object}
   * @optional
   */
  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: SpecPolicy.DEFINE_ONCE,



  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: SpecPolicy.DEFINE_MANY,



  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: SpecPolicy.OVERRIDE_BASE

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function(Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function(Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function(Constructor, childContextTypes) {
    if ("production" !== process.env.NODE_ENV) {
      validateTypeDef(
        Constructor,
        childContextTypes,
        ReactPropTypeLocations.childContext
      );
    }
    Constructor.childContextTypes = assign(
      {},
      Constructor.childContextTypes,
      childContextTypes
    );
  },
  contextTypes: function(Constructor, contextTypes) {
    if ("production" !== process.env.NODE_ENV) {
      validateTypeDef(
        Constructor,
        contextTypes,
        ReactPropTypeLocations.context
      );
    }
    Constructor.contextTypes = assign(
      {},
      Constructor.contextTypes,
      contextTypes
    );
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function(Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(
        Constructor.getDefaultProps,
        getDefaultProps
      );
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function(Constructor, propTypes) {
    if ("production" !== process.env.NODE_ENV) {
      validateTypeDef(
        Constructor,
        propTypes,
        ReactPropTypeLocations.prop
      );
    }
    Constructor.propTypes = assign(
      {},
      Constructor.propTypes,
      propTypes
    );
  },
  statics: function(Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  }
};

function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      // use a warning instead of an invariant so components
      // don't show up in prod but not in __DEV__
      ("production" !== process.env.NODE_ENV ? warning(
        typeof typeDef[propName] === 'function',
        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
        'React.PropTypes.',
        Constructor.displayName || 'ReactClass',
        ReactPropTypeLocationNames[location],
        propName
      ) : null);
    }
  }
}

function validateMethodOverride(proto, name) {
  var specPolicy = ReactClassInterface.hasOwnProperty(name) ?
    ReactClassInterface[name] :
    null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactClassMixin.hasOwnProperty(name)) {
    ("production" !== process.env.NODE_ENV ? invariant(
      specPolicy === SpecPolicy.OVERRIDE_BASE,
      'ReactClassInterface: You are attempting to override ' +
      '`%s` from your class specification. Ensure that your method names ' +
      'do not overlap with React methods.',
      name
    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (proto.hasOwnProperty(name)) {
    ("production" !== process.env.NODE_ENV ? invariant(
      specPolicy === SpecPolicy.DEFINE_MANY ||
      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
      'ReactClassInterface: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be due ' +
      'to a mixin.',
      name
    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
  }
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building React classses.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    return;
  }

  ("production" !== process.env.NODE_ENV ? invariant(
    typeof spec !== 'function',
    'ReactClass: You\'re attempting to ' +
    'use a component class as a mixin. Instead, just use a regular object.'
  ) : invariant(typeof spec !== 'function'));
  ("production" !== process.env.NODE_ENV ? invariant(
    !ReactElement.isValidElement(spec),
    'ReactClass: You\'re attempting to ' +
    'use a component as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactElement.isValidElement(spec)));

  var proto = Constructor.prototype;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above
      continue;
    }

    var property = spec[name];
    validateMethodOverride(proto, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactClass methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isReactClassMethod =
        ReactClassInterface.hasOwnProperty(name);
      var isAlreadyDefined = proto.hasOwnProperty(name);
      var markedDontBind = property && property.__reactDontBind;
      var isFunction = typeof property === 'function';
      var shouldAutoBind =
        isFunction &&
        !isReactClassMethod &&
        !isAlreadyDefined &&
        !markedDontBind;

      if (shouldAutoBind) {
        if (!proto.__reactAutoBindMap) {
          proto.__reactAutoBindMap = {};
        }
        proto.__reactAutoBindMap[name] = property;
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactClassInterface[name];

          // These cases should already be caught by validateMethodOverride
          ("production" !== process.env.NODE_ENV ? invariant(
            isReactClassMethod && (
              (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
            ),
            'ReactClass: Unexpected spec policy %s for key %s ' +
            'when mixing in component specs.',
            specPolicy,
            name
          ) : invariant(isReactClassMethod && (
            (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
          )));

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if ("production" !== process.env.NODE_ENV) {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = name in RESERVED_SPEC_KEYS;
    ("production" !== process.env.NODE_ENV ? invariant(
      !isReserved,
      'ReactClass: You are attempting to define a reserved ' +
      'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
      'as an instance property instead; it will still be accessible on the ' +
      'constructor.',
      name
    ) : invariant(!isReserved));

    var isInherited = name in Constructor;
    ("production" !== process.env.NODE_ENV ? invariant(
      !isInherited,
      'ReactClass: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be ' +
      'due to a mixin.',
      name
    ) : invariant(!isInherited));
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeIntoWithNoDuplicateKeys(one, two) {
  ("production" !== process.env.NODE_ENV ? invariant(
    one && two && typeof one === 'object' && typeof two === 'object',
    'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

  for (var key in two) {
    if (two.hasOwnProperty(key)) {
      ("production" !== process.env.NODE_ENV ? invariant(
        one[key] === undefined,
        'mergeIntoWithNoDuplicateKeys(): ' +
        'Tried to merge two objects with the same key: `%s`. This conflict ' +
        'may be due to a mixin; in particular, this may be caused by two ' +
        'getInitialState() or getDefaultProps() methods returning objects ' +
        'with clashing keys.',
        key
      ) : invariant(one[key] === undefined));
      one[key] = two[key];
    }
  }
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    var c = {};
    mergeIntoWithNoDuplicateKeys(c, a);
    mergeIntoWithNoDuplicateKeys(c, b);
    return c;
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * Binds a method to the component.
 *
 * @param {object} component Component whose method is going to be bound.
 * @param {function} method Method to be bound.
 * @return {function} The bound method.
 */
function bindAutoBindMethod(component, method) {
  var boundMethod = method.bind(component);
  if ("production" !== process.env.NODE_ENV) {
    boundMethod.__reactBoundContext = component;
    boundMethod.__reactBoundMethod = method;
    boundMethod.__reactBoundArguments = null;
    var componentName = component.constructor.displayName;
    var _bind = boundMethod.bind;
    /* eslint-disable block-scoped-var, no-undef */
    boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
      // User is trying to bind() an autobound method; we effectively will
      // ignore the value of "this" that the user is trying to use, so
      // let's warn.
      if (newThis !== component && newThis !== null) {
        ("production" !== process.env.NODE_ENV ? warning(
          false,
          'bind(): React component methods may only be bound to the ' +
          'component instance. See %s',
          componentName
        ) : null);
      } else if (!args.length) {
        ("production" !== process.env.NODE_ENV ? warning(
          false,
          'bind(): You are binding a component method to the component. ' +
          'React does this for you automatically in a high-performance ' +
          'way, so you can safely remove this call. See %s',
          componentName
        ) : null);
        return boundMethod;
      }
      var reboundMethod = _bind.apply(boundMethod, arguments);
      reboundMethod.__reactBoundContext = component;
      reboundMethod.__reactBoundMethod = method;
      reboundMethod.__reactBoundArguments = args;
      return reboundMethod;
      /* eslint-enable */
    };
  }
  return boundMethod;
}

/**
 * Binds all auto-bound methods in a component.
 *
 * @param {object} component Component whose method is going to be bound.
 */
function bindAutoBindMethods(component) {
  for (var autoBindKey in component.__reactAutoBindMap) {
    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
      var method = component.__reactAutoBindMap[autoBindKey];
      component[autoBindKey] = bindAutoBindMethod(
        component,
        ReactErrorUtils.guard(
          method,
          component.constructor.displayName + '.' + autoBindKey
        )
      );
    }
  }
}

var typeDeprecationDescriptor = {
  enumerable: false,
  get: function() {
    var displayName = this.displayName || this.name || 'Component';
    ("production" !== process.env.NODE_ENV ? warning(
      false,
      '%s.type is deprecated. Use %s directly to access the class.',
      displayName,
      displayName
    ) : null);
    Object.defineProperty(this, 'type', {
      value: this
    });
    return this;
  }
};

/**
 * Add more to the ReactClass base class. These are all legacy features and
 * therefore not already part of the modern ReactComponent.
 */
var ReactClassMixin = {

  /**
   * TODO: This will be deprecated because state should always keep a consistent
   * type signature and the only use case for this, is to avoid that.
   */
  replaceState: function(newState, callback) {
    ReactUpdateQueue.enqueueReplaceState(this, newState);
    if (callback) {
      ReactUpdateQueue.enqueueCallback(this, callback);
    }
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function() {
    if ("production" !== process.env.NODE_ENV) {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
        ("production" !== process.env.NODE_ENV ? warning(
          owner._warnedAboutRefsInRender,
          '%s is accessing isMounted inside its render() function. ' +
          'render() should be a pure function of props and state. It should ' +
          'never access something that requires stale data from the previous ' +
          'render, such as refs. Move this logic to componentDidMount and ' +
          'componentDidUpdate instead.',
          owner.getName() || 'A component'
        ) : null);
        owner._warnedAboutRefsInRender = true;
      }
    }
    var internalInstance = ReactInstanceMap.get(this);
    return (
      internalInstance &&
      internalInstance !== ReactLifeCycle.currentlyMountingInstance
    );
  },

  /**
   * Sets a subset of the props.
   *
   * @param {object} partialProps Subset of the next props.
   * @param {?function} callback Called after props are updated.
   * @final
   * @public
   * @deprecated
   */
  setProps: function(partialProps, callback) {
    ReactUpdateQueue.enqueueSetProps(this, partialProps);
    if (callback) {
      ReactUpdateQueue.enqueueCallback(this, callback);
    }
  },

  /**
   * Replace all the props.
   *
   * @param {object} newProps Subset of the next props.
   * @param {?function} callback Called after props are updated.
   * @final
   * @public
   * @deprecated
   */
  replaceProps: function(newProps, callback) {
    ReactUpdateQueue.enqueueReplaceProps(this, newProps);
    if (callback) {
      ReactUpdateQueue.enqueueCallback(this, callback);
    }
  }
};

var ReactClassComponent = function() {};
assign(
  ReactClassComponent.prototype,
  ReactComponent.prototype,
  ReactClassMixin
);

/**
 * Module for creating composite components.
 *
 * @class ReactClass
 */
var ReactClass = {

  /**
   * Creates a composite component class given a class specification.
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function(spec) {
    var Constructor = function(props, context) {
      // This constructor is overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      if ("production" !== process.env.NODE_ENV) {
        ("production" !== process.env.NODE_ENV ? warning(
          this instanceof Constructor,
          'Something is calling a React component directly. Use a factory or ' +
          'JSX instead. See: https://fb.me/react-legacyfactory'
        ) : null);
      }

      // Wire up auto-binding
      if (this.__reactAutoBindMap) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if ("production" !== process.env.NODE_ENV) {
        // We allow auto-mocks to proceed as if they're returning null.
        if (typeof initialState === 'undefined' &&
            this.getInitialState._isMockFunction) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;
        }
      }
      ("production" !== process.env.NODE_ENV ? invariant(
        typeof initialState === 'object' && !Array.isArray(initialState),
        '%s.getInitialState(): must return an object or null',
        Constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

      this.state = initialState;
    };
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;

    injectedMixins.forEach(
      mixSpecIntoComponent.bind(null, Constructor)
    );

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if ("production" !== process.env.NODE_ENV) {
      // This is a tag to indicate that the use of these method names is ok,
      // since it's used with createClass. If it's not, then it's likely a
      // mistake so we'll warn you to use the static property, property
      // initializer or constructor respectively.
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    ("production" !== process.env.NODE_ENV ? invariant(
      Constructor.prototype.render,
      'createClass(...): Class specification must implement a `render` method.'
    ) : invariant(Constructor.prototype.render));

    if ("production" !== process.env.NODE_ENV) {
      ("production" !== process.env.NODE_ENV ? warning(
        !Constructor.prototype.componentShouldUpdate,
        '%s has a method called ' +
        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
        'The name is phrased as a question because the function is ' +
        'expected to return a value.',
        spec.displayName || 'A component'
      ) : null);
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    // Legacy hook
    Constructor.type = Constructor;
    if ("production" !== process.env.NODE_ENV) {
      try {
        Object.defineProperty(Constructor, 'type', typeDeprecationDescriptor);
      } catch (x) {
        // IE will fail on defineProperty (es5-shim/sham too)
      }
    }

    return Constructor;
  },

  injection: {
    injectMixin: function(mixin) {
      injectedMixins.push(mixin);
    }
  }

};

module.exports = ReactClass;

}).call(this,require('_process'))

},{"./Object.assign":235,"./ReactComponent":243,"./ReactCurrentOwner":248,"./ReactElement":266,"./ReactErrorUtils":269,"./ReactInstanceMap":276,"./ReactLifeCycle":277,"./ReactPropTypeLocationNames":285,"./ReactPropTypeLocations":286,"./ReactUpdateQueue":295,"./invariant":344,"./keyMirror":349,"./keyOf":350,"./warning":363,"_process":166}],243:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponent
 */

'use strict';

var ReactUpdateQueue = require("./ReactUpdateQueue");

var invariant = require("./invariant");
var warning = require("./warning");

/**
 * Base class helpers for the updating state of a component.
 */
function ReactComponent(props, context) {
  this.props = props;
  this.context = context;
}

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
ReactComponent.prototype.setState = function(partialState, callback) {
  ("production" !== process.env.NODE_ENV ? invariant(
    typeof partialState === 'object' ||
    typeof partialState === 'function' ||
    partialState == null,
    'setState(...): takes an object of state variables to update or a ' +
    'function which returns an object of state variables.'
  ) : invariant(typeof partialState === 'object' ||
  typeof partialState === 'function' ||
  partialState == null));
  if ("production" !== process.env.NODE_ENV) {
    ("production" !== process.env.NODE_ENV ? warning(
      partialState != null,
      'setState(...): You passed an undefined or null state object; ' +
      'instead, use forceUpdate().'
    ) : null);
  }
  ReactUpdateQueue.enqueueSetState(this, partialState);
  if (callback) {
    ReactUpdateQueue.enqueueCallback(this, callback);
  }
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
ReactComponent.prototype.forceUpdate = function(callback) {
  ReactUpdateQueue.enqueueForceUpdate(this);
  if (callback) {
    ReactUpdateQueue.enqueueCallback(this, callback);
  }
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
if ("production" !== process.env.NODE_ENV) {
  var deprecatedAPIs = {
    getDOMNode: [
      'getDOMNode',
      'Use React.findDOMNode(component) instead.'
    ],
    isMounted: [
      'isMounted',
      'Instead, make sure to clean up subscriptions and pending requests in ' +
      'componentWillUnmount to prevent memory leaks.'
    ],
    replaceProps: [
      'replaceProps',
      'Instead, call React.render again at the top level.'
    ],
    replaceState: [
      'replaceState',
      'Refactor your code to use setState instead (see ' +
      'https://github.com/facebook/react/issues/3236).'
    ],
    setProps: [
      'setProps',
      'Instead, call React.render again at the top level.'
    ]
  };
  var defineDeprecationWarning = function(methodName, info) {
    try {
      Object.defineProperty(ReactComponent.prototype, methodName, {
        get: function() {
          ("production" !== process.env.NODE_ENV ? warning(
            false,
            '%s(...) is deprecated in plain JavaScript React classes. %s',
            info[0],
            info[1]
          ) : null);
          return undefined;
        }
      });
    } catch (x) {
      // IE will fail on defineProperty (es5-shim/sham too)
    }
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

module.exports = ReactComponent;

}).call(this,require('_process'))

},{"./ReactUpdateQueue":295,"./invariant":344,"./warning":363,"_process":166}],244:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentBrowserEnvironment
 */

/*jslint evil: true */

'use strict';

var ReactDOMIDOperations = require("./ReactDOMIDOperations");
var ReactMount = require("./ReactMount");

/**
 * Abstracts away all functionality of the reconciler that requires knowledge of
 * the browser context. TODO: These callers should be refactored to avoid the
 * need for this injection.
 */
var ReactComponentBrowserEnvironment = {

  processChildrenUpdates:
    ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

  replaceNodeWithMarkupByID:
    ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

  /**
   * If a particular environment requires that some resources be cleaned up,
   * specify this in the injected Mixin. In the DOM, we would likely want to
   * purge any cached node ID lookups.
   *
   * @private
   */
  unmountIDFromEnvironment: function(rootNodeID) {
    ReactMount.purgeID(rootNodeID);
  }

};

module.exports = ReactComponentBrowserEnvironment;

},{"./ReactDOMIDOperations":253,"./ReactMount":279}],245:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentEnvironment
 */

'use strict';

var invariant = require("./invariant");

var injected = false;

var ReactComponentEnvironment = {

  /**
   * Optionally injectable environment dependent cleanup hook. (server vs.
   * browser etc). Example: A browser system caches DOM nodes based on component
   * ID and must remove that cache entry when this instance is unmounted.
   */
  unmountIDFromEnvironment: null,

  /**
   * Optionally injectable hook for swapping out mount images in the middle of
   * the tree.
   */
  replaceNodeWithMarkupByID: null,

  /**
   * Optionally injectable hook for processing a queue of child updates. Will
   * later move into MultiChildComponents.
   */
  processChildrenUpdates: null,

  injection: {
    injectEnvironment: function(environment) {
      ("production" !== process.env.NODE_ENV ? invariant(
        !injected,
        'ReactCompositeComponent: injectEnvironment() can only be called once.'
      ) : invariant(!injected));
      ReactComponentEnvironment.unmountIDFromEnvironment =
        environment.unmountIDFromEnvironment;
      ReactComponentEnvironment.replaceNodeWithMarkupByID =
        environment.replaceNodeWithMarkupByID;
      ReactComponentEnvironment.processChildrenUpdates =
        environment.processChildrenUpdates;
      injected = true;
    }
  }

};

module.exports = ReactComponentEnvironment;

}).call(this,require('_process'))

},{"./invariant":344,"_process":166}],246:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCompositeComponent
 */

'use strict';

var ReactComponentEnvironment = require("./ReactComponentEnvironment");
var ReactContext = require("./ReactContext");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactElement = require("./ReactElement");
var ReactElementValidator = require("./ReactElementValidator");
var ReactInstanceMap = require("./ReactInstanceMap");
var ReactLifeCycle = require("./ReactLifeCycle");
var ReactNativeComponent = require("./ReactNativeComponent");
var ReactPerf = require("./ReactPerf");
var ReactPropTypeLocations = require("./ReactPropTypeLocations");
var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");
var ReactReconciler = require("./ReactReconciler");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");
var emptyObject = require("./emptyObject");
var invariant = require("./invariant");
var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");
var warning = require("./warning");

function getDeclarationErrorAddendum(component) {
  var owner = component._currentElement._owner || null;
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * ------------------ The Life-Cycle of a Composite Component ------------------
 *
 * - constructor: Initialization of state. The instance is now retained.
 *   - componentWillMount
 *   - render
 *   - [children's constructors]
 *     - [children's componentWillMount and render]
 *     - [children's componentDidMount]
 *     - componentDidMount
 *
 *       Update Phases:
 *       - componentWillReceiveProps (only called if parent updated)
 *       - shouldComponentUpdate
 *         - componentWillUpdate
 *           - render
 *           - [children's constructors or receive props phases]
 *         - componentDidUpdate
 *
 *     - componentWillUnmount
 *     - [children's componentWillUnmount]
 *   - [children destroyed]
 * - (destroyed): The instance is now blank, released by React and ready for GC.
 *
 * -----------------------------------------------------------------------------
 */

/**
 * An incrementing ID assigned to each component when it is mounted. This is
 * used to enforce the order in which `ReactUpdates` updates dirty components.
 *
 * @private
 */
var nextMountID = 1;

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponentMixin = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function(element) {
    this._currentElement = element;
    this._rootNodeID = null;
    this._instance = null;

    // See ReactUpdateQueue
    this._pendingElement = null;
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    this._renderedComponent = null;

    this._context = null;
    this._mountOrder = 0;
    this._isTopLevel = false;

    // See ReactUpdates and ReactUpdateQueue.
    this._pendingCallbacks = null;
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function(rootID, transaction, context) {
    this._context = context;
    this._mountOrder = nextMountID++;
    this._rootNodeID = rootID;

    var publicProps = this._processProps(this._currentElement.props);
    var publicContext = this._processContext(this._currentElement._context);

    var Component = ReactNativeComponent.getComponentClassForElement(
      this._currentElement
    );

    // Initialize the public class
    var inst = new Component(publicProps, publicContext);

    if ("production" !== process.env.NODE_ENV) {
      // This will throw later in _renderValidatedComponent, but add an early
      // warning now to help debugging
      ("production" !== process.env.NODE_ENV ? warning(
        inst.render != null,
        '%s(...): No `render` method found on the returned component ' +
        'instance: you may have forgotten to define `render` in your ' +
        'component or you may have accidentally tried to render an element ' +
        'whose type is a function that isn\'t a React component.',
        Component.displayName || Component.name || 'Component'
      ) : null);
    }

    // These should be set up in the constructor, but as a convenience for
    // simpler class abstractions, we set them up after the fact.
    inst.props = publicProps;
    inst.context = publicContext;
    inst.refs = emptyObject;

    this._instance = inst;

    // Store a reference from the instance back to the internal representation
    ReactInstanceMap.set(inst, this);

    if ("production" !== process.env.NODE_ENV) {
      this._warnIfContextsDiffer(this._currentElement._context, context);
    }

    if ("production" !== process.env.NODE_ENV) {
      // Since plain JS classes are defined without any special initialization
      // logic, we can not catch common errors early. Therefore, we have to
      // catch them here, at initialization time, instead.
      ("production" !== process.env.NODE_ENV ? warning(
        !inst.getInitialState ||
        inst.getInitialState.isReactClassApproved,
        'getInitialState was defined on %s, a plain JavaScript class. ' +
        'This is only supported for classes created using React.createClass. ' +
        'Did you mean to define a state property instead?',
        this.getName() || 'a component'
      ) : null);
      ("production" !== process.env.NODE_ENV ? warning(
        !inst.getDefaultProps ||
        inst.getDefaultProps.isReactClassApproved,
        'getDefaultProps was defined on %s, a plain JavaScript class. ' +
        'This is only supported for classes created using React.createClass. ' +
        'Use a static property to define defaultProps instead.',
        this.getName() || 'a component'
      ) : null);
      ("production" !== process.env.NODE_ENV ? warning(
        !inst.propTypes,
        'propTypes was defined as an instance property on %s. Use a static ' +
        'property to define propTypes instead.',
        this.getName() || 'a component'
      ) : null);
      ("production" !== process.env.NODE_ENV ? warning(
        !inst.contextTypes,
        'contextTypes was defined as an instance property on %s. Use a ' +
        'static property to define contextTypes instead.',
        this.getName() || 'a component'
      ) : null);
      ("production" !== process.env.NODE_ENV ? warning(
        typeof inst.componentShouldUpdate !== 'function',
        '%s has a method called ' +
        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
        'The name is phrased as a question because the function is ' +
        'expected to return a value.',
        (this.getName() || 'A component')
      ) : null);
    }

    var initialState = inst.state;
    if (initialState === undefined) {
      inst.state = initialState = null;
    }
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof initialState === 'object' && !Array.isArray(initialState),
      '%s.state: must be set to an object or null',
      this.getName() || 'ReactCompositeComponent'
    ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    var childContext;
    var renderedElement;

    var previouslyMounting = ReactLifeCycle.currentlyMountingInstance;
    ReactLifeCycle.currentlyMountingInstance = this;
    try {
      if (inst.componentWillMount) {
        inst.componentWillMount();
        // When mounting, calls to `setState` by `componentWillMount` will set
        // `this._pendingStateQueue` without triggering a re-render.
        if (this._pendingStateQueue) {
          inst.state = this._processPendingState(inst.props, inst.context);
        }
      }

      childContext = this._getValidatedChildContext(context);
      renderedElement = this._renderValidatedComponent(childContext);
    } finally {
      ReactLifeCycle.currentlyMountingInstance = previouslyMounting;
    }

    this._renderedComponent = this._instantiateReactComponent(
      renderedElement,
      this._currentElement.type // The wrapping type
    );

    var markup = ReactReconciler.mountComponent(
      this._renderedComponent,
      rootID,
      transaction,
      this._mergeChildContext(context, childContext)
    );
    if (inst.componentDidMount) {
      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
    }

    return markup;
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function() {
    var inst = this._instance;

    if (inst.componentWillUnmount) {
      var previouslyUnmounting = ReactLifeCycle.currentlyUnmountingInstance;
      ReactLifeCycle.currentlyUnmountingInstance = this;
      try {
        inst.componentWillUnmount();
      } finally {
        ReactLifeCycle.currentlyUnmountingInstance = previouslyUnmounting;
      }
    }

    ReactReconciler.unmountComponent(this._renderedComponent);
    this._renderedComponent = null;

    // Reset pending fields
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;
    this._pendingCallbacks = null;
    this._pendingElement = null;

    // These fields do not really need to be reset since this object is no
    // longer accessible.
    this._context = null;
    this._rootNodeID = null;

    // Delete the reference from the instance to this internal representation
    // which allow the internals to be properly cleaned up even if the user
    // leaks a reference to the public instance.
    ReactInstanceMap.remove(inst);

    // Some existing components rely on inst.props even after they've been
    // destroyed (in event handlers).
    // TODO: inst.props = null;
    // TODO: inst.state = null;
    // TODO: inst.context = null;
  },

  /**
   * Schedule a partial update to the props. Only used for internal testing.
   *
   * @param {object} partialProps Subset of the next props.
   * @param {?function} callback Called after props are updated.
   * @final
   * @internal
   */
  _setPropsInternal: function(partialProps, callback) {
    // This is a deoptimized path. We optimize for always having an element.
    // This creates an extra internal element.
    var element = this._pendingElement || this._currentElement;
    this._pendingElement = ReactElement.cloneAndReplaceProps(
      element,
      assign({}, element.props, partialProps)
    );
    ReactUpdates.enqueueUpdate(this, callback);
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _maskContext: function(context) {
    var maskedContext = null;
    // This really should be getting the component class for the element,
    // but we know that we're not going to need it for built-ins.
    if (typeof this._currentElement.type === 'string') {
      return emptyObject;
    }
    var contextTypes = this._currentElement.type.contextTypes;
    if (!contextTypes) {
      return emptyObject;
    }
    maskedContext = {};
    for (var contextName in contextTypes) {
      maskedContext[contextName] = context[contextName];
    }
    return maskedContext;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function(context) {
    var maskedContext = this._maskContext(context);
    if ("production" !== process.env.NODE_ENV) {
      var Component = ReactNativeComponent.getComponentClassForElement(
        this._currentElement
      );
      if (Component.contextTypes) {
        this._checkPropTypes(
          Component.contextTypes,
          maskedContext,
          ReactPropTypeLocations.context
        );
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _getValidatedChildContext: function(currentContext) {
    var inst = this._instance;
    var childContext = inst.getChildContext && inst.getChildContext();
    if (childContext) {
      ("production" !== process.env.NODE_ENV ? invariant(
        typeof inst.constructor.childContextTypes === 'object',
        '%s.getChildContext(): childContextTypes must be defined in order to ' +
        'use getChildContext().',
        this.getName() || 'ReactCompositeComponent'
      ) : invariant(typeof inst.constructor.childContextTypes === 'object'));
      if ("production" !== process.env.NODE_ENV) {
        this._checkPropTypes(
          inst.constructor.childContextTypes,
          childContext,
          ReactPropTypeLocations.childContext
        );
      }
      for (var name in childContext) {
        ("production" !== process.env.NODE_ENV ? invariant(
          name in inst.constructor.childContextTypes,
          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
          this.getName() || 'ReactCompositeComponent',
          name
        ) : invariant(name in inst.constructor.childContextTypes));
      }
      return childContext;
    }
    return null;
  },

  _mergeChildContext: function(currentContext, childContext) {
    if (childContext) {
      return assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Processes props by setting default values for unspecified props and
   * asserting that the props are valid. Does not mutate its argument; returns
   * a new props object with defaults merged in.
   *
   * @param {object} newProps
   * @return {object}
   * @private
   */
  _processProps: function(newProps) {
    if ("production" !== process.env.NODE_ENV) {
      var Component = ReactNativeComponent.getComponentClassForElement(
        this._currentElement
      );
      if (Component.propTypes) {
        this._checkPropTypes(
          Component.propTypes,
          newProps,
          ReactPropTypeLocations.prop
        );
      }
    }
    return newProps;
  },

  /**
   * Assert that the props are valid
   *
   * @param {object} propTypes Map of prop name to a ReactPropType
   * @param {object} props
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkPropTypes: function(propTypes, props, location) {
    // TODO: Stop validating prop types here and only use the element
    // validation.
    var componentName = this.getName();
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error;
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          ("production" !== process.env.NODE_ENV ? invariant(
            typeof propTypes[propName] === 'function',
            '%s: %s type `%s` is invalid; it must be a function, usually ' +
            'from React.PropTypes.',
            componentName || 'React class',
            ReactPropTypeLocationNames[location],
            propName
          ) : invariant(typeof propTypes[propName] === 'function'));
          error = propTypes[propName](props, propName, componentName, location);
        } catch (ex) {
          error = ex;
        }
        if (error instanceof Error) {
          // We may want to extend this logic for similar errors in
          // React.render calls, so I'm abstracting it away into
          // a function to minimize refactoring in the future
          var addendum = getDeclarationErrorAddendum(this);

          if (location === ReactPropTypeLocations.prop) {
            // Preface gives us something to blacklist in warning module
            ("production" !== process.env.NODE_ENV ? warning(
              false,
              'Failed Composite propType: %s%s',
              error.message,
              addendum
            ) : null);
          } else {
            ("production" !== process.env.NODE_ENV ? warning(
              false,
              'Failed Context Types: %s%s',
              error.message,
              addendum
            ) : null);
          }
        }
      }
    }
  },

  receiveComponent: function(nextElement, transaction, nextContext) {
    var prevElement = this._currentElement;
    var prevContext = this._context;

    this._pendingElement = null;

    this.updateComponent(
      transaction,
      prevElement,
      nextElement,
      prevContext,
      nextContext
    );
  },

  /**
   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function(transaction) {
    if (this._pendingElement != null) {
      ReactReconciler.receiveComponent(
        this,
        this._pendingElement || this._currentElement,
        transaction,
        this._context
      );
    }

    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
      if ("production" !== process.env.NODE_ENV) {
        ReactElementValidator.checkAndWarnForMutatedProps(
          this._currentElement
        );
      }

      this.updateComponent(
        transaction,
        this._currentElement,
        this._currentElement,
        this._context,
        this._context
      );
    }
  },

  /**
   * Compare two contexts, warning if they are different
   * TODO: Remove this check when owner-context is removed
   */
   _warnIfContextsDiffer: function(ownerBasedContext, parentBasedContext) {
    ownerBasedContext = this._maskContext(ownerBasedContext);
    parentBasedContext = this._maskContext(parentBasedContext);
    var parentKeys = Object.keys(parentBasedContext).sort();
    var displayName = this.getName() || 'ReactCompositeComponent';
    for (var i = 0; i < parentKeys.length; i++) {
      var key = parentKeys[i];
      ("production" !== process.env.NODE_ENV ? warning(
        ownerBasedContext[key] === parentBasedContext[key],
        'owner-based and parent-based contexts differ '  +
        '(values: `%s` vs `%s`) for key (%s) while mounting %s ' +
        '(see: http://fb.me/react-context-by-parent)',
        ownerBasedContext[key],
        parentBasedContext[key],
        key,
        displayName
      ) : null);
    }
  },

  /**
   * Perform an update to a mounted component. The componentWillReceiveProps and
   * shouldComponentUpdate methods are called, then (assuming the update isn't
   * skipped) the remaining update lifecycle methods are called and the DOM
   * representation is updated.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevParentElement
   * @param {ReactElement} nextParentElement
   * @internal
   * @overridable
   */
  updateComponent: function(
    transaction,
    prevParentElement,
    nextParentElement,
    prevUnmaskedContext,
    nextUnmaskedContext
  ) {
    var inst = this._instance;

    var nextContext = inst.context;
    var nextProps = inst.props;

    // Distinguish between a props update versus a simple state update
    if (prevParentElement !== nextParentElement) {
      nextContext = this._processContext(nextParentElement._context);
      nextProps = this._processProps(nextParentElement.props);

      if ("production" !== process.env.NODE_ENV) {
        if (nextUnmaskedContext != null) {
          this._warnIfContextsDiffer(
            nextParentElement._context,
            nextUnmaskedContext
          );
        }
      }

      // An update here will schedule an update but immediately set
      // _pendingStateQueue which will ensure that any state updates gets
      // immediately reconciled instead of waiting for the next batch.

      if (inst.componentWillReceiveProps) {
        inst.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    var nextState = this._processPendingState(nextProps, nextContext);

    var shouldUpdate =
      this._pendingForceUpdate ||
      !inst.shouldComponentUpdate ||
      inst.shouldComponentUpdate(nextProps, nextState, nextContext);

    if ("production" !== process.env.NODE_ENV) {
      ("production" !== process.env.NODE_ENV ? warning(
        typeof shouldUpdate !== 'undefined',
        '%s.shouldComponentUpdate(): Returned undefined instead of a ' +
        'boolean value. Make sure to return true or false.',
        this.getName() || 'ReactCompositeComponent'
      ) : null);
    }

    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(
        nextParentElement,
        nextProps,
        nextState,
        nextContext,
        transaction,
        nextUnmaskedContext
      );
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state but we shortcut the rest of the update.
      this._currentElement = nextParentElement;
      this._context = nextUnmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;
    }
  },

  _processPendingState: function(props, context) {
    var inst = this._instance;
    var queue = this._pendingStateQueue;
    var replace = this._pendingReplaceState;
    this._pendingReplaceState = false;
    this._pendingStateQueue = null;

    if (!queue) {
      return inst.state;
    }

    if (replace && queue.length === 1) {
      return queue[0];
    }

    var nextState = assign({}, replace ? queue[0] : inst.state);
    for (var i = replace ? 1 : 0; i < queue.length; i++) {
      var partial = queue[i];
      assign(
        nextState,
        typeof partial === 'function' ?
          partial.call(inst, nextState, props, context) :
          partial
      );
    }

    return nextState;
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @param {?object} unmaskedContext
   * @private
   */
  _performComponentUpdate: function(
    nextElement,
    nextProps,
    nextState,
    nextContext,
    transaction,
    unmaskedContext
  ) {
    var inst = this._instance;

    var prevProps = inst.props;
    var prevState = inst.state;
    var prevContext = inst.context;

    if (inst.componentWillUpdate) {
      inst.componentWillUpdate(nextProps, nextState, nextContext);
    }

    this._currentElement = nextElement;
    this._context = unmaskedContext;
    inst.props = nextProps;
    inst.state = nextState;
    inst.context = nextContext;

    this._updateRenderedComponent(transaction, unmaskedContext);

    if (inst.componentDidUpdate) {
      transaction.getReactMountReady().enqueue(
        inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext),
        inst
      );
    }
  },

  /**
   * Call the component's `render` method and update the DOM accordingly.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  _updateRenderedComponent: function(transaction, context) {
    var prevComponentInstance = this._renderedComponent;
    var prevRenderedElement = prevComponentInstance._currentElement;
    var childContext = this._getValidatedChildContext();
    var nextRenderedElement = this._renderValidatedComponent(childContext);
    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
      ReactReconciler.receiveComponent(
        prevComponentInstance,
        nextRenderedElement,
        transaction,
        this._mergeChildContext(context, childContext)
      );
    } else {
      // These two IDs are actually the same! But nothing should rely on that.
      var thisID = this._rootNodeID;
      var prevComponentID = prevComponentInstance._rootNodeID;
      ReactReconciler.unmountComponent(prevComponentInstance);

      this._renderedComponent = this._instantiateReactComponent(
        nextRenderedElement,
        this._currentElement.type
      );
      var nextMarkup = ReactReconciler.mountComponent(
        this._renderedComponent,
        thisID,
        transaction,
        this._mergeChildContext(context, childContext)
      );
      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
    }
  },

  /**
   * @protected
   */
  _replaceNodeWithMarkupByID: function(prevComponentID, nextMarkup) {
    ReactComponentEnvironment.replaceNodeWithMarkupByID(
      prevComponentID,
      nextMarkup
    );
  },

  /**
   * @protected
   */
  _renderValidatedComponentWithoutOwnerOrContext: function() {
    var inst = this._instance;
    var renderedComponent = inst.render();
    if ("production" !== process.env.NODE_ENV) {
      // We allow auto-mocks to proceed as if they're returning null.
      if (typeof renderedComponent === 'undefined' &&
          inst.render._isMockFunction) {
        // This is probably bad practice. Consider warning here and
        // deprecating this convenience.
        renderedComponent = null;
      }
    }

    return renderedComponent;
  },

  /**
   * @private
   */
  _renderValidatedComponent: function(childContext) {
    var renderedComponent;
    var previousContext = ReactContext.current;
    ReactContext.current = this._mergeChildContext(
      this._currentElement._context,
      childContext
    );
    ReactCurrentOwner.current = this;
    try {
      renderedComponent =
        this._renderValidatedComponentWithoutOwnerOrContext();
    } finally {
      ReactContext.current = previousContext;
      ReactCurrentOwner.current = null;
    }
    ("production" !== process.env.NODE_ENV ? invariant(
      // TODO: An `isValidNode` function would probably be more appropriate
      renderedComponent === null || renderedComponent === false ||
      ReactElement.isValidElement(renderedComponent),
      '%s.render(): A valid ReactComponent must be returned. You may have ' +
        'returned undefined, an array or some other invalid object.',
      this.getName() || 'ReactCompositeComponent'
    ) : invariant(// TODO: An `isValidNode` function would probably be more appropriate
    renderedComponent === null || renderedComponent === false ||
    ReactElement.isValidElement(renderedComponent)));
    return renderedComponent;
  },

  /**
   * Lazily allocates the refs object and stores `component` as `ref`.
   *
   * @param {string} ref Reference name.
   * @param {component} component Component to store as `ref`.
   * @final
   * @private
   */
  attachRef: function(ref, component) {
    var inst = this.getPublicInstance();
    var refs = inst.refs === emptyObject ? (inst.refs = {}) : inst.refs;
    refs[ref] = component.getPublicInstance();
  },

  /**
   * Detaches a reference name.
   *
   * @param {string} ref Name to dereference.
   * @final
   * @private
   */
  detachRef: function(ref) {
    var refs = this.getPublicInstance().refs;
    delete refs[ref];
  },

  /**
   * Get a text description of the component that can be used to identify it
   * in error messages.
   * @return {string} The name or null.
   * @internal
   */
  getName: function() {
    var type = this._currentElement.type;
    var constructor = this._instance && this._instance.constructor;
    return (
      type.displayName || (constructor && constructor.displayName) ||
      type.name || (constructor && constructor.name) ||
      null
    );
  },

  /**
   * Get the publicly accessible representation of this component - i.e. what
   * is exposed by refs and returned by React.render. Can be null for stateless
   * components.
   *
   * @return {ReactComponent} the public component instance.
   * @internal
   */
  getPublicInstance: function() {
    return this._instance;
  },

  // Stub
  _instantiateReactComponent: null

};

ReactPerf.measureMethods(
  ReactCompositeComponentMixin,
  'ReactCompositeComponent',
  {
    mountComponent: 'mountComponent',
    updateComponent: 'updateComponent',
    _renderValidatedComponent: '_renderValidatedComponent'
  }
);

var ReactCompositeComponent = {

  Mixin: ReactCompositeComponentMixin

};

module.exports = ReactCompositeComponent;

}).call(this,require('_process'))

},{"./Object.assign":235,"./ReactComponentEnvironment":245,"./ReactContext":247,"./ReactCurrentOwner":248,"./ReactElement":266,"./ReactElementValidator":267,"./ReactInstanceMap":276,"./ReactLifeCycle":277,"./ReactNativeComponent":282,"./ReactPerf":284,"./ReactPropTypeLocationNames":285,"./ReactPropTypeLocations":286,"./ReactReconciler":290,"./ReactUpdates":296,"./emptyObject":324,"./invariant":344,"./shouldUpdateReactComponent":360,"./warning":363,"_process":166}],247:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactContext
 */

'use strict';

var assign = require("./Object.assign");
var emptyObject = require("./emptyObject");
var warning = require("./warning");

var didWarn = false;

/**
 * Keeps track of the current context.
 *
 * The context is automatically passed down the component ownership hierarchy
 * and is accessible via `this.context` on ReactCompositeComponents.
 */
var ReactContext = {

  /**
   * @internal
   * @type {object}
   */
  current: emptyObject,

  /**
   * Temporarily extends the current context while executing scopedCallback.
   *
   * A typical use case might look like
   *
   *  render: function() {
   *    var children = ReactContext.withContext({foo: 'foo'}, () => (
   *
   *    ));
   *    return <div>{children}</div>;
   *  }
   *
   * @param {object} newContext New context to merge into the existing context
   * @param {function} scopedCallback Callback to run with the new context
   * @return {ReactComponent|array<ReactComponent>}
   */
  withContext: function(newContext, scopedCallback) {
    if ("production" !== process.env.NODE_ENV) {
      ("production" !== process.env.NODE_ENV ? warning(
        didWarn,
        'withContext is deprecated and will be removed in a future version. ' +
        'Use a wrapper component with getChildContext instead.'
      ) : null);

      didWarn = true;
    }

    var result;
    var previousContext = ReactContext.current;
    ReactContext.current = assign({}, previousContext, newContext);
    try {
      result = scopedCallback();
    } finally {
      ReactContext.current = previousContext;
    }
    return result;
  }

};

module.exports = ReactContext;

}).call(this,require('_process'))

},{"./Object.assign":235,"./emptyObject":324,"./warning":363,"_process":166}],248:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCurrentOwner
 */

'use strict';

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 *
 * The depth indicate how many composite components are above this render level.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;

},{}],249:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOM
 * @typechecks static-only
 */

'use strict';

var ReactElement = require("./ReactElement");
var ReactElementValidator = require("./ReactElementValidator");

var mapObject = require("./mapObject");

/**
 * Create a factory that creates HTML tag elements.
 *
 * @param {string} tag Tag name (e.g. `div`).
 * @private
 */
function createDOMFactory(tag) {
  if ("production" !== process.env.NODE_ENV) {
    return ReactElementValidator.createFactory(tag);
  }
  return ReactElement.createFactory(tag);
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOM = mapObject({
  a: 'a',
  abbr: 'abbr',
  address: 'address',
  area: 'area',
  article: 'article',
  aside: 'aside',
  audio: 'audio',
  b: 'b',
  base: 'base',
  bdi: 'bdi',
  bdo: 'bdo',
  big: 'big',
  blockquote: 'blockquote',
  body: 'body',
  br: 'br',
  button: 'button',
  canvas: 'canvas',
  caption: 'caption',
  cite: 'cite',
  code: 'code',
  col: 'col',
  colgroup: 'colgroup',
  data: 'data',
  datalist: 'datalist',
  dd: 'dd',
  del: 'del',
  details: 'details',
  dfn: 'dfn',
  dialog: 'dialog',
  div: 'div',
  dl: 'dl',
  dt: 'dt',
  em: 'em',
  embed: 'embed',
  fieldset: 'fieldset',
  figcaption: 'figcaption',
  figure: 'figure',
  footer: 'footer',
  form: 'form',
  h1: 'h1',
  h2: 'h2',
  h3: 'h3',
  h4: 'h4',
  h5: 'h5',
  h6: 'h6',
  head: 'head',
  header: 'header',
  hr: 'hr',
  html: 'html',
  i: 'i',
  iframe: 'iframe',
  img: 'img',
  input: 'input',
  ins: 'ins',
  kbd: 'kbd',
  keygen: 'keygen',
  label: 'label',
  legend: 'legend',
  li: 'li',
  link: 'link',
  main: 'main',
  map: 'map',
  mark: 'mark',
  menu: 'menu',
  menuitem: 'menuitem',
  meta: 'meta',
  meter: 'meter',
  nav: 'nav',
  noscript: 'noscript',
  object: 'object',
  ol: 'ol',
  optgroup: 'optgroup',
  option: 'option',
  output: 'output',
  p: 'p',
  param: 'param',
  picture: 'picture',
  pre: 'pre',
  progress: 'progress',
  q: 'q',
  rp: 'rp',
  rt: 'rt',
  ruby: 'ruby',
  s: 's',
  samp: 'samp',
  script: 'script',
  section: 'section',
  select: 'select',
  small: 'small',
  source: 'source',
  span: 'span',
  strong: 'strong',
  style: 'style',
  sub: 'sub',
  summary: 'summary',
  sup: 'sup',
  table: 'table',
  tbody: 'tbody',
  td: 'td',
  textarea: 'textarea',
  tfoot: 'tfoot',
  th: 'th',
  thead: 'thead',
  time: 'time',
  title: 'title',
  tr: 'tr',
  track: 'track',
  u: 'u',
  ul: 'ul',
  'var': 'var',
  video: 'video',
  wbr: 'wbr',

  // SVG
  circle: 'circle',
  clipPath: 'clipPath',
  defs: 'defs',
  ellipse: 'ellipse',
  g: 'g',
  line: 'line',
  linearGradient: 'linearGradient',
  mask: 'mask',
  path: 'path',
  pattern: 'pattern',
  polygon: 'polygon',
  polyline: 'polyline',
  radialGradient: 'radialGradient',
  rect: 'rect',
  stop: 'stop',
  svg: 'svg',
  text: 'text',
  tspan: 'tspan'

}, createDOMFactory);

module.exports = ReactDOM;

}).call(this,require('_process'))

},{"./ReactElement":266,"./ReactElementValidator":267,"./mapObject":351,"_process":166}],250:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMButton
 */

'use strict';

var AutoFocusMixin = require("./AutoFocusMixin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");

var keyMirror = require("./keyMirror");

var button = ReactElement.createFactory('button');

var mouseListenerNames = keyMirror({
  onClick: true,
  onDoubleClick: true,
  onMouseDown: true,
  onMouseMove: true,
  onMouseUp: true,
  onClickCapture: true,
  onDoubleClickCapture: true,
  onMouseDownCapture: true,
  onMouseMoveCapture: true,
  onMouseUpCapture: true
});

/**
 * Implements a <button> native component that does not receive mouse events
 * when `disabled` is set.
 */
var ReactDOMButton = ReactClass.createClass({
  displayName: 'ReactDOMButton',
  tagName: 'BUTTON',

  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],

  render: function() {
    var props = {};

    // Copy the props; except the mouse listeners if we're disabled
    for (var key in this.props) {
      if (this.props.hasOwnProperty(key) &&
          (!this.props.disabled || !mouseListenerNames[key])) {
        props[key] = this.props[key];
      }
    }

    return button(props, this.props.children);
  }

});

module.exports = ReactDOMButton;

},{"./AutoFocusMixin":210,"./ReactBrowserComponentMixin":238,"./ReactClass":242,"./ReactElement":266,"./keyMirror":349}],251:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMComponent
 * @typechecks static-only
 */

/* global hasOwnProperty:true */

'use strict';

var CSSPropertyOperations = require("./CSSPropertyOperations");
var DOMProperty = require("./DOMProperty");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
var ReactComponentBrowserEnvironment =
  require("./ReactComponentBrowserEnvironment");
var ReactMount = require("./ReactMount");
var ReactMultiChild = require("./ReactMultiChild");
var ReactPerf = require("./ReactPerf");

var assign = require("./Object.assign");
var escapeTextContentForBrowser = require("./escapeTextContentForBrowser");
var invariant = require("./invariant");
var isEventSupported = require("./isEventSupported");
var keyOf = require("./keyOf");
var warning = require("./warning");

var deleteListener = ReactBrowserEventEmitter.deleteListener;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = {'string': true, 'number': true};

var STYLE = keyOf({style: null});

var ELEMENT_NODE_TYPE = 1;

/**
 * Optionally injectable operations for mutating the DOM
 */
var BackendIDOperations = null;

/**
 * @param {?object} props
 */
function assertValidProps(props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  if (props.dangerouslySetInnerHTML != null) {
    ("production" !== process.env.NODE_ENV ? invariant(
      props.children == null,
      'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
    ) : invariant(props.children == null));
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof props.dangerouslySetInnerHTML === 'object' &&
      '__html' in props.dangerouslySetInnerHTML,
      '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' +
      'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' +
      'for more information.'
    ) : invariant(typeof props.dangerouslySetInnerHTML === 'object' &&
    '__html' in props.dangerouslySetInnerHTML));
  }
  if ("production" !== process.env.NODE_ENV) {
    ("production" !== process.env.NODE_ENV ? warning(
      props.innerHTML == null,
      'Directly setting property `innerHTML` is not permitted. ' +
      'For more information, lookup documentation on `dangerouslySetInnerHTML`.'
    ) : null);
    ("production" !== process.env.NODE_ENV ? warning(
      !props.contentEditable || props.children == null,
      'A component is `contentEditable` and contains `children` managed by ' +
      'React. It is now your responsibility to guarantee that none of ' +
      'those nodes are unexpectedly modified or duplicated. This is ' +
      'probably not intentional.'
    ) : null);
  }
  ("production" !== process.env.NODE_ENV ? invariant(
    props.style == null || typeof props.style === 'object',
    'The `style` prop expects a mapping from style properties to values, ' +
    'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' +
    'using JSX.'
  ) : invariant(props.style == null || typeof props.style === 'object'));
}

function putListener(id, registrationName, listener, transaction) {
  if ("production" !== process.env.NODE_ENV) {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    ("production" !== process.env.NODE_ENV ? warning(
      registrationName !== 'onScroll' || isEventSupported('scroll', true),
      'This browser doesn\'t support the `onScroll` event'
    ) : null);
  }
  var container = ReactMount.findReactContainerForID(id);
  if (container) {
    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
      container.ownerDocument :
      container;
    listenTo(registrationName, doc);
  }
  transaction.getPutListenerQueue().enqueuePutListener(
    id,
    registrationName,
    listener
  );
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special cased tags.

var omittedCloseTags = {
  'area': true,
  'base': true,
  'br': true,
  'col': true,
  'embed': true,
  'hr': true,
  'img': true,
  'input': true,
  'keygen': true,
  'link': true,
  'meta': true,
  'param': true,
  'source': true,
  'track': true,
  'wbr': true
  // NOTE: menuitem's close tag should be omitted, but that causes problems.
};

// We accept any tag to be rendered but since this gets injected into abitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    ("production" !== process.env.NODE_ENV ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
    validatedTagCache[tag] = true;
  }
}

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(tag) {
  validateDangerousTag(tag);
  this._tag = tag;
  this._renderedChildren = null;
  this._previousStyleCopy = null;
  this._rootNodeID = null;
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  construct: function(element) {
    this._currentElement = element;
  },

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {string} rootID The root DOM ID for this node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} The computed markup.
   */
  mountComponent: function(rootID, transaction, context) {
    this._rootNodeID = rootID;
    assertValidProps(this._currentElement.props);
    var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
    return (
      this._createOpenTagMarkupAndPutListeners(transaction) +
      this._createContentMarkup(transaction, context) +
      closeTag
    );
  },

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function(transaction) {
    var props = this._currentElement.props;
    var ret = '<' + this._tag;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, propValue, transaction);
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            propValue = this._previousStyleCopy = assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
        }
        var markup =
          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret + '>';
    }

    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
    return ret + ' ' + markupForID + '>';
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   * @return {string} Content markup.
   */
  _createContentMarkup: function(transaction, context) {
    var prefix = '';
    if (this._tag === 'listing' ||
        this._tag === 'pre' ||
        this._tag === 'textarea') {
      // Add an initial newline because browsers ignore the first newline in
      // a <listing>, <pre>, or <textarea> as an "authoring convenience" -- see
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody.
      prefix = '\n';
    }

    var props = this._currentElement.props;

    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        return prefix + innerHTML.__html;
      }
    } else {
      var contentToUse =
        CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        return prefix + escapeTextContentForBrowser(contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(
          childrenToUse,
          transaction,
          context
        );
        return prefix + mountImages.join('');
      }
    }
    return prefix;
  },

  receiveComponent: function(nextElement, transaction, context) {
    var prevElement = this._currentElement;
    this._currentElement = nextElement;
    this.updateComponent(transaction, prevElement, nextElement, context);
  },

  /**
   * Updates a native DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @param {ReactElement} nextElement
   * @internal
   * @overridable
   */
  updateComponent: function(transaction, prevElement, nextElement, context) {
    assertValidProps(this._currentElement.props);
    this._updateDOMProperties(prevElement.props, transaction);
    this._updateDOMChildren(prevElement.props, transaction, context);
  },

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMProperties: function(lastProps, transaction) {
    var nextProps = this._currentElement.props;
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) ||
         !lastProps.hasOwnProperty(propKey)) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = this._previousStyleCopy;
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
        this._previousStyleCopy = null;
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        deleteListener(this._rootNodeID, propKey);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        BackendIDOperations.deletePropertyByID(
          this._rootNodeID,
          propKey
        );
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = propKey === STYLE ?
        this._previousStyleCopy :
        lastProps[propKey];
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          nextProp = this._previousStyleCopy = assign({}, nextProp);
        } else {
          this._previousStyleCopy = null;
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) &&
                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) &&
                lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, nextProp, transaction);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        BackendIDOperations.updatePropertyByID(
          this._rootNodeID,
          propKey,
          nextProp
        );
      }
    }
    if (styleUpdates) {
      BackendIDOperations.updateStylesByID(
        this._rootNodeID,
        styleUpdates
      );
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMChildren: function(lastProps, transaction, context) {
    var nextProps = this._currentElement.props;

    var lastContent =
      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent =
      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml =
      lastProps.dangerouslySetInnerHTML &&
      lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml =
      nextProps.dangerouslySetInnerHTML &&
      nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction, context);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        BackendIDOperations.updateInnerHTMLByID(
          this._rootNodeID,
          nextHtml
        );
      }
    } else if (nextChildren != null) {
      this.updateChildren(nextChildren, transaction, context);
    }
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function() {
    this.unmountChildren();
    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
    this._rootNodeID = null;
  }

};

ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
  mountComponent: 'mountComponent',
  updateComponent: 'updateComponent'
});

assign(
  ReactDOMComponent.prototype,
  ReactDOMComponent.Mixin,
  ReactMultiChild.Mixin
);

ReactDOMComponent.injection = {
  injectIDOperations: function(IDOperations) {
    ReactDOMComponent.BackendIDOperations = BackendIDOperations = IDOperations;
  }
};

module.exports = ReactDOMComponent;

}).call(this,require('_process'))

},{"./CSSPropertyOperations":213,"./DOMProperty":218,"./DOMPropertyOperations":219,"./Object.assign":235,"./ReactBrowserEventEmitter":239,"./ReactComponentBrowserEnvironment":244,"./ReactMount":279,"./ReactMultiChild":280,"./ReactPerf":284,"./escapeTextContentForBrowser":325,"./invariant":344,"./isEventSupported":345,"./keyOf":350,"./warning":363,"_process":166}],252:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMForm
 */

'use strict';

var EventConstants = require("./EventConstants");
var LocalEventTrapMixin = require("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");

var form = ReactElement.createFactory('form');

/**
 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
 * to capture it on the <form> element itself. There are lots of hacks we could
 * do to accomplish this, but the most reliable is to make <form> a
 * composite component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMForm = ReactClass.createClass({
  displayName: 'ReactDOMForm',
  tagName: 'FORM',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
    // `jshint` fails to parse JSX so in order for linting to work in the open
    // source repo, we need to just use `ReactDOM.form`.
    return form(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
  }
});

module.exports = ReactDOMForm;

},{"./EventConstants":223,"./LocalEventTrapMixin":233,"./ReactBrowserComponentMixin":238,"./ReactClass":242,"./ReactElement":266}],253:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMIDOperations
 * @typechecks static-only
 */

/*jslint evil: true */

'use strict';

var CSSPropertyOperations = require("./CSSPropertyOperations");
var DOMChildrenOperations = require("./DOMChildrenOperations");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var ReactMount = require("./ReactMount");
var ReactPerf = require("./ReactPerf");

var invariant = require("./invariant");
var setInnerHTML = require("./setInnerHTML");

/**
 * Errors for properties that should not be updated with `updatePropertyById()`.
 *
 * @type {object}
 * @private
 */
var INVALID_PROPERTY_ERRORS = {
  dangerouslySetInnerHTML:
    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
  style: '`style` must be set using `updateStylesByID()`.'
};

/**
 * Operations used to process updates to DOM nodes. This is made injectable via
 * `ReactDOMComponent.BackendIDOperations`.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a DOM node with new property values. This should only be used to
   * update DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A valid property name, see `DOMProperty`.
   * @param {*} value New value of the property.
   * @internal
   */
  updatePropertyByID: function(id, name, value) {
    var node = ReactMount.getNode(id);
    ("production" !== process.env.NODE_ENV ? invariant(
      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
      'updatePropertyByID(...): %s',
      INVALID_PROPERTY_ERRORS[name]
    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

    // If we're updating to null or undefined, we should remove the property
    // from the DOM node instead of inadvertantly setting to a string. This
    // brings us in line with the same behavior we have on initial render.
    if (value != null) {
      DOMPropertyOperations.setValueForProperty(node, name, value);
    } else {
      DOMPropertyOperations.deleteValueForProperty(node, name);
    }
  },

  /**
   * Updates a DOM node to remove a property. This should only be used to remove
   * DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A property name to remove, see `DOMProperty`.
   * @internal
   */
  deletePropertyByID: function(id, name, value) {
    var node = ReactMount.getNode(id);
    ("production" !== process.env.NODE_ENV ? invariant(
      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
      'updatePropertyByID(...): %s',
      INVALID_PROPERTY_ERRORS[name]
    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
    DOMPropertyOperations.deleteValueForProperty(node, name, value);
  },

  /**
   * Updates a DOM node with new style values. If a value is specified as '',
   * the corresponding style property will be unset.
   *
   * @param {string} id ID of the node to update.
   * @param {object} styles Mapping from styles to values.
   * @internal
   */
  updateStylesByID: function(id, styles) {
    var node = ReactMount.getNode(id);
    CSSPropertyOperations.setValueForStyles(node, styles);
  },

  /**
   * Updates a DOM node's innerHTML.
   *
   * @param {string} id ID of the node to update.
   * @param {string} html An HTML string.
   * @internal
   */
  updateInnerHTMLByID: function(id, html) {
    var node = ReactMount.getNode(id);
    setInnerHTML(node, html);
  },

  /**
   * Updates a DOM node's text content set by `props.content`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} content Text content.
   * @internal
   */
  updateTextContentByID: function(id, content) {
    var node = ReactMount.getNode(id);
    DOMChildrenOperations.updateTextContent(node, content);
  },

  /**
   * Replaces a DOM node that exists in the document with markup.
   *
   * @param {string} id ID of child to be replaced.
   * @param {string} markup Dangerous markup to inject in place of child.
   * @internal
   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
   */
  dangerouslyReplaceNodeWithMarkupByID: function(id, markup) {
    var node = ReactMount.getNode(id);
    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
  },

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markup List of markup strings.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: function(updates, markup) {
    for (var i = 0; i < updates.length; i++) {
      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
    }
    DOMChildrenOperations.processUpdates(updates, markup);
  }
};

ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
  updatePropertyByID: 'updatePropertyByID',
  deletePropertyByID: 'deletePropertyByID',
  updateStylesByID: 'updateStylesByID',
  updateInnerHTMLByID: 'updateInnerHTMLByID',
  updateTextContentByID: 'updateTextContentByID',
  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
});

module.exports = ReactDOMIDOperations;

}).call(this,require('_process'))

},{"./CSSPropertyOperations":213,"./DOMChildrenOperations":217,"./DOMPropertyOperations":219,"./ReactMount":279,"./ReactPerf":284,"./invariant":344,"./setInnerHTML":357,"_process":166}],254:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMIframe
 */

'use strict';

var EventConstants = require("./EventConstants");
var LocalEventTrapMixin = require("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");

var iframe = ReactElement.createFactory('iframe');

/**
 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
 * capture it on the <iframe> element itself. There are lots of hacks we could
 * do to accomplish this, but the most reliable is to make <iframe> a composite
 * component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMIframe = ReactClass.createClass({
  displayName: 'ReactDOMIframe',
  tagName: 'IFRAME',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    return iframe(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
  }
});

module.exports = ReactDOMIframe;

},{"./EventConstants":223,"./LocalEventTrapMixin":233,"./ReactBrowserComponentMixin":238,"./ReactClass":242,"./ReactElement":266}],255:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMImg
 */

'use strict';

var EventConstants = require("./EventConstants");
var LocalEventTrapMixin = require("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");

var img = ReactElement.createFactory('img');

/**
 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
 * capture it on the <img> element itself. There are lots of hacks we could do
 * to accomplish this, but the most reliable is to make <img> a composite
 * component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMImg = ReactClass.createClass({
  displayName: 'ReactDOMImg',
  tagName: 'IMG',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    return img(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
  }
});

module.exports = ReactDOMImg;

},{"./EventConstants":223,"./LocalEventTrapMixin":233,"./ReactBrowserComponentMixin":238,"./ReactClass":242,"./ReactElement":266}],256:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMInput
 */

'use strict';

var AutoFocusMixin = require("./AutoFocusMixin");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var LinkedValueUtils = require("./LinkedValueUtils");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");
var ReactMount = require("./ReactMount");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");
var invariant = require("./invariant");

var input = ReactElement.createFactory('input');

var instancesByReactID = {};

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements an <input> native component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = ReactClass.createClass({
  displayName: 'ReactDOMInput',
  tagName: 'INPUT',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    return {
      initialChecked: this.props.defaultChecked || false,
      initialValue: defaultValue != null ? defaultValue : null
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.defaultChecked = null;
    props.defaultValue = null;

    var value = LinkedValueUtils.getValue(this);
    props.value = value != null ? value : this.state.initialValue;

    var checked = LinkedValueUtils.getChecked(this);
    props.checked = checked != null ? checked : this.state.initialChecked;

    props.onChange = this._handleChange;

    return input(props, this.props.children);
  },

  componentDidMount: function() {
    var id = ReactMount.getID(this.getDOMNode());
    instancesByReactID[id] = this;
  },

  componentWillUnmount: function() {
    var rootNode = this.getDOMNode();
    var id = ReactMount.getID(rootNode);
    delete instancesByReactID[id];
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var rootNode = this.getDOMNode();
    if (this.props.checked != null) {
      DOMPropertyOperations.setValueForProperty(
        rootNode,
        'checked',
        this.props.checked || false
      );
    }

    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    // Here we use asap to wait until all updates have propagated, which
    // is important when using controlled components within layers:
    // https://github.com/facebook/react/issues/1698
    ReactUpdates.asap(forceUpdateIfMounted, this);

    var name = this.props.name;
    if (this.props.type === 'radio' && name != null) {
      var rootNode = this.getDOMNode();
      var queryRoot = rootNode;

      while (queryRoot.parentNode) {
        queryRoot = queryRoot.parentNode;
      }

      // If `rootNode.form` was non-null, then we could try `form.elements`,
      // but that sometimes behaves strangely in IE8. We could also try using
      // `form.getElementsByName`, but that will only return direct children
      // and won't include inputs that use the HTML5 `form=` attribute. Since
      // the input might not even be in a form, let's just use the global
      // `querySelectorAll` to ensure we don't miss anything.
      var group = queryRoot.querySelectorAll(
        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
        var otherNode = group[i];
        if (otherNode === rootNode ||
            otherNode.form !== rootNode.form) {
          continue;
        }
        var otherID = ReactMount.getID(otherNode);
        ("production" !== process.env.NODE_ENV ? invariant(
          otherID,
          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
          'same `name` is not supported.'
        ) : invariant(otherID));
        var otherInstance = instancesByReactID[otherID];
        ("production" !== process.env.NODE_ENV ? invariant(
          otherInstance,
          'ReactDOMInput: Unknown radio button ID %s.',
          otherID
        ) : invariant(otherInstance));
        // If this is a controlled radio button group, forcing the input that
        // was previously checked to update will cause it to be come re-checked
        // as appropriate.
        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
      }
    }

    return returnValue;
  }

});

module.exports = ReactDOMInput;

}).call(this,require('_process'))

},{"./AutoFocusMixin":210,"./DOMPropertyOperations":219,"./LinkedValueUtils":232,"./Object.assign":235,"./ReactBrowserComponentMixin":238,"./ReactClass":242,"./ReactElement":266,"./ReactMount":279,"./ReactUpdates":296,"./invariant":344,"_process":166}],257:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMOption
 */

'use strict';

var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");

var warning = require("./warning");

var option = ReactElement.createFactory('option');

/**
 * Implements an <option> native component that warns when `selected` is set.
 */
var ReactDOMOption = ReactClass.createClass({
  displayName: 'ReactDOMOption',
  tagName: 'OPTION',

  mixins: [ReactBrowserComponentMixin],

  componentWillMount: function() {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if ("production" !== process.env.NODE_ENV) {
      ("production" !== process.env.NODE_ENV ? warning(
        this.props.selected == null,
        'Use the `defaultValue` or `value` props on <select> instead of ' +
        'setting `selected` on <option>.'
      ) : null);
    }
  },

  render: function() {
    return option(this.props, this.props.children);
  }

});

module.exports = ReactDOMOption;

}).call(this,require('_process'))

},{"./ReactBrowserComponentMixin":238,"./ReactClass":242,"./ReactElement":266,"./warning":363,"_process":166}],258:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelect
 */

'use strict';

var AutoFocusMixin = require("./AutoFocusMixin");
var LinkedValueUtils = require("./LinkedValueUtils");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");

var select = ReactElement.createFactory('select');

function updateOptionsIfPendingUpdateAndMounted() {
  /*jshint validthis:true */
  if (this._pendingUpdate) {
    this._pendingUpdate = false;
    var value = LinkedValueUtils.getValue(this);
    if (value != null && this.isMounted()) {
      updateOptions(this, value);
    }
  }
}

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function selectValueType(props, propName, componentName) {
  if (props[propName] == null) {
    return null;
  }
  if (props.multiple) {
    if (!Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
        ("`multiple` is true.")
      );
    }
  } else {
    if (Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
        ("value if `multiple` is false.")
      );
    }
  }
}

/**
 * @param {ReactComponent} component Instance of ReactDOMSelect
 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
 * @private
 */
function updateOptions(component, propValue) {
  var selectedValue, i, l;
  var options = component.getDOMNode().options;

  if (component.props.multiple) {
    selectedValue = {};
    for (i = 0, l = propValue.length; i < l; i++) {
      selectedValue['' + propValue[i]] = true;
    }
    for (i = 0, l = options.length; i < l; i++) {
      var selected = selectedValue.hasOwnProperty(options[i].value);
      if (options[i].selected !== selected) {
        options[i].selected = selected;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    selectedValue = '' + propValue;
    for (i = 0, l = options.length; i < l; i++) {
      if (options[i].value === selectedValue) {
        options[i].selected = true;
        return;
      }
    }
    if (options.length) {
      options[0].selected = true;
    }
  }
}

/**
 * Implements a <select> native component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = ReactClass.createClass({
  displayName: 'ReactDOMSelect',
  tagName: 'SELECT',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  propTypes: {
    defaultValue: selectValueType,
    value: selectValueType
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.onChange = this._handleChange;
    props.value = null;

    return select(props, this.props.children);
  },

  componentWillMount: function() {
    this._pendingUpdate = false;
  },

  componentDidMount: function() {
    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      updateOptions(this, value);
    } else if (this.props.defaultValue != null) {
      updateOptions(this, this.props.defaultValue);
    }
  },

  componentDidUpdate: function(prevProps) {
    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      this._pendingUpdate = false;
      updateOptions(this, value);
    } else if (!prevProps.multiple !== !this.props.multiple) {
      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
      if (this.props.defaultValue != null) {
        updateOptions(this, this.props.defaultValue);
      } else {
        // Revert the select back to its default unselected state.
        updateOptions(this, this.props.multiple ? [] : '');
      }
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }

    this._pendingUpdate = true;
    ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMSelect;

},{"./AutoFocusMixin":210,"./LinkedValueUtils":232,"./Object.assign":235,"./ReactBrowserComponentMixin":238,"./ReactClass":242,"./ReactElement":266,"./ReactUpdates":296}],259:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelection
 */

'use strict';

var ExecutionEnvironment = require("./ExecutionEnvironment");

var getNodeForCharacterOffset = require("./getNodeForCharacterOffset");
var getTextContentAccessor = require("./getTextContentAccessor");

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(
    selection.anchorNode,
    selection.anchorOffset,
    selection.focusNode,
    selection.focusOffset
  );

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(
    tempRange.startContainer,
    tempRange.startOffset,
    tempRange.endContainer,
    tempRange.endOffset
  );

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (typeof offsets.end === 'undefined') {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = typeof offsets.end === 'undefined' ?
            start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = (
  ExecutionEnvironment.canUseDOM &&
  'selection' in document &&
  !('getSelection' in window)
);

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;

},{"./ExecutionEnvironment":229,"./getNodeForCharacterOffset":337,"./getTextContentAccessor":339}],260:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextComponent
 * @typechecks static-only
 */

'use strict';

var DOMPropertyOperations = require("./DOMPropertyOperations");
var ReactComponentBrowserEnvironment =
  require("./ReactComponentBrowserEnvironment");
var ReactDOMComponent = require("./ReactDOMComponent");

var assign = require("./Object.assign");
var escapeTextContentForBrowser = require("./escapeTextContentForBrowser");

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings in elements so that they can undergo
 * the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactDOMTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactDOMTextComponent = function(props) {
  // This constructor and its argument is currently used by mocks.
};

assign(ReactDOMTextComponent.prototype, {

  /**
   * @param {ReactText} text
   * @internal
   */
  construct: function(text) {
    // TODO: This is really a ReactText (ReactNode), not a ReactElement
    this._currentElement = text;
    this._stringText = '' + text;

    // Properties
    this._rootNodeID = null;
    this._mountIndex = 0;
  },

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function(rootID, transaction, context) {
    this._rootNodeID = rootID;
    var escapedText = escapeTextContentForBrowser(this._stringText);

    if (transaction.renderToStaticMarkup) {
      // Normally we'd wrap this in a `span` for the reasons stated above, but
      // since this is a situation where React won't take over (static pages),
      // we can simply return the text as it is.
      return escapedText;
    }

    return (
      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
        escapedText +
      '</span>'
    );
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {ReactText} nextText The next text content
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function(nextText, transaction) {
    if (nextText !== this._currentElement) {
      this._currentElement = nextText;
      var nextStringText = '' + nextText;
      if (nextStringText !== this._stringText) {
        // TODO: Save this as pending props and use performUpdateIfNecessary
        // and/or updateComponent to do the actual update for consistency with
        // other component types?
        this._stringText = nextStringText;
        ReactDOMComponent.BackendIDOperations.updateTextContentByID(
          this._rootNodeID,
          nextStringText
        );
      }
    }
  },

  unmountComponent: function() {
    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
  }

});

module.exports = ReactDOMTextComponent;

},{"./DOMPropertyOperations":219,"./Object.assign":235,"./ReactComponentBrowserEnvironment":244,"./ReactDOMComponent":251,"./escapeTextContentForBrowser":325}],261:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextarea
 */

'use strict';

var AutoFocusMixin = require("./AutoFocusMixin");
var DOMPropertyOperations = require("./DOMPropertyOperations");
var LinkedValueUtils = require("./LinkedValueUtils");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");
var invariant = require("./invariant");

var warning = require("./warning");

var textarea = ReactElement.createFactory('textarea');

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements a <textarea> native component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = ReactClass.createClass({
  displayName: 'ReactDOMTextarea',
  tagName: 'TEXTAREA',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = this.props.children;
    if (children != null) {
      if ("production" !== process.env.NODE_ENV) {
        ("production" !== process.env.NODE_ENV ? warning(
          false,
          'Use the `defaultValue` or `value` props instead of setting ' +
          'children on <textarea>.'
        ) : null);
      }
      ("production" !== process.env.NODE_ENV ? invariant(
        defaultValue == null,
        'If you supply `defaultValue` on a <textarea>, do not pass children.'
      ) : invariant(defaultValue == null));
      if (Array.isArray(children)) {
        ("production" !== process.env.NODE_ENV ? invariant(
          children.length <= 1,
          '<textarea> can only have at most one child.'
        ) : invariant(children.length <= 1));
        children = children[0];
      }

      defaultValue = '' + children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    var value = LinkedValueUtils.getValue(this);
    return {
      // We save the initial value so that `ReactDOMComponent` doesn't update
      // `textContent` (unnecessary since we update value).
      // The initial value can be a boolean or object so that's why it's
      // forced to be a string.
      initialValue: '' + (value != null ? value : defaultValue)
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    ("production" !== process.env.NODE_ENV ? invariant(
      props.dangerouslySetInnerHTML == null,
      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
    ) : invariant(props.dangerouslySetInnerHTML == null));

    props.defaultValue = null;
    props.value = null;
    props.onChange = this._handleChange;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.
    return textarea(props, this.state.initialValue);
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      var rootNode = this.getDOMNode();
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    ReactUpdates.asap(forceUpdateIfMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMTextarea;

}).call(this,require('_process'))

},{"./AutoFocusMixin":210,"./DOMPropertyOperations":219,"./LinkedValueUtils":232,"./Object.assign":235,"./ReactBrowserComponentMixin":238,"./ReactClass":242,"./ReactElement":266,"./ReactUpdates":296,"./invariant":344,"./warning":363,"_process":166}],262:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultBatchingStrategy
 */

'use strict';

var ReactUpdates = require("./ReactUpdates");
var Transaction = require("./Transaction");

var assign = require("./Object.assign");
var emptyFunction = require("./emptyFunction");

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function() {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

assign(
  ReactDefaultBatchingStrategyTransaction.prototype,
  Transaction.Mixin,
  {
    getTransactionWrappers: function() {
      return TRANSACTION_WRAPPERS;
    }
  }
);

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function(callback, a, b, c, d) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      callback(a, b, c, d);
    } else {
      transaction.perform(callback, null, a, b, c, d);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;

},{"./Object.assign":235,"./ReactUpdates":296,"./Transaction":312,"./emptyFunction":323}],263:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultInjection
 */

'use strict';

var BeforeInputEventPlugin = require("./BeforeInputEventPlugin");
var ChangeEventPlugin = require("./ChangeEventPlugin");
var ClientReactRootIndex = require("./ClientReactRootIndex");
var DefaultEventPluginOrder = require("./DefaultEventPluginOrder");
var EnterLeaveEventPlugin = require("./EnterLeaveEventPlugin");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var HTMLDOMPropertyConfig = require("./HTMLDOMPropertyConfig");
var MobileSafariClickEventPlugin = require("./MobileSafariClickEventPlugin");
var ReactBrowserComponentMixin = require("./ReactBrowserComponentMixin");
var ReactClass = require("./ReactClass");
var ReactComponentBrowserEnvironment =
  require("./ReactComponentBrowserEnvironment");
var ReactDefaultBatchingStrategy = require("./ReactDefaultBatchingStrategy");
var ReactDOMComponent = require("./ReactDOMComponent");
var ReactDOMButton = require("./ReactDOMButton");
var ReactDOMForm = require("./ReactDOMForm");
var ReactDOMImg = require("./ReactDOMImg");
var ReactDOMIDOperations = require("./ReactDOMIDOperations");
var ReactDOMIframe = require("./ReactDOMIframe");
var ReactDOMInput = require("./ReactDOMInput");
var ReactDOMOption = require("./ReactDOMOption");
var ReactDOMSelect = require("./ReactDOMSelect");
var ReactDOMTextarea = require("./ReactDOMTextarea");
var ReactDOMTextComponent = require("./ReactDOMTextComponent");
var ReactElement = require("./ReactElement");
var ReactEventListener = require("./ReactEventListener");
var ReactInjection = require("./ReactInjection");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMount = require("./ReactMount");
var ReactReconcileTransaction = require("./ReactReconcileTransaction");
var SelectEventPlugin = require("./SelectEventPlugin");
var ServerReactRootIndex = require("./ServerReactRootIndex");
var SimpleEventPlugin = require("./SimpleEventPlugin");
var SVGDOMPropertyConfig = require("./SVGDOMPropertyConfig");

var createFullPageComponent = require("./createFullPageComponent");

function autoGenerateWrapperClass(type) {
  return ReactClass.createClass({
    tagName: type.toUpperCase(),
    render: function() {
      return new ReactElement(
        type,
        null,
        null,
        null,
        null,
        this.props
      );
    }
  });
}

function inject() {
  ReactInjection.EventEmitter.injectReactEventListener(
    ReactEventListener
  );

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
  ReactInjection.EventPluginHub.injectMount(ReactMount);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.NativeComponent.injectGenericComponentClass(
    ReactDOMComponent
  );

  ReactInjection.NativeComponent.injectTextComponentClass(
    ReactDOMTextComponent
  );

  ReactInjection.NativeComponent.injectAutoWrapper(
    autoGenerateWrapperClass
  );

  // This needs to happen before createFullPageComponent() otherwise the mixin
  // won't be included.
  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

  ReactInjection.NativeComponent.injectComponentClasses({
    'button': ReactDOMButton,
    'form': ReactDOMForm,
    'iframe': ReactDOMIframe,
    'img': ReactDOMImg,
    'input': ReactDOMInput,
    'option': ReactDOMOption,
    'select': ReactDOMSelect,
    'textarea': ReactDOMTextarea,

    'html': createFullPageComponent('html'),
    'head': createFullPageComponent('head'),
    'body': createFullPageComponent('body')
  });

  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

  ReactInjection.Updates.injectReconcileTransaction(
    ReactReconcileTransaction
  );
  ReactInjection.Updates.injectBatchingStrategy(
    ReactDefaultBatchingStrategy
  );

  ReactInjection.RootIndex.injectCreateReactRootIndex(
    ExecutionEnvironment.canUseDOM ?
      ClientReactRootIndex.createReactRootIndex :
      ServerReactRootIndex.createReactRootIndex
  );

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
  ReactInjection.DOMComponent.injectIDOperations(ReactDOMIDOperations);

  if ("production" !== process.env.NODE_ENV) {
    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
    if ((/[?&]react_perf\b/).test(url)) {
      var ReactDefaultPerf = require("./ReactDefaultPerf");
      ReactDefaultPerf.start();
    }
  }
}

module.exports = {
  inject: inject
};

}).call(this,require('_process'))

},{"./BeforeInputEventPlugin":211,"./ChangeEventPlugin":215,"./ClientReactRootIndex":216,"./DefaultEventPluginOrder":221,"./EnterLeaveEventPlugin":222,"./ExecutionEnvironment":229,"./HTMLDOMPropertyConfig":231,"./MobileSafariClickEventPlugin":234,"./ReactBrowserComponentMixin":238,"./ReactClass":242,"./ReactComponentBrowserEnvironment":244,"./ReactDOMButton":250,"./ReactDOMComponent":251,"./ReactDOMForm":252,"./ReactDOMIDOperations":253,"./ReactDOMIframe":254,"./ReactDOMImg":255,"./ReactDOMInput":256,"./ReactDOMOption":257,"./ReactDOMSelect":258,"./ReactDOMTextComponent":260,"./ReactDOMTextarea":261,"./ReactDefaultBatchingStrategy":262,"./ReactDefaultPerf":264,"./ReactElement":266,"./ReactEventListener":271,"./ReactInjection":273,"./ReactInstanceHandles":275,"./ReactMount":279,"./ReactReconcileTransaction":289,"./SVGDOMPropertyConfig":297,"./SelectEventPlugin":298,"./ServerReactRootIndex":299,"./SimpleEventPlugin":300,"./createFullPageComponent":320,"_process":166}],264:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerf
 * @typechecks static-only
 */

'use strict';

var DOMProperty = require("./DOMProperty");
var ReactDefaultPerfAnalysis = require("./ReactDefaultPerfAnalysis");
var ReactMount = require("./ReactMount");
var ReactPerf = require("./ReactPerf");

var performanceNow = require("./performanceNow");

function roundFloat(val) {
  return Math.floor(val * 100) / 100;
}

function addValue(obj, key, val) {
  obj[key] = (obj[key] || 0) + val;
}

var ReactDefaultPerf = {
  _allMeasurements: [], // last item in the list is the current one
  _mountStack: [0],
  _injected: false,

  start: function() {
    if (!ReactDefaultPerf._injected) {
      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
    }

    ReactDefaultPerf._allMeasurements.length = 0;
    ReactPerf.enableMeasure = true;
  },

  stop: function() {
    ReactPerf.enableMeasure = false;
  },

  getLastMeasurements: function() {
    return ReactDefaultPerf._allMeasurements;
  },

  printExclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Component class name': item.componentName,
        'Total inclusive time (ms)': roundFloat(item.inclusive),
        'Exclusive mount time (ms)': roundFloat(item.exclusive),
        'Exclusive render time (ms)': roundFloat(item.render),
        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
        'Render time per instance (ms)': roundFloat(item.render / item.count),
        'Instances': item.count
      };
    }));
    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
    // number.
  },

  printInclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Inclusive time (ms)': roundFloat(item.time),
        'Instances': item.count
      };
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  getMeasurementsSummaryMap: function(measurements) {
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
      measurements,
      true
    );
    return summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Wasted time (ms)': item.time,
        'Instances': item.count
      };
    });
  },

  printWasted: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  printDOM: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
    console.table(summary.map(function(item) {
      var result = {};
      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
      result['type'] = item.type;
      result['args'] = JSON.stringify(item.args);
      return result;
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  _recordWrite: function(id, fnName, totalTime, args) {
    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
    var writes =
      ReactDefaultPerf
        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
        .writes;
    writes[id] = writes[id] || [];
    writes[id].push({
      type: fnName,
      time: totalTime,
      args: args
    });
  },

  measure: function(moduleName, fnName, func) {
    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
      var totalTime;
      var rv;
      var start;

      if (fnName === '_renderNewRootComponent' ||
          fnName === 'flushBatchedUpdates') {
        // A "measurement" is a set of metrics recorded for each flush. We want
        // to group the metrics for a given flush together so we can look at the
        // components that rendered and the DOM operations that actually
        // happened to determine the amount of "wasted work" performed.
        ReactDefaultPerf._allMeasurements.push({
          exclusive: {},
          inclusive: {},
          render: {},
          counts: {},
          writes: {},
          displayNames: {},
          totalTime: 0
        });
        start = performanceNow();
        rv = func.apply(this, args);
        ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ].totalTime = performanceNow() - start;
        return rv;
      } else if (fnName === '_mountImageIntoNode' ||
          moduleName === 'ReactDOMIDOperations') {
        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (fnName === '_mountImageIntoNode') {
          var mountID = ReactMount.getID(args[1]);
          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
          // special format
          args[0].forEach(function(update) {
            var writeArgs = {};
            if (update.fromIndex !== null) {
              writeArgs.fromIndex = update.fromIndex;
            }
            if (update.toIndex !== null) {
              writeArgs.toIndex = update.toIndex;
            }
            if (update.textContent !== null) {
              writeArgs.textContent = update.textContent;
            }
            if (update.markupIndex !== null) {
              writeArgs.markup = args[1][update.markupIndex];
            }
            ReactDefaultPerf._recordWrite(
              update.parentID,
              update.type,
              totalTime,
              writeArgs
            );
          });
        } else {
          // basic format
          ReactDefaultPerf._recordWrite(
            args[0],
            fnName,
            totalTime,
            Array.prototype.slice.call(args, 1)
          );
        }
        return rv;
      } else if (moduleName === 'ReactCompositeComponent' && (
        (// TODO: receiveComponent()?
        (fnName === 'mountComponent' ||
        fnName === 'updateComponent' || fnName === '_renderValidatedComponent')))) {

        if (typeof this._currentElement.type === 'string') {
          return func.apply(this, args);
        }

        var rootNodeID = fnName === 'mountComponent' ?
          args[0] :
          this._rootNodeID;
        var isRender = fnName === '_renderValidatedComponent';
        var isMount = fnName === 'mountComponent';

        var mountStack = ReactDefaultPerf._mountStack;
        var entry = ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ];

        if (isRender) {
          addValue(entry.counts, rootNodeID, 1);
        } else if (isMount) {
          mountStack.push(0);
        }

        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (isRender) {
          addValue(entry.render, rootNodeID, totalTime);
        } else if (isMount) {
          var subMountTime = mountStack.pop();
          mountStack[mountStack.length - 1] += totalTime;
          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
          addValue(entry.inclusive, rootNodeID, totalTime);
        } else {
          addValue(entry.inclusive, rootNodeID, totalTime);
        }

        entry.displayNames[rootNodeID] = {
          current: this.getName(),
          owner: this._currentElement._owner ?
            this._currentElement._owner.getName() :
            '<root>'
        };

        return rv;
      } else {
        return func.apply(this, args);
      }
    };
  }
};

module.exports = ReactDefaultPerf;

},{"./DOMProperty":218,"./ReactDefaultPerfAnalysis":265,"./ReactMount":279,"./ReactPerf":284,"./performanceNow":355}],265:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerfAnalysis
 */

var assign = require("./Object.assign");

// Don't try to save users less than 1.2ms (a number I made up)
var DONT_CARE_THRESHOLD = 1.2;
var DOM_OPERATION_TYPES = {
  '_mountImageIntoNode': 'set innerHTML',
  INSERT_MARKUP: 'set innerHTML',
  MOVE_EXISTING: 'move',
  REMOVE_NODE: 'remove',
  TEXT_CONTENT: 'set textContent',
  'updatePropertyByID': 'update attribute',
  'deletePropertyByID': 'delete attribute',
  'updateStylesByID': 'update styles',
  'updateInnerHTMLByID': 'set innerHTML',
  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
};

function getTotalTime(measurements) {
  // TODO: return number of DOM ops? could be misleading.
  // TODO: measure dropped frames after reconcile?
  // TODO: log total time of each reconcile and the top-level component
  // class that triggered it.
  var totalTime = 0;
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    totalTime += measurement.totalTime;
  }
  return totalTime;
}

function getDOMSummary(measurements) {
  var items = [];
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var id;

    for (id in measurement.writes) {
      measurement.writes[id].forEach(function(write) {
        items.push({
          id: id,
          type: DOM_OPERATION_TYPES[write.type] || write.type,
          args: write.args
        });
      });
    }
  }
  return items;
}

function getExclusiveSummary(measurements) {
  var candidates = {};
  var displayName;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );

    for (var id in allIDs) {
      displayName = measurement.displayNames[id].current;

      candidates[displayName] = candidates[displayName] || {
        componentName: displayName,
        inclusive: 0,
        exclusive: 0,
        render: 0,
        count: 0
      };
      if (measurement.render[id]) {
        candidates[displayName].render += measurement.render[id];
      }
      if (measurement.exclusive[id]) {
        candidates[displayName].exclusive += measurement.exclusive[id];
      }
      if (measurement.inclusive[id]) {
        candidates[displayName].inclusive += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[displayName].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (displayName in candidates) {
    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[displayName]);
    }
  }

  arr.sort(function(a, b) {
    return b.exclusive - a.exclusive;
  });

  return arr;
}

function getInclusiveSummary(measurements, onlyClean) {
  var candidates = {};
  var inclusiveKey;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );
    var cleanComponents;

    if (onlyClean) {
      cleanComponents = getUnchangedComponents(measurement);
    }

    for (var id in allIDs) {
      if (onlyClean && !cleanComponents[id]) {
        continue;
      }

      var displayName = measurement.displayNames[id];

      // Inclusive time is not useful for many components without knowing where
      // they are instantiated. So we aggregate inclusive time with both the
      // owner and current displayName as the key.
      inclusiveKey = displayName.owner + ' > ' + displayName.current;

      candidates[inclusiveKey] = candidates[inclusiveKey] || {
        componentName: inclusiveKey,
        time: 0,
        count: 0
      };

      if (measurement.inclusive[id]) {
        candidates[inclusiveKey].time += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[inclusiveKey].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (inclusiveKey in candidates) {
    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[inclusiveKey]);
    }
  }

  arr.sort(function(a, b) {
    return b.time - a.time;
  });

  return arr;
}

function getUnchangedComponents(measurement) {
  // For a given reconcile, look at which components did not actually
  // render anything to the DOM and return a mapping of their ID to
  // the amount of time it took to render the entire subtree.
  var cleanComponents = {};
  var dirtyLeafIDs = Object.keys(measurement.writes);
  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

  for (var id in allIDs) {
    var isDirty = false;
    // For each component that rendered, see if a component that triggered
    // a DOM op is in its subtree.
    for (var i = 0; i < dirtyLeafIDs.length; i++) {
      if (dirtyLeafIDs[i].indexOf(id) === 0) {
        isDirty = true;
        break;
      }
    }
    if (!isDirty && measurement.counts[id] > 0) {
      cleanComponents[id] = true;
    }
  }
  return cleanComponents;
}

var ReactDefaultPerfAnalysis = {
  getExclusiveSummary: getExclusiveSummary,
  getInclusiveSummary: getInclusiveSummary,
  getDOMSummary: getDOMSummary,
  getTotalTime: getTotalTime
};

module.exports = ReactDefaultPerfAnalysis;

},{"./Object.assign":235}],266:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElement
 */

'use strict';

var ReactContext = require("./ReactContext");
var ReactCurrentOwner = require("./ReactCurrentOwner");

var assign = require("./Object.assign");
var warning = require("./warning");

var RESERVED_PROPS = {
  key: true,
  ref: true
};

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} object
 * @param {string} key
 */
function defineWarningProperty(object, key) {
  Object.defineProperty(object, key, {

    configurable: false,
    enumerable: true,

    get: function() {
      if (!this._store) {
        return null;
      }
      return this._store[key];
    },

    set: function(value) {
      ("production" !== process.env.NODE_ENV ? warning(
        false,
        'Don\'t set the %s property of the React element. Instead, ' +
        'specify the correct value when initially creating the element.',
        key
      ) : null);
      this._store[key] = value;
    }

  });
}

/**
 * This is updated to true if the membrane is successfully created.
 */
var useMutationMembrane = false;

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} element
 */
function defineMutationMembrane(prototype) {
  try {
    var pseudoFrozenProperties = {
      props: true
    };
    for (var key in pseudoFrozenProperties) {
      defineWarningProperty(prototype, key);
    }
    useMutationMembrane = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

/**
 * Base constructor for all React elements. This is only used to make this
 * work with a dynamic instanceof check. Nothing should live on this prototype.
 *
 * @param {*} type
 * @param {string|object} ref
 * @param {*} key
 * @param {*} props
 * @internal
 */
var ReactElement = function(type, key, ref, owner, context, props) {
  // Built-in properties that belong on the element
  this.type = type;
  this.key = key;
  this.ref = ref;

  // Record the component responsible for creating this element.
  this._owner = owner;

  // TODO: Deprecate withContext, and then the context becomes accessible
  // through the owner.
  this._context = context;

  if ("production" !== process.env.NODE_ENV) {
    // The validation flag and props are currently mutative. We put them on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    this._store = {props: props, originalProps: assign({}, props)};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    try {
      Object.defineProperty(this._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true
      });
    } catch (x) {
    }
    this._store.validated = false;

    // We're not allowed to set props directly on the object so we early
    // return and rely on the prototype membrane to forward to the backing
    // store.
    if (useMutationMembrane) {
      Object.freeze(this);
      return;
    }
  }

  this.props = props;
};

// We intentionally don't expose the function on the constructor property.
// ReactElement should be indistinguishable from a plain object.
ReactElement.prototype = {
  _isReactElement: true
};

if ("production" !== process.env.NODE_ENV) {
  defineMutationMembrane(ReactElement.prototype);
}

ReactElement.createElement = function(type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;

  if (config != null) {
    ref = config.ref === undefined ? null : config.ref;
    key = config.key === undefined ? null : '' + config.key;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (config.hasOwnProperty(propName) &&
          !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (typeof props[propName] === 'undefined') {
        props[propName] = defaultProps[propName];
      }
    }
  }

  return new ReactElement(
    type,
    key,
    ref,
    ReactCurrentOwner.current,
    ReactContext.current,
    props
  );
};

ReactElement.createFactory = function(type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. <Foo />.type === Foo.type.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  // Legacy hook TODO: Warn if this is accessed
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
  var newElement = new ReactElement(
    oldElement.type,
    oldElement.key,
    oldElement.ref,
    oldElement._owner,
    oldElement._context,
    newProps
  );

  if ("production" !== process.env.NODE_ENV) {
    // If the key on the original is valid, then the clone is valid
    newElement._store.validated = oldElement._store.validated;
  }
  return newElement;
};

ReactElement.cloneElement = function(element, config, children) {
  var propName;

  // Original props are copied
  var props = assign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (config.ref !== undefined) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (config.key !== undefined) {
      key = '' + config.key;
    }
    // Remaining properties override existing props
    for (propName in config) {
      if (config.hasOwnProperty(propName) &&
          !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return new ReactElement(
    element.type,
    key,
    ref,
    owner,
    element._context,
    props
  );
};

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function(object) {
  // ReactTestUtils is often used outside of beforeEach where as React is
  // within it. This leads to two different instances of React on the same
  // page. To identify a element from a different React instance we use
  // a flag instead of an instanceof check.
  var isElement = !!(object && object._isReactElement);
  // if (isElement && !(object instanceof ReactElement)) {
  // This is an indicator that you're using multiple versions of React at the
  // same time. This will screw with ownership and stuff. Fix it, please.
  // TODO: We could possibly warn here.
  // }
  return isElement;
};

module.exports = ReactElement;

}).call(this,require('_process'))

},{"./Object.assign":235,"./ReactContext":247,"./ReactCurrentOwner":248,"./warning":363,"_process":166}],267:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElementValidator
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

'use strict';

var ReactElement = require("./ReactElement");
var ReactFragment = require("./ReactFragment");
var ReactPropTypeLocations = require("./ReactPropTypeLocations");
var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactNativeComponent = require("./ReactNativeComponent");

var getIteratorFn = require("./getIteratorFn");
var invariant = require("./invariant");
var warning = require("./warning");

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = ReactCurrentOwner.current.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

var loggedTypeFailures = {};

var NUMERIC_PROPERTY_REGEX = /^\d+$/;

/**
 * Gets the instance's name for use in warnings.
 *
 * @internal
 * @return {?string} Display name or undefined
 */
function getName(instance) {
  var publicInstance = instance && instance.getPublicInstance();
  if (!publicInstance) {
    return undefined;
  }
  var constructor = publicInstance.constructor;
  if (!constructor) {
    return undefined;
  }
  return constructor.displayName || constructor.name || undefined;
}

/**
 * Gets the current owner's displayName for use in warnings.
 *
 * @internal
 * @return {?string} Display name or undefined
 */
function getCurrentOwnerDisplayName() {
  var current = ReactCurrentOwner.current;
  return (
    current && getName(current) || undefined
  );
}

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  warnAndMonitorForKeyUse(
    'Each child in an array or iterator should have a unique "key" prop.',
    element,
    parentType
  );
}

/**
 * Warn if the key is being defined as an object property but has an incorrect
 * value.
 *
 * @internal
 * @param {string} name Property name of the key.
 * @param {ReactElement} element Component that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validatePropertyKey(name, element, parentType) {
  if (!NUMERIC_PROPERTY_REGEX.test(name)) {
    return;
  }
  warnAndMonitorForKeyUse(
    'Child objects should have non-numeric keys so ordering is preserved.',
    element,
    parentType
  );
}

/**
 * Shared warning and monitoring code for the key warnings.
 *
 * @internal
 * @param {string} message The base warning that gets output.
 * @param {ReactElement} element Component that requires a key.
 * @param {*} parentType element's parent's type.
 */
function warnAndMonitorForKeyUse(message, element, parentType) {
  var ownerName = getCurrentOwnerDisplayName();
  var parentName = typeof parentType === 'string' ?
    parentType : parentType.displayName || parentType.name;

  var useName = ownerName || parentName;
  var memoizer = ownerHasKeyUseWarning[message] || (
    (ownerHasKeyUseWarning[message] = {})
  );
  if (memoizer.hasOwnProperty(useName)) {
    return;
  }
  memoizer[useName] = true;

  var parentOrOwnerAddendum =
    ownerName ? (" Check the render method of " + ownerName + ".") :
    parentName ? (" Check the React.render call using <" + parentName + ">.") :
    '';

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwnerAddendum = '';
  if (element &&
      element._owner &&
      element._owner !== ReactCurrentOwner.current) {
    // Name of the component that originally created this child.
    var childOwnerName = getName(element._owner);

    childOwnerAddendum = (" It was passed a child from " + childOwnerName + ".");
  }

  ("production" !== process.env.NODE_ENV ? warning(
    false,
    message + '%s%s See https://fb.me/react-warning-keys for more information.',
    parentOrOwnerAddendum,
    childOwnerAddendum
  ) : null);
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(node)) {
    // This element was passed in a valid location.
    node._store.validated = true;
  } else if (node) {
    var iteratorFn = getIteratorFn(node);
    // Entry iterators provide implicit keys.
    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    } else if (typeof node === 'object') {
      var fragment = ReactFragment.extractIfFragment(node);
      for (var key in fragment) {
        if (fragment.hasOwnProperty(key)) {
          validatePropertyKey(key, fragment[key], parentType);
        }
      }
    }
  }
}

/**
 * Assert that the props are valid
 *
 * @param {string} componentName Name of the component for error messages.
 * @param {object} propTypes Map of prop name to a ReactPropType
 * @param {object} props
 * @param {string} location e.g. "prop", "context", "child context"
 * @private
 */
function checkPropTypes(componentName, propTypes, props, location) {
  for (var propName in propTypes) {
    if (propTypes.hasOwnProperty(propName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        ("production" !== process.env.NODE_ENV ? invariant(
          typeof propTypes[propName] === 'function',
          '%s: %s type `%s` is invalid; it must be a function, usually from ' +
          'React.PropTypes.',
          componentName || 'React class',
          ReactPropTypeLocationNames[location],
          propName
        ) : invariant(typeof propTypes[propName] === 'function'));
        error = propTypes[propName](props, propName, componentName, location);
      } catch (ex) {
        error = ex;
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum(this);
        ("production" !== process.env.NODE_ENV ? warning(false, 'Failed propType: %s%s', error.message, addendum) : null);
      }
    }
  }
}

var warnedPropsMutations = {};

/**
 * Warn about mutating props when setting `propName` on `element`.
 *
 * @param {string} propName The string key within props that was set
 * @param {ReactElement} element
 */
function warnForPropsMutation(propName, element) {
  var type = element.type;
  var elementName = typeof type === 'string' ? type : type.displayName;
  var ownerName = element._owner ?
    element._owner.getPublicInstance().constructor.displayName : null;

  var warningKey = propName + '|' + elementName + '|' + ownerName;
  if (warnedPropsMutations.hasOwnProperty(warningKey)) {
    return;
  }
  warnedPropsMutations[warningKey] = true;

  var elementInfo = '';
  if (elementName) {
    elementInfo = ' <' + elementName + ' />';
  }
  var ownerInfo = '';
  if (ownerName) {
    ownerInfo = ' The element was created by ' + ownerName + '.';
  }

  ("production" !== process.env.NODE_ENV ? warning(
    false,
    'Don\'t set .props.%s of the React component%s. Instead, specify the ' +
    'correct value when initially creating the element or use ' +
    'React.cloneElement to make a new element with updated props.%s',
    propName,
    elementInfo,
    ownerInfo
  ) : null);
}

// Inline Object.is polyfill
function is(a, b) {
  if (a !== a) {
    // NaN
    return b !== b;
  }
  if (a === 0 && b === 0) {
    // +-0
    return 1 / a === 1 / b;
  }
  return a === b;
}

/**
 * Given an element, check if its props have been mutated since element
 * creation (or the last call to this function). In particular, check if any
 * new props have been added, which we can't directly catch by defining warning
 * properties on the props object.
 *
 * @param {ReactElement} element
 */
function checkAndWarnForMutatedProps(element) {
  if (!element._store) {
    // Element was created using `new ReactElement` directly or with
    // `ReactElement.createElement`; skip mutation checking
    return;
  }

  var originalProps = element._store.originalProps;
  var props = element.props;

  for (var propName in props) {
    if (props.hasOwnProperty(propName)) {
      if (!originalProps.hasOwnProperty(propName) ||
          !is(originalProps[propName], props[propName])) {
        warnForPropsMutation(propName, element);

        // Copy over the new value so that the two props objects match again
        originalProps[propName] = props[propName];
      }
    }
  }
}

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  if (element.type == null) {
    // This has already warned. Don't throw.
    return;
  }
  // Extract the component class from the element. Converts string types
  // to a composite class which may have propTypes.
  // TODO: Validating a string's propTypes is not decoupled from the
  // rendering target which is problematic.
  var componentClass = ReactNativeComponent.getComponentClassForElement(
    element
  );
  var name = componentClass.displayName || componentClass.name;
  if (componentClass.propTypes) {
    checkPropTypes(
      name,
      componentClass.propTypes,
      element.props,
      ReactPropTypeLocations.prop
    );
  }
  if (typeof componentClass.getDefaultProps === 'function') {
    ("production" !== process.env.NODE_ENV ? warning(
      componentClass.getDefaultProps.isReactClassApproved,
      'getDefaultProps is only used on classic React.createClass ' +
      'definitions. Use a static property named `defaultProps` instead.'
    ) : null);
  }
}

var ReactElementValidator = {

  checkAndWarnForMutatedProps: checkAndWarnForMutatedProps,

  createElement: function(type, props, children) {
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    ("production" !== process.env.NODE_ENV ? warning(
      type != null,
      'React.createElement: type should not be null or undefined. It should ' +
        'be a string (for DOM elements) or a ReactClass (for composite ' +
        'components).'
    ) : null);

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }

    validatePropTypes(element);

    return element;
  },

  createFactory: function(type) {
    var validatedFactory = ReactElementValidator.createElement.bind(
      null,
      type
    );
    // Legacy hook TODO: Warn if this is accessed
    validatedFactory.type = type;

    if ("production" !== process.env.NODE_ENV) {
      try {
        Object.defineProperty(
          validatedFactory,
          'type',
          {
            enumerable: false,
            get: function() {
              ("production" !== process.env.NODE_ENV ? warning(
                false,
                'Factory.type is deprecated. Access the class directly ' +
                'before passing it to createFactory.'
              ) : null);
              Object.defineProperty(this, 'type', {
                value: type
              });
              return type;
            }
          }
        );
      } catch (x) {
        // IE will fail on defineProperty (es5-shim/sham too)
      }
    }


    return validatedFactory;
  },

  cloneElement: function(element, props, children) {
    var newElement = ReactElement.cloneElement.apply(this, arguments);
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    return newElement;
  }

};

module.exports = ReactElementValidator;

}).call(this,require('_process'))

},{"./ReactCurrentOwner":248,"./ReactElement":266,"./ReactFragment":272,"./ReactNativeComponent":282,"./ReactPropTypeLocationNames":285,"./ReactPropTypeLocations":286,"./getIteratorFn":335,"./invariant":344,"./warning":363,"_process":166}],268:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponent
 */

'use strict';

var ReactElement = require("./ReactElement");
var ReactInstanceMap = require("./ReactInstanceMap");

var invariant = require("./invariant");

var component;
// This registry keeps track of the React IDs of the components that rendered to
// `null` (in reality a placeholder such as `noscript`)
var nullComponentIDsRegistry = {};

var ReactEmptyComponentInjection = {
  injectEmptyComponent: function(emptyComponent) {
    component = ReactElement.createFactory(emptyComponent);
  }
};

var ReactEmptyComponentType = function() {};
ReactEmptyComponentType.prototype.componentDidMount = function() {
  var internalInstance = ReactInstanceMap.get(this);
  // TODO: Make sure we run these methods in the correct order, we shouldn't
  // need this check. We're going to assume if we're here it means we ran
  // componentWillUnmount already so there is no internal instance (it gets
  // removed as part of the unmounting process).
  if (!internalInstance) {
    return;
  }
  registerNullComponentID(internalInstance._rootNodeID);
};
ReactEmptyComponentType.prototype.componentWillUnmount = function() {
  var internalInstance = ReactInstanceMap.get(this);
  // TODO: Get rid of this check. See TODO in componentDidMount.
  if (!internalInstance) {
    return;
  }
  deregisterNullComponentID(internalInstance._rootNodeID);
};
ReactEmptyComponentType.prototype.render = function() {
  ("production" !== process.env.NODE_ENV ? invariant(
    component,
    'Trying to return null from a render, but no null placeholder component ' +
    'was injected.'
  ) : invariant(component));
  return component();
};

var emptyElement = ReactElement.createElement(ReactEmptyComponentType);

/**
 * Mark the component as having rendered to null.
 * @param {string} id Component's `_rootNodeID`.
 */
function registerNullComponentID(id) {
  nullComponentIDsRegistry[id] = true;
}

/**
 * Unmark the component as having rendered to null: it renders to something now.
 * @param {string} id Component's `_rootNodeID`.
 */
function deregisterNullComponentID(id) {
  delete nullComponentIDsRegistry[id];
}

/**
 * @param {string} id Component's `_rootNodeID`.
 * @return {boolean} True if the component is rendered to null.
 */
function isNullComponentID(id) {
  return !!nullComponentIDsRegistry[id];
}

var ReactEmptyComponent = {
  emptyElement: emptyElement,
  injection: ReactEmptyComponentInjection,
  isNullComponentID: isNullComponentID
};

module.exports = ReactEmptyComponent;

}).call(this,require('_process'))

},{"./ReactElement":266,"./ReactInstanceMap":276,"./invariant":344,"_process":166}],269:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactErrorUtils
 * @typechecks
 */

"use strict";

var ReactErrorUtils = {
  /**
   * Creates a guarded version of a function. This is supposed to make debugging
   * of event handlers easier. To aid debugging with the browser's debugger,
   * this currently simply returns the original function.
   *
   * @param {function} func Function to be executed
   * @param {string} name The name of the guard
   * @return {function}
   */
  guard: function(func, name) {
    return func;
  }
};

module.exports = ReactErrorUtils;

},{}],270:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventEmitterMixin
 */

'use strict';

var EventPluginHub = require("./EventPluginHub");

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue();
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native environment event.
   */
  handleTopLevel: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events = EventPluginHub.extractEvents(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent
    );

    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;

},{"./EventPluginHub":225}],271:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventListener
 * @typechecks static-only
 */

'use strict';

var EventListener = require("./EventListener");
var ExecutionEnvironment = require("./ExecutionEnvironment");
var PooledClass = require("./PooledClass");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMount = require("./ReactMount");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");
var getEventTarget = require("./getEventTarget");
var getUnboundedScrollPosition = require("./getUnboundedScrollPosition");

/**
 * Finds the parent React component of `node`.
 *
 * @param {*} node
 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
 *                           is not nested.
 */
function findParent(node) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  var nodeID = ReactMount.getID(node);
  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
  var container = ReactMount.findReactContainerForID(rootID);
  var parent = ReactMount.getFirstReactDOM(container);
  return parent;
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function() {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(
  TopLevelCallbackBookKeeping,
  PooledClass.twoArgumentPooler
);

function handleTopLevelImpl(bookKeeping) {
  var topLevelTarget = ReactMount.getFirstReactDOM(
    getEventTarget(bookKeeping.nativeEvent)
  ) || window;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = topLevelTarget;
  while (ancestor) {
    bookKeeping.ancestors.push(ancestor);
    ancestor = findParent(ancestor);
  }

  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
    topLevelTarget = bookKeeping.ancestors[i];
    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
    ReactEventListener._handleTopLevel(
      bookKeeping.topLevelType,
      topLevelTarget,
      topLevelTargetID,
      bookKeeping.nativeEvent
    );
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function(handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function(enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function() {
    return ReactEventListener._enabled;
  },


  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return null;
    }
    return EventListener.listen(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return null;
    }
    return EventListener.capture(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  monitorScrollValue: function(refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
  },

  dispatchEvent: function(topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
      topLevelType,
      nativeEvent
    );
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;

},{"./EventListener":224,"./ExecutionEnvironment":229,"./Object.assign":235,"./PooledClass":236,"./ReactInstanceHandles":275,"./ReactMount":279,"./ReactUpdates":296,"./getEventTarget":334,"./getUnboundedScrollPosition":340}],272:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
* @providesModule ReactFragment
*/

'use strict';

var ReactElement = require("./ReactElement");

var warning = require("./warning");

/**
 * We used to allow keyed objects to serve as a collection of ReactElements,
 * or nested sets. This allowed us a way to explicitly key a set a fragment of
 * components. This is now being replaced with an opaque data structure.
 * The upgrade path is to call React.addons.createFragment({ key: value }) to
 * create a keyed fragment. The resulting data structure is opaque, for now.
 */

if ("production" !== process.env.NODE_ENV) {
  var fragmentKey = '_reactFragment';
  var didWarnKey = '_reactDidWarn';
  var canWarnForReactFragment = false;

  try {
    // Feature test. Don't even try to issue this warning if we can't use
    // enumerable: false.

    var dummy = function() {
      return 1;
    };

    Object.defineProperty(
      {},
      fragmentKey,
      {enumerable: false, value: true}
    );

    Object.defineProperty(
      {},
      'key',
      {enumerable: true, get: dummy}
    );

    canWarnForReactFragment = true;
  } catch (x) { }

  var proxyPropertyAccessWithWarning = function(obj, key) {
    Object.defineProperty(obj, key, {
      enumerable: true,
      get: function() {
        ("production" !== process.env.NODE_ENV ? warning(
          this[didWarnKey],
          'A ReactFragment is an opaque type. Accessing any of its ' +
          'properties is deprecated. Pass it to one of the React.Children ' +
          'helpers.'
        ) : null);
        this[didWarnKey] = true;
        return this[fragmentKey][key];
      },
      set: function(value) {
        ("production" !== process.env.NODE_ENV ? warning(
          this[didWarnKey],
          'A ReactFragment is an immutable opaque type. Mutating its ' +
          'properties is deprecated.'
        ) : null);
        this[didWarnKey] = true;
        this[fragmentKey][key] = value;
      }
    });
  };

  var issuedWarnings = {};

  var didWarnForFragment = function(fragment) {
    // We use the keys and the type of the value as a heuristic to dedupe the
    // warning to avoid spamming too much.
    var fragmentCacheKey = '';
    for (var key in fragment) {
      fragmentCacheKey += key + ':' + (typeof fragment[key]) + ',';
    }
    var alreadyWarnedOnce = !!issuedWarnings[fragmentCacheKey];
    issuedWarnings[fragmentCacheKey] = true;
    return alreadyWarnedOnce;
  };
}

var ReactFragment = {
  // Wrap a keyed object in an opaque proxy that warns you if you access any
  // of its properties.
  create: function(object) {
    if ("production" !== process.env.NODE_ENV) {
      if (typeof object !== 'object' || !object || Array.isArray(object)) {
        ("production" !== process.env.NODE_ENV ? warning(
          false,
          'React.addons.createFragment only accepts a single object.',
          object
        ) : null);
        return object;
      }
      if (ReactElement.isValidElement(object)) {
        ("production" !== process.env.NODE_ENV ? warning(
          false,
          'React.addons.createFragment does not accept a ReactElement ' +
          'without a wrapper object.'
        ) : null);
        return object;
      }
      if (canWarnForReactFragment) {
        var proxy = {};
        Object.defineProperty(proxy, fragmentKey, {
          enumerable: false,
          value: object
        });
        Object.defineProperty(proxy, didWarnKey, {
          writable: true,
          enumerable: false,
          value: false
        });
        for (var key in object) {
          proxyPropertyAccessWithWarning(proxy, key);
        }
        Object.preventExtensions(proxy);
        return proxy;
      }
    }
    return object;
  },
  // Extract the original keyed object from the fragment opaque type. Warn if
  // a plain object is passed here.
  extract: function(fragment) {
    if ("production" !== process.env.NODE_ENV) {
      if (canWarnForReactFragment) {
        if (!fragment[fragmentKey]) {
          ("production" !== process.env.NODE_ENV ? warning(
            didWarnForFragment(fragment),
            'Any use of a keyed object should be wrapped in ' +
            'React.addons.createFragment(object) before being passed as a ' +
            'child.'
          ) : null);
          return fragment;
        }
        return fragment[fragmentKey];
      }
    }
    return fragment;
  },
  // Check if this is a fragment and if so, extract the keyed object. If it
  // is a fragment-like object, warn that it should be wrapped. Ignore if we
  // can't determine what kind of object this is.
  extractIfFragment: function(fragment) {
    if ("production" !== process.env.NODE_ENV) {
      if (canWarnForReactFragment) {
        // If it is the opaque type, return the keyed object.
        if (fragment[fragmentKey]) {
          return fragment[fragmentKey];
        }
        // Otherwise, check each property if it has an element, if it does
        // it is probably meant as a fragment, so we can warn early. Defer,
        // the warning to extract.
        for (var key in fragment) {
          if (fragment.hasOwnProperty(key) &&
              ReactElement.isValidElement(fragment[key])) {
            // This looks like a fragment object, we should provide an
            // early warning.
            return ReactFragment.extract(fragment);
          }
        }
      }
    }
    return fragment;
  }
};

module.exports = ReactFragment;

}).call(this,require('_process'))

},{"./ReactElement":266,"./warning":363,"_process":166}],273:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInjection
 */

'use strict';

var DOMProperty = require("./DOMProperty");
var EventPluginHub = require("./EventPluginHub");
var ReactComponentEnvironment = require("./ReactComponentEnvironment");
var ReactClass = require("./ReactClass");
var ReactEmptyComponent = require("./ReactEmptyComponent");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
var ReactNativeComponent = require("./ReactNativeComponent");
var ReactDOMComponent = require("./ReactDOMComponent");
var ReactPerf = require("./ReactPerf");
var ReactRootIndex = require("./ReactRootIndex");
var ReactUpdates = require("./ReactUpdates");

var ReactInjection = {
  Component: ReactComponentEnvironment.injection,
  Class: ReactClass.injection,
  DOMComponent: ReactDOMComponent.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  NativeComponent: ReactNativeComponent.injection,
  Perf: ReactPerf.injection,
  RootIndex: ReactRootIndex.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;

},{"./DOMProperty":218,"./EventPluginHub":225,"./ReactBrowserEventEmitter":239,"./ReactClass":242,"./ReactComponentEnvironment":245,"./ReactDOMComponent":251,"./ReactEmptyComponent":268,"./ReactNativeComponent":282,"./ReactPerf":284,"./ReactRootIndex":292,"./ReactUpdates":296}],274:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInputSelection
 */

'use strict';

var ReactDOMSelection = require("./ReactDOMSelection");

var containsNode = require("./containsNode");
var focusNode = require("./focusNode");
var getActiveElement = require("./getActiveElement");

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function(elem) {
    return elem && (
      ((elem.nodeName === 'INPUT' && elem.type === 'text') ||
      elem.nodeName === 'TEXTAREA' || elem.contentEditable === 'true')
    );
  },

  getSelectionInformation: function() {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange:
          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
          ReactInputSelection.getSelection(focusedElem) :
          null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function(priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem &&
        isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(
          priorFocusedElem,
          priorSelectionRange
        );
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function(input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName === 'INPUT') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || {start: 0, end: 0};
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function(input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (typeof end === 'undefined') {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName === 'INPUT') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;

},{"./ReactDOMSelection":259,"./containsNode":318,"./focusNode":328,"./getActiveElement":330}],275:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceHandles
 * @typechecks static-only
 */

'use strict';

var ReactRootIndex = require("./ReactRootIndex");

var invariant = require("./invariant");

var SEPARATOR = '.';
var SEPARATOR_LENGTH = SEPARATOR.length;

/**
 * Maximum depth of traversals before we consider the possibility of a bad ID.
 */
var MAX_TREE_DEPTH = 100;

/**
 * Creates a DOM ID prefix to use when mounting React components.
 *
 * @param {number} index A unique integer
 * @return {string} React root ID.
 * @internal
 */
function getReactRootIDString(index) {
  return SEPARATOR + index.toString(36);
}

/**
 * Checks if a character in the supplied ID is a separator or the end.
 *
 * @param {string} id A React DOM ID.
 * @param {number} index Index of the character to check.
 * @return {boolean} True if the character is a separator or end of the ID.
 * @private
 */
function isBoundary(id, index) {
  return id.charAt(index) === SEPARATOR || index === id.length;
}

/**
 * Checks if the supplied string is a valid React DOM ID.
 *
 * @param {string} id A React DOM ID, maybe.
 * @return {boolean} True if the string is a valid React DOM ID.
 * @private
 */
function isValidID(id) {
  return id === '' || (
    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
  );
}

/**
 * Checks if the first ID is an ancestor of or equal to the second ID.
 *
 * @param {string} ancestorID
 * @param {string} descendantID
 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
 * @internal
 */
function isAncestorIDOf(ancestorID, descendantID) {
  return (
    descendantID.indexOf(ancestorID) === 0 &&
    isBoundary(descendantID, ancestorID.length)
  );
}

/**
 * Gets the parent ID of the supplied React DOM ID, `id`.
 *
 * @param {string} id ID of a component.
 * @return {string} ID of the parent, or an empty string.
 * @private
 */
function getParentID(id) {
  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
}

/**
 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
 * supplied `destinationID`. If they are equal, the ID is returned.
 *
 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
 * @param {string} destinationID ID of the destination node.
 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
 * @private
 */
function getNextDescendantID(ancestorID, destinationID) {
  ("production" !== process.env.NODE_ENV ? invariant(
    isValidID(ancestorID) && isValidID(destinationID),
    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
    ancestorID,
    destinationID
  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
  ("production" !== process.env.NODE_ENV ? invariant(
    isAncestorIDOf(ancestorID, destinationID),
    'getNextDescendantID(...): React has made an invalid assumption about ' +
    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
    ancestorID,
    destinationID
  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
  if (ancestorID === destinationID) {
    return ancestorID;
  }
  // Skip over the ancestor and the immediate separator. Traverse until we hit
  // another separator or we reach the end of `destinationID`.
  var start = ancestorID.length + SEPARATOR_LENGTH;
  var i;
  for (i = start; i < destinationID.length; i++) {
    if (isBoundary(destinationID, i)) {
      break;
    }
  }
  return destinationID.substr(0, i);
}

/**
 * Gets the nearest common ancestor ID of two IDs.
 *
 * Using this ID scheme, the nearest common ancestor ID is the longest common
 * prefix of the two IDs that immediately preceded a "marker" in both strings.
 *
 * @param {string} oneID
 * @param {string} twoID
 * @return {string} Nearest common ancestor ID, or the empty string if none.
 * @private
 */
function getFirstCommonAncestorID(oneID, twoID) {
  var minLength = Math.min(oneID.length, twoID.length);
  if (minLength === 0) {
    return '';
  }
  var lastCommonMarkerIndex = 0;
  // Use `<=` to traverse until the "EOL" of the shorter string.
  for (var i = 0; i <= minLength; i++) {
    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
      lastCommonMarkerIndex = i;
    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
      break;
    }
  }
  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
  ("production" !== process.env.NODE_ENV ? invariant(
    isValidID(longestCommonID),
    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
    oneID,
    twoID,
    longestCommonID
  ) : invariant(isValidID(longestCommonID)));
  return longestCommonID;
}

/**
 * Traverses the parent path between two IDs (either up or down). The IDs must
 * not be the same, and there must exist a parent path between them. If the
 * callback returns `false`, traversal is stopped.
 *
 * @param {?string} start ID at which to start traversal.
 * @param {?string} stop ID at which to end traversal.
 * @param {function} cb Callback to invoke each ID with.
 * @param {?boolean} skipFirst Whether or not to skip the first node.
 * @param {?boolean} skipLast Whether or not to skip the last node.
 * @private
 */
function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
  start = start || '';
  stop = stop || '';
  ("production" !== process.env.NODE_ENV ? invariant(
    start !== stop,
    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
    start
  ) : invariant(start !== stop));
  var traverseUp = isAncestorIDOf(stop, start);
  ("production" !== process.env.NODE_ENV ? invariant(
    traverseUp || isAncestorIDOf(start, stop),
    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
    'not have a parent path.',
    start,
    stop
  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
  // Traverse from `start` to `stop` one depth at a time.
  var depth = 0;
  var traverse = traverseUp ? getParentID : getNextDescendantID;
  for (var id = start; /* until break */; id = traverse(id, stop)) {
    var ret;
    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
      ret = cb(id, traverseUp, arg);
    }
    if (ret === false || id === stop) {
      // Only break //after// visiting `stop`.
      break;
    }
    ("production" !== process.env.NODE_ENV ? invariant(
      depth++ < MAX_TREE_DEPTH,
      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
      start, stop
    ) : invariant(depth++ < MAX_TREE_DEPTH));
  }
}

/**
 * Manages the IDs assigned to DOM representations of React components. This
 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
 * order to simulate events).
 *
 * @internal
 */
var ReactInstanceHandles = {

  /**
   * Constructs a React root ID
   * @return {string} A React root ID.
   */
  createReactRootID: function() {
    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
  },

  /**
   * Constructs a React ID by joining a root ID with a name.
   *
   * @param {string} rootID Root ID of a parent component.
   * @param {string} name A component's name (as flattened children).
   * @return {string} A React ID.
   * @internal
   */
  createReactID: function(rootID, name) {
    return rootID + name;
  },

  /**
   * Gets the DOM ID of the React component that is the root of the tree that
   * contains the React component with the supplied DOM ID.
   *
   * @param {string} id DOM ID of a React component.
   * @return {?string} DOM ID of the React component that is the root.
   * @internal
   */
  getReactRootIDFromNodeID: function(id) {
    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
      var index = id.indexOf(SEPARATOR, 1);
      return index > -1 ? id.substr(0, index) : id;
    }
    return null;
  },

  /**
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
   * should would receive a `mouseEnter` or `mouseLeave` event.
   *
   * NOTE: Does not invoke the callback on the nearest common ancestor because
   * nothing "entered" or "left" that element.
   *
   * @param {string} leaveID ID being left.
   * @param {string} enterID ID being entered.
   * @param {function} cb Callback to invoke on each entered/left ID.
   * @param {*} upArg Argument to invoke the callback with on left IDs.
   * @param {*} downArg Argument to invoke the callback with on entered IDs.
   * @internal
   */
  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
    if (ancestorID !== leaveID) {
      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
    }
    if (ancestorID !== enterID) {
      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
    }
  },

  /**
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseTwoPhase: function(targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, false);
      traverseParentPath(targetID, '', cb, arg, false, true);
    }
  },

  /**
   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
   * example, passing `.0.$row-0.1` would result in `cb` getting called
   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseAncestors: function(targetID, cb, arg) {
    traverseParentPath('', targetID, cb, arg, true, false);
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _getFirstCommonAncestorID: getFirstCommonAncestorID,

  /**
   * Exposed for unit testing.
   * @private
   */
  _getNextDescendantID: getNextDescendantID,

  isAncestorIDOf: isAncestorIDOf,

  SEPARATOR: SEPARATOR

};

module.exports = ReactInstanceHandles;

}).call(this,require('_process'))

},{"./ReactRootIndex":292,"./invariant":344,"_process":166}],276:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceMap
 */

'use strict';

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 */

// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
var ReactInstanceMap = {

  /**
   * This API should be called `delete` but we'd have to make sure to always
   * transform these to strings for IE support. When this transform is fully
   * supported we can rename it.
   */
  remove: function(key) {
    key._reactInternalInstance = undefined;
  },

  get: function(key) {
    return key._reactInternalInstance;
  },

  has: function(key) {
    return key._reactInternalInstance !== undefined;
  },

  set: function(key, value) {
    key._reactInternalInstance = value;
  }

};

module.exports = ReactInstanceMap;

},{}],277:[function(require,module,exports){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactLifeCycle
 */

'use strict';

/**
 * This module manages the bookkeeping when a component is in the process
 * of being mounted or being unmounted. This is used as a way to enforce
 * invariants (or warnings) when it is not recommended to call
 * setState/forceUpdate.
 *
 * currentlyMountingInstance: During the construction phase, it is not possible
 * to trigger an update since the instance is not fully mounted yet. However, we
 * currently allow this as a convenience for mutating the initial state.
 *
 * currentlyUnmountingInstance: During the unmounting phase, the instance is
 * still mounted and can therefore schedule an update. However, this is not
 * recommended and probably an error since it's about to be unmounted.
 * Therefore we still want to trigger in an error for that case.
 */

var ReactLifeCycle = {
  currentlyMountingInstance: null,
  currentlyUnmountingInstance: null
};

module.exports = ReactLifeCycle;

},{}],278:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMarkupChecksum
 */

'use strict';

var adler32 = require("./adler32");

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function(markup) {
    var checksum = adler32(markup);
    return markup.replace(
      '>',
      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
    );
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function(markup, element) {
    var existingChecksum = element.getAttribute(
      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
    );
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;

},{"./adler32":315}],279:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMount
 */

'use strict';

var DOMProperty = require("./DOMProperty");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactElement = require("./ReactElement");
var ReactElementValidator = require("./ReactElementValidator");
var ReactEmptyComponent = require("./ReactEmptyComponent");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactInstanceMap = require("./ReactInstanceMap");
var ReactMarkupChecksum = require("./ReactMarkupChecksum");
var ReactPerf = require("./ReactPerf");
var ReactReconciler = require("./ReactReconciler");
var ReactUpdateQueue = require("./ReactUpdateQueue");
var ReactUpdates = require("./ReactUpdates");

var emptyObject = require("./emptyObject");
var containsNode = require("./containsNode");
var getReactRootElementInContainer = require("./getReactRootElementInContainer");
var instantiateReactComponent = require("./instantiateReactComponent");
var invariant = require("./invariant");
var setInnerHTML = require("./setInnerHTML");
var shouldUpdateReactComponent = require("./shouldUpdateReactComponent");
var warning = require("./warning");

var SEPARATOR = ReactInstanceHandles.SEPARATOR;

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var nodeCache = {};

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;

/** Mapping from reactRootID to React component instance. */
var instancesByReactRootID = {};

/** Mapping from reactRootID to `container` nodes. */
var containersByReactRootID = {};

if ("production" !== process.env.NODE_ENV) {
  /** __DEV__-only mapping from reactRootID to root elements. */
  var rootElementsByReactRootID = {};
}

// Used to store breadth-first search state in findComponentRoot.
var findComponentRootReusableArray = [];

/**
 * Finds the index of the first character
 * that's not common between the two given strings.
 *
 * @return {number} the index of the character where the strings diverge
 */
function firstDifferenceIndex(string1, string2) {
  var minLen = Math.min(string1.length, string2.length);
  for (var i = 0; i < minLen; i++) {
    if (string1.charAt(i) !== string2.charAt(i)) {
      return i;
    }
  }
  return string1.length === string2.length ? -1 : minLen;
}

/**
 * @param {DOMElement} container DOM element that may contain a React component.
 * @return {?string} A "reactRoot" ID, if a React component is rendered.
 */
function getReactRootID(container) {
  var rootElement = getReactRootElementInContainer(container);
  return rootElement && ReactMount.getID(rootElement);
}

/**
 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
 * element can return its control whose name or ID equals ATTR_NAME. All
 * DOM nodes support `getAttributeNode` but this can also get called on
 * other objects so just return '' if we're given something other than a
 * DOM node (such as window).
 *
 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
 * @return {string} ID of the supplied `domNode`.
 */
function getID(node) {
  var id = internalGetID(node);
  if (id) {
    if (nodeCache.hasOwnProperty(id)) {
      var cached = nodeCache[id];
      if (cached !== node) {
        ("production" !== process.env.NODE_ENV ? invariant(
          !isValid(cached, id),
          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
          ATTR_NAME, id
        ) : invariant(!isValid(cached, id)));

        nodeCache[id] = node;
      }
    } else {
      nodeCache[id] = node;
    }
  }

  return id;
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Sets the React-specific ID of the given node.
 *
 * @param {DOMElement} node The DOM node whose ID will be set.
 * @param {string} id The value of the ID attribute.
 */
function setID(node, id) {
  var oldID = internalGetID(node);
  if (oldID !== id) {
    delete nodeCache[oldID];
  }
  node.setAttribute(ATTR_NAME, id);
  nodeCache[id] = node;
}

/**
 * Finds the node with the supplied React-generated DOM ID.
 *
 * @param {string} id A React-generated DOM ID.
 * @return {DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNode(id) {
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * Finds the node with the supplied public React instance.
 *
 * @param {*} instance A public React instance.
 * @return {?DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNodeFromInstance(instance) {
  var id = ReactInstanceMap.get(instance)._rootNodeID;
  if (ReactEmptyComponent.isNullComponentID(id)) {
    return null;
  }
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * A node is "valid" if it is contained by a currently mounted container.
 *
 * This means that the node does not have to be contained by a document in
 * order to be considered valid.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @param {string} id The expected ID of the node.
 * @return {boolean} Whether the node is contained by a mounted container.
 */
function isValid(node, id) {
  if (node) {
    ("production" !== process.env.NODE_ENV ? invariant(
      internalGetID(node) === id,
      'ReactMount: Unexpected modification of `%s`',
      ATTR_NAME
    ) : invariant(internalGetID(node) === id));

    var container = ReactMount.findReactContainerForID(id);
    if (container && containsNode(container, node)) {
      return true;
    }
  }

  return false;
}

/**
 * Causes the cache to forget about one React-specific ID.
 *
 * @param {string} id The ID to forget.
 */
function purgeID(id) {
  delete nodeCache[id];
}

var deepestNodeSoFar = null;
function findDeepestCachedAncestorImpl(ancestorID) {
  var ancestor = nodeCache[ancestorID];
  if (ancestor && isValid(ancestor, ancestorID)) {
    deepestNodeSoFar = ancestor;
  } else {
    // This node isn't populated in the cache, so presumably none of its
    // descendants are. Break out of the loop.
    return false;
  }
}

/**
 * Return the deepest cached node whose ID is a prefix of `targetID`.
 */
function findDeepestCachedAncestor(targetID) {
  deepestNodeSoFar = null;
  ReactInstanceHandles.traverseAncestors(
    targetID,
    findDeepestCachedAncestorImpl
  );

  var foundNode = deepestNodeSoFar;
  deepestNodeSoFar = null;
  return foundNode;
}

/**
 * Mounts this component and inserts it into the DOM.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {string} rootID DOM ID of the root node.
 * @param {DOMElement} container DOM element to mount into.
 * @param {ReactReconcileTransaction} transaction
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function mountComponentIntoNode(
    componentInstance,
    rootID,
    container,
    transaction,
    shouldReuseMarkup) {
  var markup = ReactReconciler.mountComponent(
    componentInstance, rootID, transaction, emptyObject
  );
  componentInstance._isTopLevel = true;
  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup);
}

/**
 * Batched mount.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {string} rootID DOM ID of the root node.
 * @param {DOMElement} container DOM element to mount into.
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function batchedMountComponentIntoNode(
    componentInstance,
    rootID,
    container,
    shouldReuseMarkup) {
  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
  transaction.perform(
    mountComponentIntoNode,
    null,
    componentInstance,
    rootID,
    container,
    transaction,
    shouldReuseMarkup
  );
  ReactUpdates.ReactReconcileTransaction.release(transaction);
}

/**
 * Mounting is the process of initializing a React component by creating its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {
  /** Exposed for debugging purposes **/
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function(container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactElement} nextElement component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function(
      prevComponent,
      nextElement,
      container,
      callback) {
    if ("production" !== process.env.NODE_ENV) {
      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
    }

    ReactMount.scrollMonitor(container, function() {
      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
      if (callback) {
        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
      }
    });

    if ("production" !== process.env.NODE_ENV) {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[getReactRootID(container)] =
        getReactRootElementInContainer(container);
    }

    return prevComponent;
  },

  /**
   * Register a component into the instance map and starts scroll value
   * monitoring
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @return {string} reactRoot ID prefix
   */
  _registerComponent: function(nextComponent, container) {
    ("production" !== process.env.NODE_ENV ? invariant(
      container && (
        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
      ),
      '_registerComponent(...): Target container is not a DOM element.'
    ) : invariant(container && (
      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
    )));

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

    var reactRootID = ReactMount.registerContainer(container);
    instancesByReactRootID[reactRootID] = nextComponent;
    return reactRootID;
  },

  /**
   * Render a new component into the DOM.
   * @param {ReactElement} nextElement element to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: function(
    nextElement,
    container,
    shouldReuseMarkup
  ) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case.
    ("production" !== process.env.NODE_ENV ? warning(
      ReactCurrentOwner.current == null,
      '_renderNewRootComponent(): Render methods should be a pure function ' +
      'of props and state; triggering nested component updates from ' +
      'render is not allowed. If necessary, trigger nested updates in ' +
      'componentDidUpdate.'
    ) : null);

    var componentInstance = instantiateReactComponent(nextElement, null);
    var reactRootID = ReactMount._registerComponent(
      componentInstance,
      container
    );

    // The initial render is synchronous but any updates that happen during
    // rendering, in componentWillMount or componentDidMount, will be batched
    // according to the current batching strategy.

    ReactUpdates.batchedUpdates(
      batchedMountComponentIntoNode,
      componentInstance,
      reactRootID,
      container,
      shouldReuseMarkup
    );

    if ("production" !== process.env.NODE_ENV) {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[reactRootID] =
        getReactRootElementInContainer(container);
    }

    return componentInstance;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function(nextElement, container, callback) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ReactElement.isValidElement(nextElement),
      'React.render(): Invalid component element.%s',
      (
        typeof nextElement === 'string' ?
          ' Instead of passing an element string, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        typeof nextElement === 'function' ?
          ' Instead of passing a component class, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        // Check if it quacks like an element
        nextElement != null && nextElement.props !== undefined ?
          ' This may be caused by unintentionally loading two independent ' +
          'copies of React.' :
          ''
      )
    ) : invariant(ReactElement.isValidElement(nextElement)));

    var prevComponent = instancesByReactRootID[getReactRootID(container)];

    if (prevComponent) {
      var prevElement = prevComponent._currentElement;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        return ReactMount._updateRootComponent(
          prevComponent,
          nextElement,
          container,
          callback
        ).getPublicInstance();
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup =
      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

    if ("production" !== process.env.NODE_ENV) {
      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
        var rootElementSibling = reactRootElement;
        while (rootElementSibling) {
          if (ReactMount.isRenderedByReact(rootElementSibling)) {
            ("production" !== process.env.NODE_ENV ? warning(
              false,
              'render(): Target node has markup rendered by React, but there ' +
              'are unrelated nodes as well. This is most commonly caused by ' +
              'white-space inserted around server-rendered markup.'
            ) : null);
            break;
          }

          rootElementSibling = rootElementSibling.nextSibling;
        }
      }
    }

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

    var component = ReactMount._renderNewRootComponent(
      nextElement,
      container,
      shouldReuseMarkup
    ).getPublicInstance();
    if (callback) {
      callback.call(component);
    }
    return component;
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into the supplied `container`.
   *
   * @param {function} constructor React component constructor.
   * @param {?object} props Initial props of the component instance.
   * @param {DOMElement} container DOM element to render into.
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  constructAndRenderComponent: function(constructor, props, container) {
    var element = ReactElement.createElement(constructor, props);
    return ReactMount.render(element, container);
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into a container node identified by supplied `id`.
   *
   * @param {function} componentConstructor React component constructor
   * @param {?object} props Initial props of the component instance.
   * @param {string} id ID of the DOM element to render into.
   * @return {ReactComponent} Component instance rendered in the container node.
   */
  constructAndRenderComponentByID: function(constructor, props, id) {
    var domNode = document.getElementById(id);
    ("production" !== process.env.NODE_ENV ? invariant(
      domNode,
      'Tried to get element with id of "%s" but it is not present on the page.',
      id
    ) : invariant(domNode));
    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
  },

  /**
   * Registers a container node into which React components will be rendered.
   * This also creates the "reactRoot" ID that will be assigned to the element
   * rendered within.
   *
   * @param {DOMElement} container DOM element to register as a container.
   * @return {string} The "reactRoot" ID of elements rendered within.
   */
  registerContainer: function(container) {
    var reactRootID = getReactRootID(container);
    if (reactRootID) {
      // If one exists, make sure it is a valid "reactRoot" ID.
      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
    }
    if (!reactRootID) {
      // No valid "reactRoot" ID found, create one.
      reactRootID = ReactInstanceHandles.createReactRootID();
    }
    containersByReactRootID[reactRootID] = container;
    return reactRootID;
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function(container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    ("production" !== process.env.NODE_ENV ? warning(
      ReactCurrentOwner.current == null,
      'unmountComponentAtNode(): Render methods should be a pure function of ' +
      'props and state; triggering nested component updates from render is ' +
      'not allowed. If necessary, trigger nested updates in ' +
      'componentDidUpdate.'
    ) : null);

    ("production" !== process.env.NODE_ENV ? invariant(
      container && (
        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
      ),
      'unmountComponentAtNode(...): Target container is not a DOM element.'
    ) : invariant(container && (
      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
    )));

    var reactRootID = getReactRootID(container);
    var component = instancesByReactRootID[reactRootID];
    if (!component) {
      return false;
    }
    ReactMount.unmountComponentFromNode(component, container);
    delete instancesByReactRootID[reactRootID];
    delete containersByReactRootID[reactRootID];
    if ("production" !== process.env.NODE_ENV) {
      delete rootElementsByReactRootID[reactRootID];
    }
    return true;
  },

  /**
   * Unmounts a component and removes it from the DOM.
   *
   * @param {ReactComponent} instance React component instance.
   * @param {DOMElement} container DOM element to unmount from.
   * @final
   * @internal
   * @see {ReactMount.unmountComponentAtNode}
   */
  unmountComponentFromNode: function(instance, container) {
    ReactReconciler.unmountComponent(instance);

    if (container.nodeType === DOC_NODE_TYPE) {
      container = container.documentElement;
    }

    // http://jsperf.com/emptying-a-node
    while (container.lastChild) {
      container.removeChild(container.lastChild);
    }
  },

  /**
   * Finds the container DOM element that contains React component to which the
   * supplied DOM `id` belongs.
   *
   * @param {string} id The ID of an element rendered by a React component.
   * @return {?DOMElement} DOM element that contains the `id`.
   */
  findReactContainerForID: function(id) {
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
    var container = containersByReactRootID[reactRootID];

    if ("production" !== process.env.NODE_ENV) {
      var rootElement = rootElementsByReactRootID[reactRootID];
      if (rootElement && rootElement.parentNode !== container) {
        ("production" !== process.env.NODE_ENV ? invariant(
          // Call internalGetID here because getID calls isValid which calls
          // findReactContainerForID (this function).
          internalGetID(rootElement) === reactRootID,
          'ReactMount: Root element ID differed from reactRootID.'
        ) : invariant(// Call internalGetID here because getID calls isValid which calls
        // findReactContainerForID (this function).
        internalGetID(rootElement) === reactRootID));

        var containerChild = container.firstChild;
        if (containerChild &&
            reactRootID === internalGetID(containerChild)) {
          // If the container has a new child with the same ID as the old
          // root element, then rootElementsByReactRootID[reactRootID] is
          // just stale and needs to be updated. The case that deserves a
          // warning is when the container is empty.
          rootElementsByReactRootID[reactRootID] = containerChild;
        } else {
          ("production" !== process.env.NODE_ENV ? warning(
            false,
            'ReactMount: Root element has been removed from its original ' +
            'container. New container:', rootElement.parentNode
          ) : null);
        }
      }
    }

    return container;
  },

  /**
   * Finds an element rendered by React with the supplied ID.
   *
   * @param {string} id ID of a DOM node in the React component.
   * @return {DOMElement} Root DOM node of the React component.
   */
  findReactNodeByID: function(id) {
    var reactRoot = ReactMount.findReactContainerForID(id);
    return ReactMount.findComponentRoot(reactRoot, id);
  },

  /**
   * True if the supplied `node` is rendered by React.
   *
   * @param {*} node DOM Element to check.
   * @return {boolean} True if the DOM Element appears to be rendered by React.
   * @internal
   */
  isRenderedByReact: function(node) {
    if (node.nodeType !== 1) {
      // Not a DOMElement, therefore not a React component
      return false;
    }
    var id = ReactMount.getID(node);
    return id ? id.charAt(0) === SEPARATOR : false;
  },

  /**
   * Traverses up the ancestors of the supplied node to find a node that is a
   * DOM representation of a React component.
   *
   * @param {*} node
   * @return {?DOMEventTarget}
   * @internal
   */
  getFirstReactDOM: function(node) {
    var current = node;
    while (current && current.parentNode !== current) {
      if (ReactMount.isRenderedByReact(current)) {
        return current;
      }
      current = current.parentNode;
    }
    return null;
  },

  /**
   * Finds a node with the supplied `targetID` inside of the supplied
   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
   * quickly.
   *
   * @param {DOMEventTarget} ancestorNode Search from this root.
   * @pararm {string} targetID ID of the DOM representation of the component.
   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
   * @internal
   */
  findComponentRoot: function(ancestorNode, targetID) {
    var firstChildren = findComponentRootReusableArray;
    var childIndex = 0;

    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

    firstChildren[0] = deepestAncestor.firstChild;
    firstChildren.length = 1;

    while (childIndex < firstChildren.length) {
      var child = firstChildren[childIndex++];
      var targetChild;

      while (child) {
        var childID = ReactMount.getID(child);
        if (childID) {
          // Even if we find the node we're looking for, we finish looping
          // through its siblings to ensure they're cached so that we don't have
          // to revisit this node again. Otherwise, we make n^2 calls to getID
          // when visiting the many children of a single node in order.

          if (targetID === childID) {
            targetChild = child;
          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
            // If we find a child whose ID is an ancestor of the given ID,
            // then we can be sure that we only want to search the subtree
            // rooted at this child, so we can throw out the rest of the
            // search state.
            firstChildren.length = childIndex = 0;
            firstChildren.push(child.firstChild);
          }

        } else {
          // If this child had no ID, then there's a chance that it was
          // injected automatically by the browser, as when a `<table>`
          // element sprouts an extra `<tbody>` child as a side effect of
          // `.innerHTML` parsing. Optimistically continue down this
          // branch, but not before examining the other siblings.
          firstChildren.push(child.firstChild);
        }

        child = child.nextSibling;
      }

      if (targetChild) {
        // Emptying firstChildren/findComponentRootReusableArray is
        // not necessary for correctness, but it helps the GC reclaim
        // any nodes that were left at the end of the search.
        firstChildren.length = 0;

        return targetChild;
      }
    }

    firstChildren.length = 0;

    ("production" !== process.env.NODE_ENV ? invariant(
      false,
      'findComponentRoot(..., %s): Unable to find element. This probably ' +
      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
      'usually due to forgetting a <tbody> when using tables, nesting tags ' +
      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
      'parent. ' +
      'Try inspecting the child nodes of the element with React ID `%s`.',
      targetID,
      ReactMount.getID(ancestorNode)
    ) : invariant(false));
  },

  _mountImageIntoNode: function(markup, container, shouldReuseMarkup) {
    ("production" !== process.env.NODE_ENV ? invariant(
      container && (
        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
      ),
      'mountComponentIntoNode(...): Target container is not valid.'
    ) : invariant(container && (
      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
    )));

    if (shouldReuseMarkup) {
      var rootElement = getReactRootElementInContainer(container);
      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
        return;
      } else {
        var checksum = rootElement.getAttribute(
          ReactMarkupChecksum.CHECKSUM_ATTR_NAME
        );
        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

        var rootMarkup = rootElement.outerHTML;
        rootElement.setAttribute(
          ReactMarkupChecksum.CHECKSUM_ATTR_NAME,
          checksum
        );

        var diffIndex = firstDifferenceIndex(markup, rootMarkup);
        var difference = ' (client) ' +
          markup.substring(diffIndex - 20, diffIndex + 20) +
          '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

        ("production" !== process.env.NODE_ENV ? invariant(
          container.nodeType !== DOC_NODE_TYPE,
          'You\'re trying to render a component to the document using ' +
          'server rendering but the checksum was invalid. This usually ' +
          'means you rendered a different component type or props on ' +
          'the client from the one on the server, or your render() ' +
          'methods are impure. React cannot handle this case due to ' +
          'cross-browser quirks by rendering at the document root. You ' +
          'should look for environment dependent code in your components ' +
          'and ensure the props are the same client and server side:\n%s',
          difference
        ) : invariant(container.nodeType !== DOC_NODE_TYPE));

        if ("production" !== process.env.NODE_ENV) {
          ("production" !== process.env.NODE_ENV ? warning(
            false,
            'React attempted to reuse markup in a container but the ' +
            'checksum was invalid. This generally means that you are ' +
            'using server rendering and the markup generated on the ' +
            'server was not what the client was expecting. React injected ' +
            'new markup to compensate which works but you have lost many ' +
            'of the benefits of server rendering. Instead, figure out ' +
            'why the markup being generated is different on the client ' +
            'or server:\n%s',
            difference
          ) : null);
        }
      }
    }

    ("production" !== process.env.NODE_ENV ? invariant(
      container.nodeType !== DOC_NODE_TYPE,
      'You\'re trying to render a component to the document but ' +
        'you didn\'t use server rendering. We can\'t do this ' +
        'without using server rendering due to cross-browser quirks. ' +
        'See React.renderToString() for server rendering.'
    ) : invariant(container.nodeType !== DOC_NODE_TYPE));

    setInnerHTML(container, markup);
  },

  /**
   * React ID utilities.
   */

  getReactRootID: getReactRootID,

  getID: getID,

  setID: setID,

  getNode: getNode,

  getNodeFromInstance: getNodeFromInstance,

  purgeID: purgeID
};

ReactPerf.measureMethods(ReactMount, 'ReactMount', {
  _renderNewRootComponent: '_renderNewRootComponent',
  _mountImageIntoNode: '_mountImageIntoNode'
});

module.exports = ReactMount;

}).call(this,require('_process'))

},{"./DOMProperty":218,"./ReactBrowserEventEmitter":239,"./ReactCurrentOwner":248,"./ReactElement":266,"./ReactElementValidator":267,"./ReactEmptyComponent":268,"./ReactInstanceHandles":275,"./ReactInstanceMap":276,"./ReactMarkupChecksum":278,"./ReactPerf":284,"./ReactReconciler":290,"./ReactUpdateQueue":295,"./ReactUpdates":296,"./containsNode":318,"./emptyObject":324,"./getReactRootElementInContainer":338,"./instantiateReactComponent":343,"./invariant":344,"./setInnerHTML":357,"./shouldUpdateReactComponent":360,"./warning":363,"_process":166}],280:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChild
 * @typechecks static-only
 */

'use strict';

var ReactComponentEnvironment = require("./ReactComponentEnvironment");
var ReactMultiChildUpdateTypes = require("./ReactMultiChildUpdateTypes");

var ReactReconciler = require("./ReactReconciler");
var ReactChildReconciler = require("./ReactChildReconciler");

/**
 * Updating children of a component may trigger recursive updates. The depth is
 * used to batch recursive updates to render markup more efficiently.
 *
 * @type {number}
 * @private
 */
var updateDepth = 0;

/**
 * Queue of update configuration objects.
 *
 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
 *
 * @type {array<object>}
 * @private
 */
var updateQueue = [];

/**
 * Queue of markup to be rendered.
 *
 * @type {array<string>}
 * @private
 */
var markupQueue = [];

/**
 * Enqueues markup to be rendered and inserted at a supplied index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function enqueueMarkup(parentID, markup, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
    markupIndex: markupQueue.push(markup) - 1,
    textContent: null,
    fromIndex: null,
    toIndex: toIndex
  });
}

/**
 * Enqueues moving an existing element to another index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function enqueueMove(parentID, fromIndex, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: toIndex
  });
}

/**
 * Enqueues removing an element at an index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function enqueueRemove(parentID, fromIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: null
  });
}

/**
 * Enqueues setting the text content.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} textContent Text content to set.
 * @private
 */
function enqueueTextContent(parentID, textContent) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
    markupIndex: null,
    textContent: textContent,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue() {
  if (updateQueue.length) {
    ReactComponentEnvironment.processChildrenUpdates(
      updateQueue,
      markupQueue
    );
    clearQueue();
  }
}

/**
 * Clears any enqueued updates.
 *
 * @private
 */
function clearQueue() {
  updateQueue.length = 0;
  markupQueue.length = 0;
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function(nestedChildren, transaction, context) {
      var children = ReactChildReconciler.instantiateChildren(
        nestedChildren, transaction, context
      );
      this._renderedChildren = children;
      var mountImages = [];
      var index = 0;
      for (var name in children) {
        if (children.hasOwnProperty(name)) {
          var child = children[name];
          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
          var rootID = this._rootNodeID + name;
          var mountImage = ReactReconciler.mountComponent(
            child,
            rootID,
            transaction,
            context
          );
          child._mountIndex = index;
          mountImages.push(mountImage);
          index++;
        }
      }
      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function(nextContent) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        ReactChildReconciler.unmountChildren(prevChildren);
        // TODO: The setTextContent operation should be enough
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChildByName(prevChildren[name], name);
          }
        }
        // Set new text content.
        this.setTextContent(nextContent);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          if (errorThrown) {
            clearQueue();
          } else {
            processQueue();
          }
        }
      }
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function(nextNestedChildren, transaction, context) {
      updateDepth++;
      var errorThrown = true;
      try {
        this._updateChildren(nextNestedChildren, transaction, context);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          if (errorThrown) {
            clearQueue();
          } else {
            processQueue();
          }
        }

      }
    },

    /**
     * Improve performance by isolating this hot code path from the try/catch
     * block in `updateChildren`.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function(nextNestedChildren, transaction, context) {
      var prevChildren = this._renderedChildren;
      var nextChildren = ReactChildReconciler.updateChildren(
        prevChildren, nextNestedChildren, transaction, context
      );
      this._renderedChildren = nextChildren;
      if (!nextChildren && !prevChildren) {
        return;
      }
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var lastIndex = 0;
      var nextIndex = 0;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var nextChild = nextChildren[name];
        if (prevChild === nextChild) {
          this.moveChild(prevChild, nextIndex, lastIndex);
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            this._unmountChildByName(prevChild, name);
          }
          // The child must be instantiated before it's mounted.
          this._mountChildByNameAtIndex(
            nextChild, name, nextIndex, transaction, context
          );
        }
        nextIndex++;
      }
      // Remove children that are no longer present.
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) &&
            !(nextChildren && nextChildren.hasOwnProperty(name))) {
          this._unmountChildByName(prevChildren[name], name);
        }
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted.
     *
     * @internal
     */
    unmountChildren: function() {
      var renderedChildren = this._renderedChildren;
      ReactChildReconciler.unmountChildren(renderedChildren);
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function(child, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function(child, mountImage) {
      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function(child) {
      enqueueRemove(this._rootNodeID, child._mountIndex);
    },

    /**
     * Sets this text content string.
     *
     * @param {string} textContent Text content to set.
     * @protected
     */
    setTextContent: function(textContent) {
      enqueueTextContent(this._rootNodeID, textContent);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildByNameAtIndex: function(
      child,
      name,
      index,
      transaction,
      context) {
      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
      var rootID = this._rootNodeID + name;
      var mountImage = ReactReconciler.mountComponent(
        child,
        rootID,
        transaction,
        context
      );
      child._mountIndex = index;
      this.createChild(child, mountImage);
    },

    /**
     * Unmounts a rendered child by name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @param {string} name Name of the child in `this._renderedChildren`.
     * @private
     */
    _unmountChildByName: function(child, name) {
      this.removeChild(child);
      child._mountIndex = null;
    }

  }

};

module.exports = ReactMultiChild;

},{"./ReactChildReconciler":240,"./ReactComponentEnvironment":245,"./ReactMultiChildUpdateTypes":281,"./ReactReconciler":290}],281:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChildUpdateTypes
 */

'use strict';

var keyMirror = require("./keyMirror");

/**
 * When a component's children are updated, a series of update configuration
 * objects are created in order to batch and serialize the required changes.
 *
 * Enumerates all the possible types of update configurations.
 *
 * @internal
 */
var ReactMultiChildUpdateTypes = keyMirror({
  INSERT_MARKUP: null,
  MOVE_EXISTING: null,
  REMOVE_NODE: null,
  TEXT_CONTENT: null
});

module.exports = ReactMultiChildUpdateTypes;

},{"./keyMirror":349}],282:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativeComponent
 */

'use strict';

var assign = require("./Object.assign");
var invariant = require("./invariant");

var autoGenerateWrapperClass = null;
var genericComponentClass = null;
// This registry keeps track of wrapper classes around native tags
var tagToComponentClass = {};
var textComponentClass = null;

var ReactNativeComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function(componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a text component class that takes the text string to be
  // rendered as props.
  injectTextComponentClass: function(componentClass) {
    textComponentClass = componentClass;
  },
  // This accepts a keyed object with classes as values. Each key represents a
  // tag. That particular tag will use this class instead of the generic one.
  injectComponentClasses: function(componentClasses) {
    assign(tagToComponentClass, componentClasses);
  },
  // Temporary hack since we expect DOM refs to behave like composites,
  // for this release.
  injectAutoWrapper: function(wrapperFactory) {
    autoGenerateWrapperClass = wrapperFactory;
  }
};

/**
 * Get a composite component wrapper class for a specific tag.
 *
 * @param {ReactElement} element The tag for which to get the class.
 * @return {function} The React class constructor function.
 */
function getComponentClassForElement(element) {
  if (typeof element.type === 'function') {
    return element.type;
  }
  var tag = element.type;
  var componentClass = tagToComponentClass[tag];
  if (componentClass == null) {
    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
  }
  return componentClass;
}

/**
 * Get a native internal component class for a specific tag.
 *
 * @param {ReactElement} element The element to create.
 * @return {function} The internal class constructor function.
 */
function createInternalComponent(element) {
  ("production" !== process.env.NODE_ENV ? invariant(
    genericComponentClass,
    'There is no registered component for the tag %s',
    element.type
  ) : invariant(genericComponentClass));
  return new genericComponentClass(element.type, element.props);
}

/**
 * @param {ReactText} text
 * @return {ReactComponent}
 */
function createInstanceForText(text) {
  return new textComponentClass(text);
}

/**
 * @param {ReactComponent} component
 * @return {boolean}
 */
function isTextComponent(component) {
  return component instanceof textComponentClass;
}

var ReactNativeComponent = {
  getComponentClassForElement: getComponentClassForElement,
  createInternalComponent: createInternalComponent,
  createInstanceForText: createInstanceForText,
  isTextComponent: isTextComponent,
  injection: ReactNativeComponentInjection
};

module.exports = ReactNativeComponent;

}).call(this,require('_process'))

},{"./Object.assign":235,"./invariant":344,"_process":166}],283:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactOwner
 */

'use strict';

var invariant = require("./invariant");

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {

  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid owner.
   * @final
   */
  isValidOwner: function(object) {
    return !!(
      (object &&
      typeof object.attachRef === 'function' && typeof object.detachRef === 'function')
    );
  },

  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function(component, ref, owner) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ReactOwner.isValidOwner(owner),
      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to add a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function(component, ref, owner) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ReactOwner.isValidOwner(owner),
      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to remove a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    // Check that `component` is still the current ref because we do not want to
    // detach the ref if another component stole it.
    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
      owner.detachRef(ref);
    }
  }

};

module.exports = ReactOwner;

}).call(this,require('_process'))

},{"./invariant":344,"_process":166}],284:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPerf
 * @typechecks static-only
 */

'use strict';

/**
 * ReactPerf is a general AOP system designed to measure performance. This
 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
 */
var ReactPerf = {
  /**
   * Boolean to enable/disable measurement. Set to false by default to prevent
   * accidental logging and perf loss.
   */
  enableMeasure: false,

  /**
   * Holds onto the measure function in use. By default, don't measure
   * anything, but we'll override this if we inject a measure function.
   */
  storedMeasure: _noMeasure,

  /**
   * @param {object} object
   * @param {string} objectName
   * @param {object<string>} methodNames
   */
  measureMethods: function(object, objectName, methodNames) {
    if ("production" !== process.env.NODE_ENV) {
      for (var key in methodNames) {
        if (!methodNames.hasOwnProperty(key)) {
          continue;
        }
        object[key] = ReactPerf.measure(
          objectName,
          methodNames[key],
          object[key]
        );
      }
    }
  },

  /**
   * Use this to wrap methods you want to measure. Zero overhead in production.
   *
   * @param {string} objName
   * @param {string} fnName
   * @param {function} func
   * @return {function}
   */
  measure: function(objName, fnName, func) {
    if ("production" !== process.env.NODE_ENV) {
      var measuredFunc = null;
      var wrapper = function() {
        if (ReactPerf.enableMeasure) {
          if (!measuredFunc) {
            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
          }
          return measuredFunc.apply(this, arguments);
        }
        return func.apply(this, arguments);
      };
      wrapper.displayName = objName + '_' + fnName;
      return wrapper;
    }
    return func;
  },

  injection: {
    /**
     * @param {function} measure
     */
    injectMeasure: function(measure) {
      ReactPerf.storedMeasure = measure;
    }
  }
};

/**
 * Simply passes through the measured function, without measuring it.
 *
 * @param {string} objName
 * @param {string} fnName
 * @param {function} func
 * @return {function}
 */
function _noMeasure(objName, fnName, func) {
  return func;
}

module.exports = ReactPerf;

}).call(this,require('_process'))

},{"_process":166}],285:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocationNames
 */

'use strict';

var ReactPropTypeLocationNames = {};

if ("production" !== process.env.NODE_ENV) {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;

}).call(this,require('_process'))

},{"_process":166}],286:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocations
 */

'use strict';

var keyMirror = require("./keyMirror");

var ReactPropTypeLocations = keyMirror({
  prop: null,
  context: null,
  childContext: null
});

module.exports = ReactPropTypeLocations;

},{"./keyMirror":349}],287:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypes
 */

'use strict';

var ReactElement = require("./ReactElement");
var ReactFragment = require("./ReactFragment");
var ReactPropTypeLocationNames = require("./ReactPropTypeLocationNames");

var emptyFunction = require("./emptyFunction");

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

var ANONYMOUS = '<<anonymous>>';

var elementTypeChecker = createElementTypeChecker();
var nodeTypeChecker = createNodeChecker();

var ReactPropTypes = {
  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),

  any: createAnyTypeChecker(),
  arrayOf: createArrayOfTypeChecker,
  element: elementTypeChecker,
  instanceOf: createInstanceTypeChecker,
  node: nodeTypeChecker,
  objectOf: createObjectOfTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  shape: createShapeTypeChecker
};

function createChainableTypeChecker(validate) {
  function checkType(isRequired, props, propName, componentName, location) {
    componentName = componentName || ANONYMOUS;
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        return new Error(
          ("Required " + locationName + " `" + propName + "` was not specified in ") +
          ("`" + componentName + "`.")
        );
      }
      return null;
    } else {
      return validate(props, propName, componentName, location);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];
      // `propValue` being instance of, say, date/regexp, pass the 'object'
      // check, but we can offer a more precise error message here rather than
      // 'of type `object`'.
      var preciseType = getPreciseType(propValue);

      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
      );
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns(null));
}

function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
      );
    }
    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(propValue, i, componentName, location);
      if (error instanceof Error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createElementTypeChecker() {
  function validate(props, propName, componentName, location) {
    if (!ReactElement.isValidElement(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactElement.")
      );
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
      );
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (propValue === expectedValues[i]) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
    );
  }
  return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
      );
    }
    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(propValue, key, componentName, location);
        if (error instanceof Error) {
          return error;
        }
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
  function validate(props, propName, componentName, location) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (checker(props, propName, componentName, location) == null) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` supplied to ") +
      ("`" + componentName + "`.")
    );
  }
  return createChainableTypeChecker(validate);
}

function createNodeChecker() {
  function validate(props, propName, componentName, location) {
    if (!isNode(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactNode.")
      );
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
        ("supplied to `" + componentName + "`, expected `object`.")
      );
    }
    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;
      }
      var error = checker(propValue, key, componentName, location);
      if (error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function isNode(propValue) {
  switch (typeof propValue) {
    case 'number':
    case 'string':
    case 'undefined':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isNode);
      }
      if (propValue === null || ReactElement.isValidElement(propValue)) {
        return true;
      }
      propValue = ReactFragment.extractIfFragment(propValue);
      for (var k in propValue) {
        if (!isNode(propValue[k])) {
          return false;
        }
      }
      return true;
    default:
      return false;
  }
}

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

module.exports = ReactPropTypes;

},{"./ReactElement":266,"./ReactFragment":272,"./ReactPropTypeLocationNames":285,"./emptyFunction":323}],288:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPutListenerQueue
 */

'use strict';

var PooledClass = require("./PooledClass");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");

var assign = require("./Object.assign");

function ReactPutListenerQueue() {
  this.listenersToPut = [];
}

assign(ReactPutListenerQueue.prototype, {
  enqueuePutListener: function(rootNodeID, propKey, propValue) {
    this.listenersToPut.push({
      rootNodeID: rootNodeID,
      propKey: propKey,
      propValue: propValue
    });
  },

  putListeners: function() {
    for (var i = 0; i < this.listenersToPut.length; i++) {
      var listenerToPut = this.listenersToPut[i];
      ReactBrowserEventEmitter.putListener(
        listenerToPut.rootNodeID,
        listenerToPut.propKey,
        listenerToPut.propValue
      );
    }
  },

  reset: function() {
    this.listenersToPut.length = 0;
  },

  destructor: function() {
    this.reset();
  }
});

PooledClass.addPoolingTo(ReactPutListenerQueue);

module.exports = ReactPutListenerQueue;

},{"./Object.assign":235,"./PooledClass":236,"./ReactBrowserEventEmitter":239}],289:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconcileTransaction
 * @typechecks static-only
 */

'use strict';

var CallbackQueue = require("./CallbackQueue");
var PooledClass = require("./PooledClass");
var ReactBrowserEventEmitter = require("./ReactBrowserEventEmitter");
var ReactInputSelection = require("./ReactInputSelection");
var ReactPutListenerQueue = require("./ReactPutListenerQueue");
var Transaction = require("./Transaction");

var assign = require("./Object.assign");

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function() {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
   *   restores the previous value.
   */
  close: function(previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function() {
    this.reactMountReady.notifyAll();
  }
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: function() {
    this.putListenerQueue.putListeners();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  SELECTION_RESTORATION,
  EVENT_SUPPRESSION,
  ON_DOM_READY_QUEUEING
];

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction() {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap proceedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;

},{"./CallbackQueue":214,"./Object.assign":235,"./PooledClass":236,"./ReactBrowserEventEmitter":239,"./ReactInputSelection":274,"./ReactPutListenerQueue":288,"./Transaction":312}],290:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconciler
 */

'use strict';

var ReactRef = require("./ReactRef");
var ReactElementValidator = require("./ReactElementValidator");

/**
 * Helper to call ReactRef.attachRefs with this composite component, split out
 * to avoid allocations in the transaction mount-ready queue.
 */
function attachRefs() {
  ReactRef.attachRefs(this, this._currentElement);
}

var ReactReconciler = {

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactComponent} internalInstance
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function(internalInstance, rootID, transaction, context) {
    var markup = internalInstance.mountComponent(rootID, transaction, context);
    if ("production" !== process.env.NODE_ENV) {
      ReactElementValidator.checkAndWarnForMutatedProps(
        internalInstance._currentElement
      );
    }
    transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    return markup;
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function(internalInstance) {
    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
    internalInstance.unmountComponent();
  },

  /**
   * Update a component using a new element.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @internal
   */
  receiveComponent: function(
    internalInstance, nextElement, transaction, context
  ) {
    var prevElement = internalInstance._currentElement;

    if (nextElement === prevElement && nextElement._owner != null) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for an element created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    if ("production" !== process.env.NODE_ENV) {
      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
    }

    var refsChanged = ReactRef.shouldUpdateRefs(
      prevElement,
      nextElement
    );

    if (refsChanged) {
      ReactRef.detachRefs(internalInstance, prevElement);
    }

    internalInstance.receiveComponent(nextElement, transaction, context);

    if (refsChanged) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
  },

  /**
   * Flush any dirty changes in a component.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function(
    internalInstance,
    transaction
  ) {
    internalInstance.performUpdateIfNecessary(transaction);
  }

};

module.exports = ReactReconciler;

}).call(this,require('_process'))

},{"./ReactElementValidator":267,"./ReactRef":291,"_process":166}],291:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRef
 */

'use strict';

var ReactOwner = require("./ReactOwner");

var ReactRef = {};

function attachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(component.getPublicInstance());
  } else {
    // Legacy ref
    ReactOwner.addComponentAsRefTo(component, ref, owner);
  }
}

function detachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(null);
  } else {
    // Legacy ref
    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
  }
}

ReactRef.attachRefs = function(instance, element) {
  var ref = element.ref;
  if (ref != null) {
    attachRef(ref, instance, element._owner);
  }
};

ReactRef.shouldUpdateRefs = function(prevElement, nextElement) {
  // If either the owner or a `ref` has changed, make sure the newest owner
  // has stored a reference to `this`, and the previous owner (if different)
  // has forgotten the reference to `this`. We use the element instead
  // of the public this.props because the post processing cannot determine
  // a ref. The ref conceptually lives on the element.

  // TODO: Should this even be possible? The owner cannot change because
  // it's forbidden by shouldUpdateReactComponent. The ref can change
  // if you swap the keys of but not the refs. Reconsider where this check
  // is made. It probably belongs where the key checking and
  // instantiateReactComponent is done.

  return (
    nextElement._owner !== prevElement._owner ||
    nextElement.ref !== prevElement.ref
  );
};

ReactRef.detachRefs = function(instance, element) {
  var ref = element.ref;
  if (ref != null) {
    detachRef(ref, instance, element._owner);
  }
};

module.exports = ReactRef;

},{"./ReactOwner":283}],292:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRootIndex
 * @typechecks
 */

'use strict';

var ReactRootIndexInjection = {
  /**
   * @param {function} _createReactRootIndex
   */
  injectCreateReactRootIndex: function(_createReactRootIndex) {
    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
  }
};

var ReactRootIndex = {
  createReactRootIndex: null,
  injection: ReactRootIndexInjection
};

module.exports = ReactRootIndex;

},{}],293:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 * @providesModule ReactServerRendering
 */
'use strict';

var ReactElement = require("./ReactElement");
var ReactInstanceHandles = require("./ReactInstanceHandles");
var ReactMarkupChecksum = require("./ReactMarkupChecksum");
var ReactServerRenderingTransaction =
  require("./ReactServerRenderingTransaction");

var emptyObject = require("./emptyObject");
var instantiateReactComponent = require("./instantiateReactComponent");
var invariant = require("./invariant");

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup
 */
function renderToString(element) {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactElement.isValidElement(element),
    'renderToString(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(false);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      var markup =
        componentInstance.mountComponent(id, transaction, emptyObject);
      return ReactMarkupChecksum.addChecksumToMarkup(markup);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup, without the extra React ID and checksum
 * (for generating static pages)
 */
function renderToStaticMarkup(element) {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactElement.isValidElement(element),
    'renderToStaticMarkup(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(true);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      return componentInstance.mountComponent(id, transaction, emptyObject);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

module.exports = {
  renderToString: renderToString,
  renderToStaticMarkup: renderToStaticMarkup
};

}).call(this,require('_process'))

},{"./ReactElement":266,"./ReactInstanceHandles":275,"./ReactMarkupChecksum":278,"./ReactServerRenderingTransaction":294,"./emptyObject":324,"./instantiateReactComponent":343,"./invariant":344,"_process":166}],294:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerRenderingTransaction
 * @typechecks
 */

'use strict';

var PooledClass = require("./PooledClass");
var CallbackQueue = require("./CallbackQueue");
var ReactPutListenerQueue = require("./ReactPutListenerQueue");
var Transaction = require("./Transaction");

var assign = require("./Object.assign");
var emptyFunction = require("./emptyFunction");

/**
 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
 * during the performing of the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  close: emptyFunction
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: emptyFunction
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  ON_DOM_READY_QUEUEING
];

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap proceedures.
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(
  ReactServerRenderingTransaction.prototype,
  Transaction.Mixin,
  Mixin
);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;

},{"./CallbackQueue":214,"./Object.assign":235,"./PooledClass":236,"./ReactPutListenerQueue":288,"./Transaction":312,"./emptyFunction":323}],295:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdateQueue
 */

'use strict';

var ReactLifeCycle = require("./ReactLifeCycle");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactElement = require("./ReactElement");
var ReactInstanceMap = require("./ReactInstanceMap");
var ReactUpdates = require("./ReactUpdates");

var assign = require("./Object.assign");
var invariant = require("./invariant");
var warning = require("./warning");

function enqueueUpdate(internalInstance) {
  if (internalInstance !== ReactLifeCycle.currentlyMountingInstance) {
    // If we're in a componentWillMount handler, don't enqueue a rerender
    // because ReactUpdates assumes we're in a browser context (which is
    // wrong for server rendering) and we're about to do a render anyway.
    // See bug in #1740.
    ReactUpdates.enqueueUpdate(internalInstance);
  }
}

function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactCurrentOwner.current == null,
    '%s(...): Cannot update during an existing state transition ' +
    '(such as within `render`). Render methods should be a pure function ' +
    'of props and state.',
    callerName
  ) : invariant(ReactCurrentOwner.current == null));

  var internalInstance = ReactInstanceMap.get(publicInstance);
  if (!internalInstance) {
    if ("production" !== process.env.NODE_ENV) {
      // Only warn when we have a callerName. Otherwise we should be silent.
      // We're probably calling from enqueueCallback. We don't want to warn
      // there because we already warned for the corresponding lifecycle method.
      ("production" !== process.env.NODE_ENV ? warning(
        !callerName,
        '%s(...): Can only update a mounted or mounting component. ' +
        'This usually means you called %s() on an unmounted ' +
        'component. This is a no-op.',
        callerName,
        callerName
      ) : null);
    }
    return null;
  }

  if (internalInstance === ReactLifeCycle.currentlyUnmountingInstance) {
    return null;
  }

  return internalInstance;
}

/**
 * ReactUpdateQueue allows for state updates to be scheduled into a later
 * reconciliation step.
 */
var ReactUpdateQueue = {

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function(publicInstance, callback) {
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof callback === 'function',
      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
      'isn\'t callable.'
    ) : invariant(typeof callback === 'function'));
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

    // Previously we would throw an error if we didn't have an internal
    // instance. Since we want to make it a no-op instead, we mirror the same
    // behavior we have in other enqueue* methods.
    // We also need to ignore callbacks in componentWillMount. See
    // enqueueUpdates.
    if (!internalInstance ||
        internalInstance === ReactLifeCycle.currentlyMountingInstance) {
      return null;
    }

    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    // TODO: The callback here is ignored when setState is called from
    // componentWillMount. Either fix it or disallow doing so completely in
    // favor of getInitialState. Alternatively, we can disallow
    // componentWillMount during server-side rendering.
    enqueueUpdate(internalInstance);
  },

  enqueueCallbackInternal: function(internalInstance, callback) {
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof callback === 'function',
      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
      'isn\'t callable.'
    ) : invariant(typeof callback === 'function'));
    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    enqueueUpdate(internalInstance);
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldUpdateComponent`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function(publicInstance) {
    var internalInstance = getInternalInstanceReadyForUpdate(
      publicInstance,
      'forceUpdate'
    );

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingForceUpdate = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function(publicInstance, completeState) {
    var internalInstance = getInternalInstanceReadyForUpdate(
      publicInstance,
      'replaceState'
    );

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingStateQueue = [completeState];
    internalInstance._pendingReplaceState = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function(publicInstance, partialState) {
    var internalInstance = getInternalInstanceReadyForUpdate(
      publicInstance,
      'setState'
    );

    if (!internalInstance) {
      return;
    }

    var queue =
      internalInstance._pendingStateQueue ||
      (internalInstance._pendingStateQueue = []);
    queue.push(partialState);

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialProps Subset of the next props.
   * @internal
   */
  enqueueSetProps: function(publicInstance, partialProps) {
    var internalInstance = getInternalInstanceReadyForUpdate(
      publicInstance,
      'setProps'
    );

    if (!internalInstance) {
      return;
    }

    ("production" !== process.env.NODE_ENV ? invariant(
      internalInstance._isTopLevel,
      'setProps(...): You called `setProps` on a ' +
      'component with a parent. This is an anti-pattern since props will ' +
      'get reactively updated when rendered. Instead, change the owner\'s ' +
      '`render` method to pass the correct value as props to the component ' +
      'where it is created.'
    ) : invariant(internalInstance._isTopLevel));

    // Merge with the pending element if it exists, otherwise with existing
    // element props.
    var element = internalInstance._pendingElement ||
                  internalInstance._currentElement;
    var props = assign({}, element.props, partialProps);
    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
      element,
      props
    );

    enqueueUpdate(internalInstance);
  },

  /**
   * Replaces all of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} props New props.
   * @internal
   */
  enqueueReplaceProps: function(publicInstance, props) {
    var internalInstance = getInternalInstanceReadyForUpdate(
      publicInstance,
      'replaceProps'
    );

    if (!internalInstance) {
      return;
    }

    ("production" !== process.env.NODE_ENV ? invariant(
      internalInstance._isTopLevel,
      'replaceProps(...): You called `replaceProps` on a ' +
      'component with a parent. This is an anti-pattern since props will ' +
      'get reactively updated when rendered. Instead, change the owner\'s ' +
      '`render` method to pass the correct value as props to the component ' +
      'where it is created.'
    ) : invariant(internalInstance._isTopLevel));

    // Merge with the pending element if it exists, otherwise with existing
    // element props.
    var element = internalInstance._pendingElement ||
                  internalInstance._currentElement;
    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
      element,
      props
    );

    enqueueUpdate(internalInstance);
  },

  enqueueElementInternal: function(internalInstance, newElement) {
    internalInstance._pendingElement = newElement;
    enqueueUpdate(internalInstance);
  }

};

module.exports = ReactUpdateQueue;

}).call(this,require('_process'))

},{"./Object.assign":235,"./ReactCurrentOwner":248,"./ReactElement":266,"./ReactInstanceMap":276,"./ReactLifeCycle":277,"./ReactUpdates":296,"./invariant":344,"./warning":363,"_process":166}],296:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdates
 */

'use strict';

var CallbackQueue = require("./CallbackQueue");
var PooledClass = require("./PooledClass");
var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactPerf = require("./ReactPerf");
var ReactReconciler = require("./ReactReconciler");
var Transaction = require("./Transaction");

var assign = require("./Object.assign");
var invariant = require("./invariant");
var warning = require("./warning");

var dirtyComponents = [];
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactUpdates.ReactReconcileTransaction && batchingStrategy,
    'ReactUpdates: must inject a reconcile transaction class and batching ' +
    'strategy'
  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
}

var NESTED_UPDATES = {
  initialize: function() {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function() {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function() {
    this.callbackQueue.reset();
  },
  close: function() {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction =
    ReactUpdates.ReactReconcileTransaction.getPooled();
}

assign(
  ReactUpdatesFlushTransaction.prototype,
  Transaction.Mixin, {
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function() {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function(method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.Mixin.perform.call(
      this,
      this.reconcileTransaction.perform,
      this.reconcileTransaction,
      method,
      scope,
      a
    );
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b, c, d) {
  ensureInjected();
  batchingStrategy.batchedUpdates(callback, a, b, c, d);
}

/**
 * Array comparator for ReactComponents by mount ordering.
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountOrderComparator(c1, c2) {
  return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  ("production" !== process.env.NODE_ENV ? invariant(
    len === dirtyComponents.length,
    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
    'match dirty-components array length (%s).',
    len,
    dirtyComponents.length
  ) : invariant(len === dirtyComponents.length));

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountOrderComparator);

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, it will still
    // be here, but we assume that it has cleared its _pendingCallbacks and
    // that performUpdateIfNecessary is a noop.
    var component = dirtyComponents[i];

    // If performUpdateIfNecessary happens to enqueue any new updates, we
    // shouldn't execute the callbacks until the next render happens, so
    // stash the callbacks first
    var callbacks = component._pendingCallbacks;
    component._pendingCallbacks = null;

    ReactReconciler.performUpdateIfNecessary(
      component,
      transaction.reconcileTransaction
    );

    if (callbacks) {
      for (var j = 0; j < callbacks.length; j++) {
        transaction.callbackQueue.enqueue(
          callbacks[j],
          component.getPublicInstance()
        );
      }
    }
  }
}

var flushBatchedUpdates = function() {
  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
  // array and perform any updates enqueued by mount-ready handlers (i.e.,
  // componentDidUpdate) but we need to check here too in order to catch
  // updates enqueued by setState callbacks and asap calls.
  while (dirtyComponents.length || asapEnqueued) {
    if (dirtyComponents.length) {
      var transaction = ReactUpdatesFlushTransaction.getPooled();
      transaction.perform(runBatchedUpdates, null, transaction);
      ReactUpdatesFlushTransaction.release(transaction);
    }

    if (asapEnqueued) {
      asapEnqueued = false;
      var queue = asapCallbackQueue;
      asapCallbackQueue = CallbackQueue.getPooled();
      queue.notifyAll();
      CallbackQueue.release(queue);
    }
  }
};
flushBatchedUpdates = ReactPerf.measure(
  'ReactUpdates',
  'flushBatchedUpdates',
  flushBatchedUpdates
);

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component) {
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setProps, setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)
  ("production" !== process.env.NODE_ENV ? warning(
    ReactCurrentOwner.current == null,
    'enqueueUpdate(): Render methods should be a pure function of props ' +
    'and state; triggering nested component updates from render is not ' +
    'allowed. If necessary, trigger nested updates in ' +
    'componentDidUpdate.'
  ) : null);

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component);
    return;
  }

  dirtyComponents.push(component);
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  ("production" !== process.env.NODE_ENV ? invariant(
    batchingStrategy.isBatchingUpdates,
    'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
    'updates are not being batched.'
  ) : invariant(batchingStrategy.isBatchingUpdates));
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function(ReconcileTransaction) {
    ("production" !== process.env.NODE_ENV ? invariant(
      ReconcileTransaction,
      'ReactUpdates: must provide a reconcile transaction class'
    ) : invariant(ReconcileTransaction));
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function(_batchingStrategy) {
    ("production" !== process.env.NODE_ENV ? invariant(
      _batchingStrategy,
      'ReactUpdates: must provide a batching strategy'
    ) : invariant(_batchingStrategy));
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof _batchingStrategy.batchedUpdates === 'function',
      'ReactUpdates: must provide a batchedUpdates() function'
    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
    ("production" !== process.env.NODE_ENV ? invariant(
      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;

}).call(this,require('_process'))

},{"./CallbackQueue":214,"./Object.assign":235,"./PooledClass":236,"./ReactCurrentOwner":248,"./ReactPerf":284,"./ReactReconciler":290,"./Transaction":312,"./invariant":344,"./warning":363,"_process":166}],297:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SVGDOMPropertyConfig
 */

/*jslint bitwise: true*/

'use strict';

var DOMProperty = require("./DOMProperty");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

var SVGDOMPropertyConfig = {
  Properties: {
    clipPath: MUST_USE_ATTRIBUTE,
    cx: MUST_USE_ATTRIBUTE,
    cy: MUST_USE_ATTRIBUTE,
    d: MUST_USE_ATTRIBUTE,
    dx: MUST_USE_ATTRIBUTE,
    dy: MUST_USE_ATTRIBUTE,
    fill: MUST_USE_ATTRIBUTE,
    fillOpacity: MUST_USE_ATTRIBUTE,
    fontFamily: MUST_USE_ATTRIBUTE,
    fontSize: MUST_USE_ATTRIBUTE,
    fx: MUST_USE_ATTRIBUTE,
    fy: MUST_USE_ATTRIBUTE,
    gradientTransform: MUST_USE_ATTRIBUTE,
    gradientUnits: MUST_USE_ATTRIBUTE,
    markerEnd: MUST_USE_ATTRIBUTE,
    markerMid: MUST_USE_ATTRIBUTE,
    markerStart: MUST_USE_ATTRIBUTE,
    offset: MUST_USE_ATTRIBUTE,
    opacity: MUST_USE_ATTRIBUTE,
    patternContentUnits: MUST_USE_ATTRIBUTE,
    patternUnits: MUST_USE_ATTRIBUTE,
    points: MUST_USE_ATTRIBUTE,
    preserveAspectRatio: MUST_USE_ATTRIBUTE,
    r: MUST_USE_ATTRIBUTE,
    rx: MUST_USE_ATTRIBUTE,
    ry: MUST_USE_ATTRIBUTE,
    spreadMethod: MUST_USE_ATTRIBUTE,
    stopColor: MUST_USE_ATTRIBUTE,
    stopOpacity: MUST_USE_ATTRIBUTE,
    stroke: MUST_USE_ATTRIBUTE,
    strokeDasharray: MUST_USE_ATTRIBUTE,
    strokeLinecap: MUST_USE_ATTRIBUTE,
    strokeOpacity: MUST_USE_ATTRIBUTE,
    strokeWidth: MUST_USE_ATTRIBUTE,
    textAnchor: MUST_USE_ATTRIBUTE,
    transform: MUST_USE_ATTRIBUTE,
    version: MUST_USE_ATTRIBUTE,
    viewBox: MUST_USE_ATTRIBUTE,
    x1: MUST_USE_ATTRIBUTE,
    x2: MUST_USE_ATTRIBUTE,
    x: MUST_USE_ATTRIBUTE,
    y1: MUST_USE_ATTRIBUTE,
    y2: MUST_USE_ATTRIBUTE,
    y: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    clipPath: 'clip-path',
    fillOpacity: 'fill-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    gradientTransform: 'gradientTransform',
    gradientUnits: 'gradientUnits',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    patternContentUnits: 'patternContentUnits',
    patternUnits: 'patternUnits',
    preserveAspectRatio: 'preserveAspectRatio',
    spreadMethod: 'spreadMethod',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strokeDasharray: 'stroke-dasharray',
    strokeLinecap: 'stroke-linecap',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    textAnchor: 'text-anchor',
    viewBox: 'viewBox'
  }
};

module.exports = SVGDOMPropertyConfig;

},{"./DOMProperty":218}],298:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SelectEventPlugin
 */

'use strict';

var EventConstants = require("./EventConstants");
var EventPropagators = require("./EventPropagators");
var ReactInputSelection = require("./ReactInputSelection");
var SyntheticEvent = require("./SyntheticEvent");

var getActiveElement = require("./getActiveElement");
var isTextInputElement = require("./isTextInputElement");
var keyOf = require("./keyOf");
var shallowEqual = require("./shallowEqual");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSelect: null}),
      captured: keyOf({onSelectCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topContextMenu,
      topLevelTypes.topFocus,
      topLevelTypes.topKeyDown,
      topLevelTypes.topMouseDown,
      topLevelTypes.topMouseUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

var activeElement = null;
var activeElementID = null;
var lastSelection = null;
var mouseDown = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @param {object}
 */
function getSelection(node) {
  if ('selectionStart' in node &&
      ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown ||
      activeElement == null ||
      activeElement !== getActiveElement()) {
    return null;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(
      eventTypes.select,
      activeElementID,
      nativeEvent
    );

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    switch (topLevelType) {
      // Track the input node that has focus.
      case topLevelTypes.topFocus:
        if (isTextInputElement(topLevelTarget) ||
            topLevelTarget.contentEditable === 'true') {
          activeElement = topLevelTarget;
          activeElementID = topLevelTargetID;
          lastSelection = null;
        }
        break;
      case topLevelTypes.topBlur:
        activeElement = null;
        activeElementID = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case topLevelTypes.topMouseDown:
        mouseDown = true;
        break;
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topMouseUp:
        mouseDown = false;
        return constructSelectEvent(nativeEvent);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't).
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      case topLevelTypes.topSelectionChange:
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        return constructSelectEvent(nativeEvent);
    }
  }
};

module.exports = SelectEventPlugin;

},{"./EventConstants":223,"./EventPropagators":228,"./ReactInputSelection":274,"./SyntheticEvent":304,"./getActiveElement":330,"./isTextInputElement":347,"./keyOf":350,"./shallowEqual":359}],299:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ServerReactRootIndex
 * @typechecks
 */

'use strict';

/**
 * Size of the reactRoot ID space. We generate random numbers for React root
 * IDs and if there's a collision the events and DOM update system will
 * get confused. In the future we need a way to generate GUIDs but for
 * now this will work on a smaller scale.
 */
var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

var ServerReactRootIndex = {
  createReactRootIndex: function() {
    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
  }
};

module.exports = ServerReactRootIndex;

},{}],300:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SimpleEventPlugin
 */

'use strict';

var EventConstants = require("./EventConstants");
var EventPluginUtils = require("./EventPluginUtils");
var EventPropagators = require("./EventPropagators");
var SyntheticClipboardEvent = require("./SyntheticClipboardEvent");
var SyntheticEvent = require("./SyntheticEvent");
var SyntheticFocusEvent = require("./SyntheticFocusEvent");
var SyntheticKeyboardEvent = require("./SyntheticKeyboardEvent");
var SyntheticMouseEvent = require("./SyntheticMouseEvent");
var SyntheticDragEvent = require("./SyntheticDragEvent");
var SyntheticTouchEvent = require("./SyntheticTouchEvent");
var SyntheticUIEvent = require("./SyntheticUIEvent");
var SyntheticWheelEvent = require("./SyntheticWheelEvent");

var getEventCharCode = require("./getEventCharCode");

var invariant = require("./invariant");
var keyOf = require("./keyOf");
var warning = require("./warning");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  blur: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBlur: true}),
      captured: keyOf({onBlurCapture: true})
    }
  },
  click: {
    phasedRegistrationNames: {
      bubbled: keyOf({onClick: true}),
      captured: keyOf({onClickCapture: true})
    }
  },
  contextMenu: {
    phasedRegistrationNames: {
      bubbled: keyOf({onContextMenu: true}),
      captured: keyOf({onContextMenuCapture: true})
    }
  },
  copy: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCopy: true}),
      captured: keyOf({onCopyCapture: true})
    }
  },
  cut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCut: true}),
      captured: keyOf({onCutCapture: true})
    }
  },
  doubleClick: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDoubleClick: true}),
      captured: keyOf({onDoubleClickCapture: true})
    }
  },
  drag: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrag: true}),
      captured: keyOf({onDragCapture: true})
    }
  },
  dragEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnd: true}),
      captured: keyOf({onDragEndCapture: true})
    }
  },
  dragEnter: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnter: true}),
      captured: keyOf({onDragEnterCapture: true})
    }
  },
  dragExit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragExit: true}),
      captured: keyOf({onDragExitCapture: true})
    }
  },
  dragLeave: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragLeave: true}),
      captured: keyOf({onDragLeaveCapture: true})
    }
  },
  dragOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragOver: true}),
      captured: keyOf({onDragOverCapture: true})
    }
  },
  dragStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragStart: true}),
      captured: keyOf({onDragStartCapture: true})
    }
  },
  drop: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrop: true}),
      captured: keyOf({onDropCapture: true})
    }
  },
  focus: {
    phasedRegistrationNames: {
      bubbled: keyOf({onFocus: true}),
      captured: keyOf({onFocusCapture: true})
    }
  },
  input: {
    phasedRegistrationNames: {
      bubbled: keyOf({onInput: true}),
      captured: keyOf({onInputCapture: true})
    }
  },
  keyDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyDown: true}),
      captured: keyOf({onKeyDownCapture: true})
    }
  },
  keyPress: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyPress: true}),
      captured: keyOf({onKeyPressCapture: true})
    }
  },
  keyUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyUp: true}),
      captured: keyOf({onKeyUpCapture: true})
    }
  },
  load: {
    phasedRegistrationNames: {
      bubbled: keyOf({onLoad: true}),
      captured: keyOf({onLoadCapture: true})
    }
  },
  error: {
    phasedRegistrationNames: {
      bubbled: keyOf({onError: true}),
      captured: keyOf({onErrorCapture: true})
    }
  },
  // Note: We do not allow listening to mouseOver events. Instead, use the
  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
  mouseDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseDown: true}),
      captured: keyOf({onMouseDownCapture: true})
    }
  },
  mouseMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseMove: true}),
      captured: keyOf({onMouseMoveCapture: true})
    }
  },
  mouseOut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOut: true}),
      captured: keyOf({onMouseOutCapture: true})
    }
  },
  mouseOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOver: true}),
      captured: keyOf({onMouseOverCapture: true})
    }
  },
  mouseUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseUp: true}),
      captured: keyOf({onMouseUpCapture: true})
    }
  },
  paste: {
    phasedRegistrationNames: {
      bubbled: keyOf({onPaste: true}),
      captured: keyOf({onPasteCapture: true})
    }
  },
  reset: {
    phasedRegistrationNames: {
      bubbled: keyOf({onReset: true}),
      captured: keyOf({onResetCapture: true})
    }
  },
  scroll: {
    phasedRegistrationNames: {
      bubbled: keyOf({onScroll: true}),
      captured: keyOf({onScrollCapture: true})
    }
  },
  submit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSubmit: true}),
      captured: keyOf({onSubmitCapture: true})
    }
  },
  touchCancel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchCancel: true}),
      captured: keyOf({onTouchCancelCapture: true})
    }
  },
  touchEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchEnd: true}),
      captured: keyOf({onTouchEndCapture: true})
    }
  },
  touchMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchMove: true}),
      captured: keyOf({onTouchMoveCapture: true})
    }
  },
  touchStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchStart: true}),
      captured: keyOf({onTouchStartCapture: true})
    }
  },
  wheel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onWheel: true}),
      captured: keyOf({onWheelCapture: true})
    }
  }
};

var topLevelEventsToDispatchConfig = {
  topBlur:        eventTypes.blur,
  topClick:       eventTypes.click,
  topContextMenu: eventTypes.contextMenu,
  topCopy:        eventTypes.copy,
  topCut:         eventTypes.cut,
  topDoubleClick: eventTypes.doubleClick,
  topDrag:        eventTypes.drag,
  topDragEnd:     eventTypes.dragEnd,
  topDragEnter:   eventTypes.dragEnter,
  topDragExit:    eventTypes.dragExit,
  topDragLeave:   eventTypes.dragLeave,
  topDragOver:    eventTypes.dragOver,
  topDragStart:   eventTypes.dragStart,
  topDrop:        eventTypes.drop,
  topError:       eventTypes.error,
  topFocus:       eventTypes.focus,
  topInput:       eventTypes.input,
  topKeyDown:     eventTypes.keyDown,
  topKeyPress:    eventTypes.keyPress,
  topKeyUp:       eventTypes.keyUp,
  topLoad:        eventTypes.load,
  topMouseDown:   eventTypes.mouseDown,
  topMouseMove:   eventTypes.mouseMove,
  topMouseOut:    eventTypes.mouseOut,
  topMouseOver:   eventTypes.mouseOver,
  topMouseUp:     eventTypes.mouseUp,
  topPaste:       eventTypes.paste,
  topReset:       eventTypes.reset,
  topScroll:      eventTypes.scroll,
  topSubmit:      eventTypes.submit,
  topTouchCancel: eventTypes.touchCancel,
  topTouchEnd:    eventTypes.touchEnd,
  topTouchMove:   eventTypes.touchMove,
  topTouchStart:  eventTypes.touchStart,
  topWheel:       eventTypes.wheel
};

for (var type in topLevelEventsToDispatchConfig) {
  topLevelEventsToDispatchConfig[type].dependencies = [type];
}

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  /**
   * Same as the default implementation, except cancels the event when return
   * value is false. This behavior will be disabled in a future release.
   *
   * @param {object} Event to be dispatched.
   * @param {function} Application-level callback.
   * @param {string} domID DOM ID to pass to the callback.
   */
  executeDispatch: function(event, listener, domID) {
    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);

    ("production" !== process.env.NODE_ENV ? warning(
      typeof returnValue !== 'boolean',
      'Returning `false` from an event handler is deprecated and will be ' +
      'ignored in a future release. Instead, manually call ' +
      'e.stopPropagation() or e.preventDefault(), as appropriate.'
    ) : null);

    if (returnValue === false) {
      event.stopPropagation();
      event.preventDefault();
    }
  },

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case topLevelTypes.topInput:
      case topLevelTypes.topLoad:
      case topLevelTypes.topError:
      case topLevelTypes.topReset:
      case topLevelTypes.topSubmit:
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case topLevelTypes.topKeyPress:
        // FireFox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case topLevelTypes.topBlur:
      case topLevelTypes.topFocus:
        EventConstructor = SyntheticFocusEvent;
        break;
      case topLevelTypes.topClick:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topDoubleClick:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topMouseMove:
      case topLevelTypes.topMouseOut:
      case topLevelTypes.topMouseOver:
      case topLevelTypes.topMouseUp:
        EventConstructor = SyntheticMouseEvent;
        break;
      case topLevelTypes.topDrag:
      case topLevelTypes.topDragEnd:
      case topLevelTypes.topDragEnter:
      case topLevelTypes.topDragExit:
      case topLevelTypes.topDragLeave:
      case topLevelTypes.topDragOver:
      case topLevelTypes.topDragStart:
      case topLevelTypes.topDrop:
        EventConstructor = SyntheticDragEvent;
        break;
      case topLevelTypes.topTouchCancel:
      case topLevelTypes.topTouchEnd:
      case topLevelTypes.topTouchMove:
      case topLevelTypes.topTouchStart:
        EventConstructor = SyntheticTouchEvent;
        break;
      case topLevelTypes.topScroll:
        EventConstructor = SyntheticUIEvent;
        break;
      case topLevelTypes.topWheel:
        EventConstructor = SyntheticWheelEvent;
        break;
      case topLevelTypes.topCopy:
      case topLevelTypes.topCut:
      case topLevelTypes.topPaste:
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    ("production" !== process.env.NODE_ENV ? invariant(
      EventConstructor,
      'SimpleEventPlugin: Unhandled event type, `%s`.',
      topLevelType
    ) : invariant(EventConstructor));
    var event = EventConstructor.getPooled(
      dispatchConfig,
      topLevelTargetID,
      nativeEvent
    );
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }

};

module.exports = SimpleEventPlugin;

}).call(this,require('_process'))

},{"./EventConstants":223,"./EventPluginUtils":227,"./EventPropagators":228,"./SyntheticClipboardEvent":301,"./SyntheticDragEvent":303,"./SyntheticEvent":304,"./SyntheticFocusEvent":305,"./SyntheticKeyboardEvent":307,"./SyntheticMouseEvent":308,"./SyntheticTouchEvent":309,"./SyntheticUIEvent":310,"./SyntheticWheelEvent":311,"./getEventCharCode":331,"./invariant":344,"./keyOf":350,"./warning":363,"_process":166}],301:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticClipboardEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function(event) {
    return (
      'clipboardData' in event ?
        event.clipboardData :
        window.clipboardData
    );
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;

},{"./SyntheticEvent":304}],302:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticCompositionEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticCompositionEvent,
  CompositionEventInterface
);

module.exports = SyntheticCompositionEvent;

},{"./SyntheticEvent":304}],303:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticDragEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticMouseEvent = require("./SyntheticMouseEvent");

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;

},{"./SyntheticMouseEvent":308}],304:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticEvent
 * @typechecks static-only
 */

'use strict';

var PooledClass = require("./PooledClass");

var assign = require("./Object.assign");
var emptyFunction = require("./emptyFunction");
var getEventTarget = require("./getEventTarget");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: getEventTarget,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function(event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 */
function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  this.dispatchConfig = dispatchConfig;
  this.dispatchMarker = dispatchMarker;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      this[propName] = nativeEvent[propName];
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ?
    nativeEvent.defaultPrevented :
    nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
}

assign(SyntheticEvent.prototype, {

  preventDefault: function() {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (event.preventDefault) {
      event.preventDefault();
    } else {
      event.returnValue = false;
    }
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function() {
    var event = this.nativeEvent;
    if (event.stopPropagation) {
      event.stopPropagation();
    } else {
      event.cancelBubble = true;
    }
    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function() {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function() {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      this[propName] = null;
    }
    this.dispatchConfig = null;
    this.dispatchMarker = null;
    this.nativeEvent = null;
  }

});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function(Class, Interface) {
  var Super = this;

  var prototype = Object.create(Super.prototype);
  assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

module.exports = SyntheticEvent;

},{"./Object.assign":235,"./PooledClass":236,"./emptyFunction":323,"./getEventTarget":334}],305:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticFocusEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require("./SyntheticUIEvent");

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;

},{"./SyntheticUIEvent":310}],306:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticInputEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticInputEvent,
  InputEventInterface
);

module.exports = SyntheticInputEvent;

},{"./SyntheticEvent":304}],307:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticKeyboardEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require("./SyntheticUIEvent");

var getEventCharCode = require("./getEventCharCode");
var getEventKey = require("./getEventKey");
var getEventModifierState = require("./getEventModifierState");

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function(event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function(event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function(event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;

},{"./SyntheticUIEvent":310,"./getEventCharCode":331,"./getEventKey":332,"./getEventModifierState":333}],308:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticMouseEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require("./SyntheticUIEvent");
var ViewportMetrics = require("./ViewportMetrics");

var getEventModifierState = require("./getEventModifierState");

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function(event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function(event) {
    return event.relatedTarget || (
      ((event.fromElement === event.srcElement ? event.toElement : event.fromElement))
    );
  },
  // "Proprietary" Interface.
  pageX: function(event) {
    return 'pageX' in event ?
      event.pageX :
      event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function(event) {
    return 'pageY' in event ?
      event.pageY :
      event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;

},{"./SyntheticUIEvent":310,"./ViewportMetrics":313,"./getEventModifierState":333}],309:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticTouchEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require("./SyntheticUIEvent");

var getEventModifierState = require("./getEventModifierState");

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;

},{"./SyntheticUIEvent":310,"./getEventModifierState":333}],310:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticUIEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require("./SyntheticEvent");

var getEventTarget = require("./getEventTarget");

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function(event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target != null && target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function(event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;

},{"./SyntheticEvent":304,"./getEventTarget":334}],311:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticWheelEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticMouseEvent = require("./SyntheticMouseEvent");

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function(event) {
    return (
      'deltaX' in event ? event.deltaX :
      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
    );
  },
  deltaY: function(event) {
    return (
      'deltaY' in event ? event.deltaY :
      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
      'wheelDeltaY' in event ? -event.wheelDeltaY :
      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
      'wheelDelta' in event ? -event.wheelDelta : 0
    );
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;

},{"./SyntheticMouseEvent":308}],312:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Transaction
 */

'use strict';

var invariant = require("./invariant");

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM updates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var Mixin = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function() {
    this.transactionWrappers = this.getTransactionWrappers();
    if (!this.wrapperInitData) {
      this.wrapperInitData = [];
    } else {
      this.wrapperInitData.length = 0;
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function() {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} args... Arguments to pass to the method (optional).
   *                           Helps prevent need to bind in many cases.
   * @return Return value from `method`.
   */
  perform: function(method, scope, a, b, c, d, e, f) {
    ("production" !== process.env.NODE_ENV ? invariant(
      !this.isInTransaction(),
      'Transaction.perform(...): Cannot initialize a transaction when there ' +
      'is already an outstanding transaction.'
    ) : invariant(!this.isInTransaction()));
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {
          }
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function(startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ?
          wrapper.initialize.call(this) :
          null;
      } finally {
        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {
          }
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function(startIndex) {
    ("production" !== process.env.NODE_ENV ? invariant(
      this.isInTransaction(),
      'Transaction.closeAll(): Cannot close transaction when none are open.'
    ) : invariant(this.isInTransaction()));
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
          wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {
          }
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

var Transaction = {

  Mixin: Mixin,

  /**
   * Token to look for to determine if an error occured.
   */
  OBSERVED_ERROR: {}

};

module.exports = Transaction;

}).call(this,require('_process'))

},{"./invariant":344,"_process":166}],313:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ViewportMetrics
 */

'use strict';

var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function(scrollPosition) {
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;

},{}],314:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule accumulateInto
 */

'use strict';

var invariant = require("./invariant");

/**
 *
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  ("production" !== process.env.NODE_ENV ? invariant(
    next != null,
    'accumulateInto(...): Accumulated items must not be null or undefined.'
  ) : invariant(next != null));
  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  var currentIsArray = Array.isArray(current);
  var nextIsArray = Array.isArray(next);

  if (currentIsArray && nextIsArray) {
    current.push.apply(current, next);
    return current;
  }

  if (currentIsArray) {
    current.push(next);
    return current;
  }

  if (nextIsArray) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;

}).call(this,require('_process'))

},{"./invariant":344,"_process":166}],315:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule adler32
 */

/* jslint bitwise:true */

'use strict';

var MOD = 65521;

// This is a clean-room implementation of adler32 designed for detecting
// if markup is not what we expect it to be. It does not need to be
// cryptographically strong, only reasonably good at detecting if markup
// generated on the server is different than that on the client.
function adler32(data) {
  var a = 1;
  var b = 0;
  for (var i = 0; i < data.length; i++) {
    a = (a + data.charCodeAt(i)) % MOD;
    b = (b + a) % MOD;
  }
  return a | (b << 16);
}

module.exports = adler32;

},{}],316:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelize
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function(_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;

},{}],317:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelizeStyleName
 * @typechecks
 */

"use strict";

var camelize = require("./camelize");

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;

},{"./camelize":316}],318:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule containsNode
 * @typechecks
 */

var isTextNode = require("./isTextNode");

/*jslint bitwise:true */

/**
 * Checks if a given DOM node contains or is another DOM node.
 *
 * @param {?DOMNode} outerNode Outer DOM node.
 * @param {?DOMNode} innerNode Inner DOM node.
 * @return {boolean} True if `outerNode` contains or is `innerNode`.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if (outerNode.contains) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

},{"./isTextNode":348}],319:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createArrayFromMixed
 * @typechecks
 */

var toArray = require("./toArray");

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj &&
    // arrays are objects, NodeLists are functions in Safari
    (typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    ('length' in obj) &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    (typeof obj.nodeType != 'number') &&
    (
      // a real array
      (// HTMLCollection/NodeList
      (Array.isArray(obj) ||
      // arguments
      ('callee' in obj) || 'item' in obj))
    )
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFromMixed = require('createArrayFromMixed');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFromMixed(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFromMixed(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFromMixed;

},{"./toArray":361}],320:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createFullPageComponent
 * @typechecks
 */

'use strict';

// Defeat circular references by requiring this directly.
var ReactClass = require("./ReactClass");
var ReactElement = require("./ReactElement");

var invariant = require("./invariant");

/**
 * Create a component that will throw an exception when unmounted.
 *
 * Components like <html> <head> and <body> can't be removed or added
 * easily in a cross-browser way, however it's valuable to be able to
 * take advantage of React's reconciliation for styling and <title>
 * management. So we just document it and throw in dangerous cases.
 *
 * @param {string} tag The tag to wrap
 * @return {function} convenience constructor of new component
 */
function createFullPageComponent(tag) {
  var elementFactory = ReactElement.createFactory(tag);

  var FullPageComponent = ReactClass.createClass({
    tagName: tag.toUpperCase(),
    displayName: 'ReactFullPageComponent' + tag,

    componentWillUnmount: function() {
      ("production" !== process.env.NODE_ENV ? invariant(
        false,
        '%s tried to unmount. Because of cross-browser quirks it is ' +
        'impossible to unmount some top-level components (eg <html>, <head>, ' +
        'and <body>) reliably and efficiently. To fix this, have a single ' +
        'top-level component that never unmounts render these elements.',
        this.constructor.displayName
      ) : invariant(false));
    },

    render: function() {
      return elementFactory(this.props);
    }
  });

  return FullPageComponent;
}

module.exports = createFullPageComponent;

}).call(this,require('_process'))

},{"./ReactClass":242,"./ReactElement":266,"./invariant":344,"_process":166}],321:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createNodesFromMarkup
 * @typechecks
 */

/*jslint evil: true, sub: true */

var ExecutionEnvironment = require("./ExecutionEnvironment");

var createArrayFromMixed = require("./createArrayFromMixed");
var getMarkupWrap = require("./getMarkupWrap");
var invariant = require("./invariant");

/**
 * Dummy container used to render all markup.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    ("production" !== process.env.NODE_ENV ? invariant(
      handleScript,
      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
    ) : invariant(handleScript));
    createArrayFromMixed(scripts).forEach(handleScript);
  }

  var nodes = createArrayFromMixed(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;

}).call(this,require('_process'))

},{"./ExecutionEnvironment":229,"./createArrayFromMixed":319,"./getMarkupWrap":336,"./invariant":344,"_process":166}],322:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule dangerousStyleValue
 * @typechecks static-only
 */

'use strict';

var CSSProperty = require("./CSSProperty");

var isUnitlessNumber = CSSProperty.isUnitlessNumber;

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 ||
      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;

},{"./CSSProperty":212}],323:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyFunction
 */

function makeEmptyFunction(arg) {
  return function() {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
function emptyFunction() {}

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function() { return this; };
emptyFunction.thatReturnsArgument = function(arg) { return arg; };

module.exports = emptyFunction;

},{}],324:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyObject
 */

"use strict";

var emptyObject = {};

if ("production" !== process.env.NODE_ENV) {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;

}).call(this,require('_process'))

},{"_process":166}],325:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule escapeTextContentForBrowser
 */

'use strict';

var ESCAPE_LOOKUP = {
  '&': '&amp;',
  '>': '&gt;',
  '<': '&lt;',
  '"': '&quot;',
  '\'': '&#x27;'
};

var ESCAPE_REGEX = /[&><"']/g;

function escaper(match) {
  return ESCAPE_LOOKUP[match];
}

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextContentForBrowser(text) {
  return ('' + text).replace(ESCAPE_REGEX, escaper);
}

module.exports = escapeTextContentForBrowser;

},{}],326:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule findDOMNode
 * @typechecks static-only
 */

'use strict';

var ReactCurrentOwner = require("./ReactCurrentOwner");
var ReactInstanceMap = require("./ReactInstanceMap");
var ReactMount = require("./ReactMount");

var invariant = require("./invariant");
var isNode = require("./isNode");
var warning = require("./warning");

/**
 * Returns the DOM node rendered by this element.
 *
 * @param {ReactComponent|DOMElement} componentOrElement
 * @return {DOMElement} The root node of this element.
 */
function findDOMNode(componentOrElement) {
  if ("production" !== process.env.NODE_ENV) {
    var owner = ReactCurrentOwner.current;
    if (owner !== null) {
      ("production" !== process.env.NODE_ENV ? warning(
        owner._warnedAboutRefsInRender,
        '%s is accessing getDOMNode or findDOMNode inside its render(). ' +
        'render() should be a pure function of props and state. It should ' +
        'never access something that requires stale data from the previous ' +
        'render, such as refs. Move this logic to componentDidMount and ' +
        'componentDidUpdate instead.',
        owner.getName() || 'A component'
      ) : null);
      owner._warnedAboutRefsInRender = true;
    }
  }
  if (componentOrElement == null) {
    return null;
  }
  if (isNode(componentOrElement)) {
    return componentOrElement;
  }
  if (ReactInstanceMap.has(componentOrElement)) {
    return ReactMount.getNodeFromInstance(componentOrElement);
  }
  ("production" !== process.env.NODE_ENV ? invariant(
    componentOrElement.render == null ||
    typeof componentOrElement.render !== 'function',
    'Component (with keys: %s) contains `render` method ' +
    'but is not mounted in the DOM',
    Object.keys(componentOrElement)
  ) : invariant(componentOrElement.render == null ||
  typeof componentOrElement.render !== 'function'));
  ("production" !== process.env.NODE_ENV ? invariant(
    false,
    'Element appears to be neither ReactComponent nor DOMNode (keys: %s)',
    Object.keys(componentOrElement)
  ) : invariant(false));
}

module.exports = findDOMNode;

}).call(this,require('_process'))

},{"./ReactCurrentOwner":248,"./ReactInstanceMap":276,"./ReactMount":279,"./invariant":344,"./isNode":346,"./warning":363,"_process":166}],327:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule flattenChildren
 */

'use strict';

var traverseAllChildren = require("./traverseAllChildren");
var warning = require("./warning");

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 */
function flattenSingleChildIntoContext(traverseContext, child, name) {
  // We found a component instance.
  var result = traverseContext;
  var keyUnique = !result.hasOwnProperty(name);
  if ("production" !== process.env.NODE_ENV) {
    ("production" !== process.env.NODE_ENV ? warning(
      keyUnique,
      'flattenChildren(...): Encountered two children with the same key, ' +
      '`%s`. Child keys must be unique; when two children share a key, only ' +
      'the first child will be used.',
      name
    ) : null);
  }
  if (keyUnique && child != null) {
    result[name] = child;
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children) {
  if (children == null) {
    return children;
  }
  var result = {};
  traverseAllChildren(children, flattenSingleChildIntoContext, result);
  return result;
}

module.exports = flattenChildren;

}).call(this,require('_process'))

},{"./traverseAllChildren":362,"./warning":363,"_process":166}],328:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule focusNode
 */

"use strict";

/**
 * @param {DOMElement} node input/textarea to focus
 */
function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch(e) {
  }
}

module.exports = focusNode;

},{}],329:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule forEachAccumulated
 */

'use strict';

/**
 * @param {array} an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */
var forEachAccumulated = function(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
};

module.exports = forEachAccumulated;

},{}],330:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getActiveElement
 * @typechecks
 */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document body is not yet defined.
 */
function getActiveElement() /*?DOMElement*/ {
  try {
    return document.activeElement || document.body;
  } catch (e) {
    return document.body;
  }
}

module.exports = getActiveElement;

},{}],331:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventCharCode
 * @typechecks static-only
 */

'use strict';

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;

},{}],332:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventKey
 * @typechecks static-only
 */

'use strict';

var getEventCharCode = require("./getEventCharCode");

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;

},{"./getEventCharCode":331}],333:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventModifierState
 * @typechecks static-only
 */

'use strict';

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  /*jshint validthis:true */
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;

},{}],334:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventTarget
 * @typechecks static-only
 */

'use strict';

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;
  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;

},{}],335:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getIteratorFn
 * @typechecks static-only
 */

'use strict';

/* global Symbol */
var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (
    (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL])
  );
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;

},{}],336:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getMarkupWrap
 */

var ExecutionEnvironment = require("./ExecutionEnvironment");

var invariant = require("./invariant");

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */
var shouldWrap = {
  // Force wrapping for SVG elements because if they get created inside a <div>,
  // they will be initialized in the wrong namespace (and will not display).
  'circle': true,
  'clipPath': true,
  'defs': true,
  'ellipse': true,
  'g': true,
  'line': true,
  'linearGradient': true,
  'path': true,
  'polygon': true,
  'polyline': true,
  'radialGradient': true,
  'rect': true,
  'stop': true,
  'text': true
};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg>', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap,

  'circle': svgWrap,
  'clipPath': svgWrap,
  'defs': svgWrap,
  'ellipse': svgWrap,
  'g': svgWrap,
  'line': svgWrap,
  'linearGradient': svgWrap,
  'path': svgWrap,
  'polygon': svgWrap,
  'polyline': svgWrap,
  'radialGradient': svgWrap,
  'rect': svgWrap,
  'stop': svgWrap,
  'text': svgWrap
};

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}


module.exports = getMarkupWrap;

}).call(this,require('_process'))

},{"./ExecutionEnvironment":229,"./invariant":344,"_process":166}],337:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getNodeForCharacterOffset
 */

'use strict';

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;

},{}],338:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getReactRootElementInContainer
 */

'use strict';

var DOC_NODE_TYPE = 9;

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 *                                           a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

module.exports = getReactRootElementInContainer;

},{}],339:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getTextContentAccessor
 */

'use strict';

var ExecutionEnvironment = require("./ExecutionEnvironment");

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ?
      'textContent' :
      'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;

},{"./ExecutionEnvironment":229}],340:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getUnboundedScrollPosition
 * @typechecks
 */

"use strict";

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */
function getUnboundedScrollPosition(scrollable) {
  if (scrollable === window) {
    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;

},{}],341:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenate
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

},{}],342:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenateStyleName
 * @typechecks
 */

"use strict";

var hyphenate = require("./hyphenate");

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

},{"./hyphenate":341}],343:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule instantiateReactComponent
 * @typechecks static-only
 */

'use strict';

var ReactCompositeComponent = require("./ReactCompositeComponent");
var ReactEmptyComponent = require("./ReactEmptyComponent");
var ReactNativeComponent = require("./ReactNativeComponent");

var assign = require("./Object.assign");
var invariant = require("./invariant");
var warning = require("./warning");

// To avoid a cyclic dependency, we create the final class in this module
var ReactCompositeComponentWrapper = function() { };
assign(
  ReactCompositeComponentWrapper.prototype,
  ReactCompositeComponent.Mixin,
  {
    _instantiateReactComponent: instantiateReactComponent
  }
);

/**
 * Check if the type reference is a known internal type. I.e. not a user
 * provided composite type.
 *
 * @param {function} type
 * @return {boolean} Returns true if this is a valid internal type.
 */
function isInternalComponentType(type) {
  return (
    typeof type === 'function' &&
    typeof type.prototype !== 'undefined' &&
    typeof type.prototype.mountComponent === 'function' &&
    typeof type.prototype.receiveComponent === 'function'
  );
}

/**
 * Given a ReactNode, create an instance that will actually be mounted.
 *
 * @param {ReactNode} node
 * @param {*} parentCompositeType The composite type that resolved this.
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(node, parentCompositeType) {
  var instance;

  if (node === null || node === false) {
    node = ReactEmptyComponent.emptyElement;
  }

  if (typeof node === 'object') {
    var element = node;
    if ("production" !== process.env.NODE_ENV) {
      ("production" !== process.env.NODE_ENV ? warning(
        element && (typeof element.type === 'function' ||
                    typeof element.type === 'string'),
        'Only functions or strings can be mounted as React components.'
      ) : null);
    }

    // Special case string values
    if (parentCompositeType === element.type &&
        typeof element.type === 'string') {
      // Avoid recursion if the wrapper renders itself.
      instance = ReactNativeComponent.createInternalComponent(element);
      // All native components are currently wrapped in a composite so we're
      // safe to assume that this is what we should instantiate.
    } else if (isInternalComponentType(element.type)) {
      // This is temporarily available for custom components that are not string
      // represenations. I.e. ART. Once those are updated to use the string
      // representation, we can drop this code path.
      instance = new element.type(element);
    } else {
      instance = new ReactCompositeComponentWrapper();
    }
  } else if (typeof node === 'string' || typeof node === 'number') {
    instance = ReactNativeComponent.createInstanceForText(node);
  } else {
    ("production" !== process.env.NODE_ENV ? invariant(
      false,
      'Encountered invalid React node of type %s',
      typeof node
    ) : invariant(false));
  }

  if ("production" !== process.env.NODE_ENV) {
    ("production" !== process.env.NODE_ENV ? warning(
      typeof instance.construct === 'function' &&
      typeof instance.mountComponent === 'function' &&
      typeof instance.receiveComponent === 'function' &&
      typeof instance.unmountComponent === 'function',
      'Only React Components can be mounted.'
    ) : null);
  }

  // Sets up the instance. This can probably just move into the constructor now.
  instance.construct(node);

  // These two fields are used by the DOM and ART diffing algorithms
  // respectively. Instead of using expandos on components, we should be
  // storing the state needed by the diffing algorithms elsewhere.
  instance._mountIndex = 0;
  instance._mountImage = null;

  if ("production" !== process.env.NODE_ENV) {
    instance._isOwnerNecessary = false;
    instance._warnedAboutRefsInRender = false;
  }

  // Internal instances should fully constructed at this point, so they should
  // not get any new fields added to them at this point.
  if ("production" !== process.env.NODE_ENV) {
    if (Object.preventExtensions) {
      Object.preventExtensions(instance);
    }
  }

  return instance;
}

module.exports = instantiateReactComponent;

}).call(this,require('_process'))

},{"./Object.assign":235,"./ReactCompositeComponent":246,"./ReactEmptyComponent":268,"./ReactNativeComponent":282,"./invariant":344,"./warning":363,"_process":166}],344:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule invariant
 */

"use strict";

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if ("production" !== process.env.NODE_ENV) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        'Invariant Violation: ' +
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;

}).call(this,require('_process'))

},{"_process":166}],345:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */

'use strict';

var ExecutionEnvironment = require("./ExecutionEnvironment");

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature =
    document.implementation &&
    document.implementation.hasFeature &&
    // always returns true in newer browsers as per the standard.
    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
    document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM ||
      capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;

},{"./ExecutionEnvironment":229}],346:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isNode
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  return !!(object && (
    ((typeof Node === 'function' ? object instanceof Node : typeof object === 'object' &&
    typeof object.nodeType === 'number' &&
    typeof object.nodeName === 'string'))
  ));
}

module.exports = isNode;

},{}],347:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextInputElement
 */

'use strict';

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  return elem && (
    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type] || elem.nodeName === 'TEXTAREA')
  );
}

module.exports = isTextInputElement;

},{}],348:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextNode
 * @typechecks
 */

var isNode = require("./isNode");

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

},{"./isNode":346}],349:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyMirror
 * @typechecks static-only
 */

'use strict';

var invariant = require("./invariant");

/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
var keyMirror = function(obj) {
  var ret = {};
  var key;
  ("production" !== process.env.NODE_ENV ? invariant(
    obj instanceof Object && !Array.isArray(obj),
    'keyMirror(...): Argument must be an object.'
  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;

}).call(this,require('_process'))

},{"./invariant":344,"_process":166}],350:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyOf
 */

/**
 * Allows extraction of a minified key. Let's the build system minify keys
 * without loosing the ability to dynamically use key strings as values
 * themselves. Pass in an object with a single key/val pair and it will return
 * you the string key of that single record. Suppose you want to grab the
 * value for a key 'className' inside of an object. Key/val minification may
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
 * reuse those resolutions.
 */
var keyOf = function(oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};


module.exports = keyOf;

},{}],351:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule mapObject
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Executes the provided `callback` once for each enumerable own property in the
 * object and constructs a new object from the results. The `callback` is
 * invoked with three arguments:
 *
 *  - the property value
 *  - the property name
 *  - the object being traversed
 *
 * Properties that are added after the call to `mapObject` will not be visited
 * by `callback`. If the values of existing properties are changed, the value
 * passed to `callback` will be the value at the time `mapObject` visits them.
 * Properties that are deleted before being visited are not visited.
 *
 * @grep function objectMap()
 * @grep function objMap()
 *
 * @param {?object} object
 * @param {function} callback
 * @param {*} context
 * @return {?object}
 */
function mapObject(object, callback, context) {
  if (!object) {
    return null;
  }
  var result = {};
  for (var name in object) {
    if (hasOwnProperty.call(object, name)) {
      result[name] = callback.call(context, object[name], name, object);
    }
  }
  return result;
}

module.exports = mapObject;

},{}],352:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule memoizeStringOnly
 * @typechecks static-only
 */

'use strict';

/**
 * Memoizes the return value of a function that accepts one string argument.
 *
 * @param {function} callback
 * @return {function}
 */
function memoizeStringOnly(callback) {
  var cache = {};
  return function(string) {
    if (!cache.hasOwnProperty(string)) {
      cache[string] = callback.call(this, string);
    }
    return cache[string];
  };
}

module.exports = memoizeStringOnly;

},{}],353:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule onlyChild
 */
'use strict';

var ReactElement = require("./ReactElement");

var invariant = require("./invariant");

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection. The current implementation of this
 * function assumes that a single child gets passed without a wrapper, but the
 * purpose of this helper function is to abstract away the particular structure
 * of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactComponent} The first and only `ReactComponent` contained in the
 * structure.
 */
function onlyChild(children) {
  ("production" !== process.env.NODE_ENV ? invariant(
    ReactElement.isValidElement(children),
    'onlyChild must be passed a children with exactly one child.'
  ) : invariant(ReactElement.isValidElement(children)));
  return children;
}

module.exports = onlyChild;

}).call(this,require('_process'))

},{"./ReactElement":266,"./invariant":344,"_process":166}],354:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performance
 * @typechecks
 */

"use strict";

var ExecutionEnvironment = require("./ExecutionEnvironment");

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance =
    window.performance ||
    window.msPerformance ||
    window.webkitPerformance;
}

module.exports = performance || {};

},{"./ExecutionEnvironment":229}],355:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performanceNow
 * @typechecks
 */

var performance = require("./performance");

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (!performance || !performance.now) {
  performance = Date;
}

var performanceNow = performance.now.bind(performance);

module.exports = performanceNow;

},{"./performance":354}],356:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule quoteAttributeValueForBrowser
 */

'use strict';

var escapeTextContentForBrowser = require("./escapeTextContentForBrowser");

/**
 * Escapes attribute value to prevent scripting attacks.
 *
 * @param {*} value Value to escape.
 * @return {string} An escaped string.
 */
function quoteAttributeValueForBrowser(value) {
  return '"' + escapeTextContentForBrowser(value) + '"';
}

module.exports = quoteAttributeValueForBrowser;

},{"./escapeTextContentForBrowser":325}],357:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setInnerHTML
 */

/* globals MSApp */

'use strict';

var ExecutionEnvironment = require("./ExecutionEnvironment");

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = function(node, html) {
  node.innerHTML = html;
};

// Win8 apps: Allow all html to be inserted
if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
  setInnerHTML = function(node, html) {
    MSApp.execUnsafeLocalFunction(function() {
      node.innerHTML = html;
    });
  };
}

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function(node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) ||
          html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        node.innerHTML = '\uFEFF' + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
}

module.exports = setInnerHTML;

},{"./ExecutionEnvironment":229}],358:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setTextContent
 */

'use strict';

var ExecutionEnvironment = require("./ExecutionEnvironment");
var escapeTextContentForBrowser = require("./escapeTextContentForBrowser");
var setInnerHTML = require("./setInnerHTML");

/**
 * Set the textContent property of a node, ensuring that whitespace is preserved
 * even in IE8. innerText is a poor substitute for textContent and, among many
 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
 * as it should.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function(node, text) {
  node.textContent = text;
};

if (ExecutionEnvironment.canUseDOM) {
  if (!('textContent' in document.documentElement)) {
    setTextContent = function(node, text) {
      setInnerHTML(node, escapeTextContentForBrowser(text));
    };
  }
}

module.exports = setTextContent;

},{"./ExecutionEnvironment":229,"./escapeTextContentForBrowser":325,"./setInnerHTML":357}],359:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shallowEqual
 */

'use strict';

/**
 * Performs equality by iterating through keys on an object and returning
 * false when any key has values which are not strictly equal between
 * objA and objB. Returns true when the values of all keys are strictly equal.
 *
 * @return {boolean}
 */
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }
  var key;
  // Test for A's keys different from B.
  for (key in objA) {
    if (objA.hasOwnProperty(key) &&
        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
      return false;
    }
  }
  // Test for B's keys missing from A.
  for (key in objB) {
    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
      return false;
    }
  }
  return true;
}

module.exports = shallowEqual;

},{}],360:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shouldUpdateReactComponent
 * @typechecks static-only
 */

'use strict';

var warning = require("./warning");

/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */
function shouldUpdateReactComponent(prevElement, nextElement) {
  if (prevElement != null && nextElement != null) {
    var prevType = typeof prevElement;
    var nextType = typeof nextElement;
    if (prevType === 'string' || prevType === 'number') {
      return (nextType === 'string' || nextType === 'number');
    } else {
      if (nextType === 'object' &&
          prevElement.type === nextElement.type &&
          prevElement.key === nextElement.key) {
        var ownersMatch = prevElement._owner === nextElement._owner;
        var prevName = null;
        var nextName = null;
        var nextDisplayName = null;
        if ("production" !== process.env.NODE_ENV) {
          if (!ownersMatch) {
            if (prevElement._owner != null &&
                prevElement._owner.getPublicInstance() != null &&
                prevElement._owner.getPublicInstance().constructor != null) {
              prevName =
                prevElement._owner.getPublicInstance().constructor.displayName;
            }
            if (nextElement._owner != null &&
                nextElement._owner.getPublicInstance() != null &&
                nextElement._owner.getPublicInstance().constructor != null) {
              nextName =
                nextElement._owner.getPublicInstance().constructor.displayName;
            }
            if (nextElement.type != null &&
                nextElement.type.displayName != null) {
              nextDisplayName = nextElement.type.displayName;
            }
            if (nextElement.type != null && typeof nextElement.type === 'string') {
              nextDisplayName = nextElement.type;
            }
            if (typeof nextElement.type !== 'string' ||
                nextElement.type === 'input' ||
                nextElement.type === 'textarea') {
              if ((prevElement._owner != null &&
                  prevElement._owner._isOwnerNecessary === false) ||
                  (nextElement._owner != null &&
                  nextElement._owner._isOwnerNecessary === false)) {
                if (prevElement._owner != null) {
                  prevElement._owner._isOwnerNecessary = true;
                }
                if (nextElement._owner != null) {
                  nextElement._owner._isOwnerNecessary = true;
                }
                ("production" !== process.env.NODE_ENV ? warning(
                  false,
                  '<%s /> is being rendered by both %s and %s using the same ' +
                  'key (%s) in the same place. Currently, this means that ' +
                  'they don\'t preserve state. This behavior should be very ' +
                  'rare so we\'re considering deprecating it. Please contact ' +
                  'the React team and explain your use case so that we can ' +
                  'take that into consideration.',
                  nextDisplayName || 'Unknown Component',
                  prevName || '[Unknown]',
                  nextName || '[Unknown]',
                  prevElement.key
                ) : null);
              }
            }
          }
        }
        return ownersMatch;
      }
    }
  }
  return false;
}

module.exports = shouldUpdateReactComponent;

}).call(this,require('_process'))

},{"./warning":363,"_process":166}],361:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule toArray
 * @typechecks
 */

var invariant = require("./invariant");

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFromMixed.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
  // old versions of Safari).
  ("production" !== process.env.NODE_ENV ? invariant(
    !Array.isArray(obj) &&
    (typeof obj === 'object' || typeof obj === 'function'),
    'toArray: Array-like object expected'
  ) : invariant(!Array.isArray(obj) &&
  (typeof obj === 'object' || typeof obj === 'function')));

  ("production" !== process.env.NODE_ENV ? invariant(
    typeof length === 'number',
    'toArray: Object needs a length property'
  ) : invariant(typeof length === 'number'));

  ("production" !== process.env.NODE_ENV ? invariant(
    length === 0 ||
    (length - 1) in obj,
    'toArray: Object should have keys for indices'
  ) : invariant(length === 0 ||
  (length - 1) in obj));

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

module.exports = toArray;

}).call(this,require('_process'))

},{"./invariant":344,"_process":166}],362:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule traverseAllChildren
 */

'use strict';

var ReactElement = require("./ReactElement");
var ReactFragment = require("./ReactFragment");
var ReactInstanceHandles = require("./ReactInstanceHandles");

var getIteratorFn = require("./getIteratorFn");
var invariant = require("./invariant");
var warning = require("./warning");

var SEPARATOR = ReactInstanceHandles.SEPARATOR;
var SUBSEPARATOR = ':';

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var userProvidedKeyEscaperLookup = {
  '=': '=0',
  '.': '=1',
  ':': '=2'
};

var userProvidedKeyEscapeRegex = /[=.:]/g;

var didWarnAboutMaps = false;

function userProvidedKeyEscaper(match) {
  return userProvidedKeyEscaperLookup[match];
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  if (component && component.key != null) {
    // Explicit key
    return wrapUserProvidedKey(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * Escape a component key so that it is safe to use in a reactid.
 *
 * @param {*} key Component key to be escaped.
 * @return {string} An escaped string.
 */
function escapeUserProvidedKey(text) {
  return ('' + text).replace(
    userProvidedKeyEscapeRegex,
    userProvidedKeyEscaper
  );
}

/**
 * Wrap a `key` value explicitly provided by the user to distinguish it from
 * implicitly-generated keys generated by a component's index in its parent.
 *
 * @param {string} key Value of a user-provided `key` attribute
 * @return {string}
 */
function wrapUserProvidedKey(key) {
  return '$' + escapeUserProvidedKey(key);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!number} indexSoFar Number of children encountered until this point.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(
  children,
  nameSoFar,
  indexSoFar,
  callback,
  traverseContext
) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null ||
      type === 'string' ||
      type === 'number' ||
      ReactElement.isValidElement(children)) {
    callback(
      traverseContext,
      children,
      // If it's the only child, treat the name as if it was wrapped in an array
      // so that it's consistent if the number of children grows.
      nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar,
      indexSoFar
    );
    return 1;
  }

  var child, nextName, nextIndex;
  var subtreeCount = 0; // Count of children found in the current subtree.

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = (
        (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
        getComponentKey(child, i)
      );
      nextIndex = indexSoFar + subtreeCount;
      subtreeCount += traverseAllChildrenImpl(
        child,
        nextName,
        nextIndex,
        callback,
        traverseContext
      );
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = (
            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
            getComponentKey(child, ii++)
          );
          nextIndex = indexSoFar + subtreeCount;
          subtreeCount += traverseAllChildrenImpl(
            child,
            nextName,
            nextIndex,
            callback,
            traverseContext
          );
        }
      } else {
        if ("production" !== process.env.NODE_ENV) {
          ("production" !== process.env.NODE_ENV ? warning(
            didWarnAboutMaps,
            'Using Maps as children is not yet fully supported. It is an ' +
            'experimental feature that might be removed. Convert it to a ' +
            'sequence / iterable of keyed ReactElements instead.'
          ) : null);
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = (
              (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
              wrapUserProvidedKey(entry[0]) + SUBSEPARATOR +
              getComponentKey(child, 0)
            );
            nextIndex = indexSoFar + subtreeCount;
            subtreeCount += traverseAllChildrenImpl(
              child,
              nextName,
              nextIndex,
              callback,
              traverseContext
            );
          }
        }
      }
    } else if (type === 'object') {
      ("production" !== process.env.NODE_ENV ? invariant(
        children.nodeType !== 1,
        'traverseAllChildren(...): Encountered an invalid child; DOM ' +
        'elements are not valid children of React components.'
      ) : invariant(children.nodeType !== 1));
      var fragment = ReactFragment.extract(children);
      for (var key in fragment) {
        if (fragment.hasOwnProperty(key)) {
          child = fragment[key];
          nextName = (
            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
            wrapUserProvidedKey(key) + SUBSEPARATOR +
            getComponentKey(child, 0)
          );
          nextIndex = indexSoFar + subtreeCount;
          subtreeCount += traverseAllChildrenImpl(
            child,
            nextName,
            nextIndex,
            callback,
            traverseContext
          );
        }
      }
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
}

module.exports = traverseAllChildren;

}).call(this,require('_process'))

},{"./ReactElement":266,"./ReactFragment":272,"./ReactInstanceHandles":275,"./getIteratorFn":335,"./invariant":344,"./warning":363,"_process":166}],363:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule warning
 */

"use strict";

var emptyFunction = require("./emptyFunction");

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if ("production" !== process.env.NODE_ENV) {
  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
    if (format === undefined) {
      throw new Error(
        '`warning(condition, format, ...args)` requires a warning ' +
        'message argument'
      );
    }

    if (format.length < 10 || /^[s\W]*$/.test(format)) {
      throw new Error(
        'The warning format should be able to uniquely identify this ' +
        'warning. Please, use a more descriptive format than: ' + format
      );
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];});
      console.warn(message);
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch(x) {}
    }
  };
}

module.exports = warning;

}).call(this,require('_process'))

},{"./emptyFunction":323,"_process":166}],364:[function(require,module,exports){
module.exports = require('./lib/React');

},{"./lib/React":237}],365:[function(require,module,exports){
!function() {
  var topojson = {
    version: "1.6.19",
    mesh: function(topology) { return object(topology, meshArcs.apply(this, arguments)); },
    meshArcs: meshArcs,
    merge: function(topology) { return object(topology, mergeArcs.apply(this, arguments)); },
    mergeArcs: mergeArcs,
    feature: featureOrCollection,
    neighbors: neighbors,
    presimplify: presimplify
  };

  function stitchArcs(topology, arcs) {
    var stitchedArcs = {},
        fragmentByStart = {},
        fragmentByEnd = {},
        fragments = [],
        emptyIndex = -1;

    // Stitch empty arcs first, since they may be subsumed by other arcs.
    arcs.forEach(function(i, j) {
      var arc = topology.arcs[i < 0 ? ~i : i], t;
      if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {
        t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;
      }
    });

    arcs.forEach(function(i) {
      var e = ends(i),
          start = e[0],
          end = e[1],
          f, g;

      if (f = fragmentByEnd[start]) {
        delete fragmentByEnd[f.end];
        f.push(i);
        f.end = end;
        if (g = fragmentByStart[end]) {
          delete fragmentByStart[g.start];
          var fg = g === f ? f : f.concat(g);
          fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;
        } else {
          fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
        }
      } else if (f = fragmentByStart[end]) {
        delete fragmentByStart[f.start];
        f.unshift(i);
        f.start = start;
        if (g = fragmentByEnd[start]) {
          delete fragmentByEnd[g.end];
          var gf = g === f ? f : g.concat(f);
          fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;
        } else {
          fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
        }
      } else {
        f = [i];
        fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;
      }
    });

    function ends(i) {
      var arc = topology.arcs[i < 0 ? ~i : i], p0 = arc[0], p1;
      if (topology.transform) p1 = [0, 0], arc.forEach(function(dp) { p1[0] += dp[0], p1[1] += dp[1]; });
      else p1 = arc[arc.length - 1];
      return i < 0 ? [p1, p0] : [p0, p1];
    }

    function flush(fragmentByEnd, fragmentByStart) {
      for (var k in fragmentByEnd) {
        var f = fragmentByEnd[k];
        delete fragmentByStart[f.start];
        delete f.start;
        delete f.end;
        f.forEach(function(i) { stitchedArcs[i < 0 ? ~i : i] = 1; });
        fragments.push(f);
      }
    }

    flush(fragmentByEnd, fragmentByStart);
    flush(fragmentByStart, fragmentByEnd);
    arcs.forEach(function(i) { if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]); });

    return fragments;
  }

  function meshArcs(topology, o, filter) {
    var arcs = [];

    if (arguments.length > 1) {
      var geomsByArc = [],
          geom;

      function arc(i) {
        var j = i < 0 ? ~i : i;
        (geomsByArc[j] || (geomsByArc[j] = [])).push({i: i, g: geom});
      }

      function line(arcs) {
        arcs.forEach(arc);
      }

      function polygon(arcs) {
        arcs.forEach(line);
      }

      function geometry(o) {
        if (o.type === "GeometryCollection") o.geometries.forEach(geometry);
        else if (o.type in geometryType) geom = o, geometryType[o.type](o.arcs);
      }

      var geometryType = {
        LineString: line,
        MultiLineString: polygon,
        Polygon: polygon,
        MultiPolygon: function(arcs) { arcs.forEach(polygon); }
      };

      geometry(o);

      geomsByArc.forEach(arguments.length < 3
          ? function(geoms) { arcs.push(geoms[0].i); }
          : function(geoms) { if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i); });
    } else {
      for (var i = 0, n = topology.arcs.length; i < n; ++i) arcs.push(i);
    }

    return {type: "MultiLineString", arcs: stitchArcs(topology, arcs)};
  }

  function mergeArcs(topology, objects) {
    var polygonsByArc = {},
        polygons = [],
        components = [];

    objects.forEach(function(o) {
      if (o.type === "Polygon") register(o.arcs);
      else if (o.type === "MultiPolygon") o.arcs.forEach(register);
    });

    function register(polygon) {
      polygon.forEach(function(ring) {
        ring.forEach(function(arc) {
          (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);
        });
      });
      polygons.push(polygon);
    }

    function exterior(ring) {
      return cartesianRingArea(object(topology, {type: "Polygon", arcs: [ring]}).coordinates[0]) > 0; // TODO allow spherical?
    }

    polygons.forEach(function(polygon) {
      if (!polygon._) {
        var component = [],
            neighbors = [polygon];
        polygon._ = 1;
        components.push(component);
        while (polygon = neighbors.pop()) {
          component.push(polygon);
          polygon.forEach(function(ring) {
            ring.forEach(function(arc) {
              polygonsByArc[arc < 0 ? ~arc : arc].forEach(function(polygon) {
                if (!polygon._) {
                  polygon._ = 1;
                  neighbors.push(polygon);
                }
              });
            });
          });
        }
      }
    });

    polygons.forEach(function(polygon) {
      delete polygon._;
    });

    return {
      type: "MultiPolygon",
      arcs: components.map(function(polygons) {
        var arcs = [];

        // Extract the exterior (unique) arcs.
        polygons.forEach(function(polygon) {
          polygon.forEach(function(ring) {
            ring.forEach(function(arc) {
              if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {
                arcs.push(arc);
              }
            });
          });
        });

        // Stitch the arcs into one or more rings.
        arcs = stitchArcs(topology, arcs);

        // If more than one ring is returned,
        // at most one of these rings can be the exterior;
        // this exterior ring has the same winding order
        // as any exterior ring in the original polygons.
        if ((n = arcs.length) > 1) {
          var sgn = exterior(polygons[0][0]);
          for (var i = 0, t; i < n; ++i) {
            if (sgn === exterior(arcs[i])) {
              t = arcs[0], arcs[0] = arcs[i], arcs[i] = t;
              break;
            }
          }
        }

        return arcs;
      })
    };
  }

  function featureOrCollection(topology, o) {
    return o.type === "GeometryCollection" ? {
      type: "FeatureCollection",
      features: o.geometries.map(function(o) { return feature(topology, o); })
    } : feature(topology, o);
  }

  function feature(topology, o) {
    var f = {
      type: "Feature",
      id: o.id,
      properties: o.properties || {},
      geometry: object(topology, o)
    };
    if (o.id == null) delete f.id;
    return f;
  }

  function object(topology, o) {
    var absolute = transformAbsolute(topology.transform),
        arcs = topology.arcs;

    function arc(i, points) {
      if (points.length) points.pop();
      for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length, p; k < n; ++k) {
        points.push(p = a[k].slice());
        absolute(p, k);
      }
      if (i < 0) reverse(points, n);
    }

    function point(p) {
      p = p.slice();
      absolute(p, 0);
      return p;
    }

    function line(arcs) {
      var points = [];
      for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);
      if (points.length < 2) points.push(points[0].slice());
      return points;
    }

    function ring(arcs) {
      var points = line(arcs);
      while (points.length < 4) points.push(points[0].slice());
      return points;
    }

    function polygon(arcs) {
      return arcs.map(ring);
    }

    function geometry(o) {
      var t = o.type;
      return t === "GeometryCollection" ? {type: t, geometries: o.geometries.map(geometry)}
          : t in geometryType ? {type: t, coordinates: geometryType[t](o)}
          : null;
    }

    var geometryType = {
      Point: function(o) { return point(o.coordinates); },
      MultiPoint: function(o) { return o.coordinates.map(point); },
      LineString: function(o) { return line(o.arcs); },
      MultiLineString: function(o) { return o.arcs.map(line); },
      Polygon: function(o) { return polygon(o.arcs); },
      MultiPolygon: function(o) { return o.arcs.map(polygon); }
    };

    return geometry(o);
  }

  function reverse(array, n) {
    var t, j = array.length, i = j - n; while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;
  }

  function bisect(a, x) {
    var lo = 0, hi = a.length;
    while (lo < hi) {
      var mid = lo + hi >>> 1;
      if (a[mid] < x) lo = mid + 1;
      else hi = mid;
    }
    return lo;
  }

  function neighbors(objects) {
    var indexesByArc = {}, // arc index -> array of object indexes
        neighbors = objects.map(function() { return []; });

    function line(arcs, i) {
      arcs.forEach(function(a) {
        if (a < 0) a = ~a;
        var o = indexesByArc[a];
        if (o) o.push(i);
        else indexesByArc[a] = [i];
      });
    }

    function polygon(arcs, i) {
      arcs.forEach(function(arc) { line(arc, i); });
    }

    function geometry(o, i) {
      if (o.type === "GeometryCollection") o.geometries.forEach(function(o) { geometry(o, i); });
      else if (o.type in geometryType) geometryType[o.type](o.arcs, i);
    }

    var geometryType = {
      LineString: line,
      MultiLineString: polygon,
      Polygon: polygon,
      MultiPolygon: function(arcs, i) { arcs.forEach(function(arc) { polygon(arc, i); }); }
    };

    objects.forEach(geometry);

    for (var i in indexesByArc) {
      for (var indexes = indexesByArc[i], m = indexes.length, j = 0; j < m; ++j) {
        for (var k = j + 1; k < m; ++k) {
          var ij = indexes[j], ik = indexes[k], n;
          if ((n = neighbors[ij])[i = bisect(n, ik)] !== ik) n.splice(i, 0, ik);
          if ((n = neighbors[ik])[i = bisect(n, ij)] !== ij) n.splice(i, 0, ij);
        }
      }
    }

    return neighbors;
  }

  function presimplify(topology, triangleArea) {
    var absolute = transformAbsolute(topology.transform),
        relative = transformRelative(topology.transform),
        heap = minAreaHeap();

    if (!triangleArea) triangleArea = cartesianTriangleArea;

    topology.arcs.forEach(function(arc) {
      var triangles = [],
          maxArea = 0,
          triangle;

      // To store each point’s effective area, we create a new array rather than
      // extending the passed-in point to workaround a Chrome/V8 bug (getting
      // stuck in smi mode). For midpoints, the initial effective area of
      // Infinity will be computed in the next step.
      for (var i = 0, n = arc.length, p; i < n; ++i) {
        p = arc[i];
        absolute(arc[i] = [p[0], p[1], Infinity], i);
      }

      for (var i = 1, n = arc.length - 1; i < n; ++i) {
        triangle = arc.slice(i - 1, i + 2);
        triangle[1][2] = triangleArea(triangle);
        triangles.push(triangle);
        heap.push(triangle);
      }

      for (var i = 0, n = triangles.length; i < n; ++i) {
        triangle = triangles[i];
        triangle.previous = triangles[i - 1];
        triangle.next = triangles[i + 1];
      }

      while (triangle = heap.pop()) {
        var previous = triangle.previous,
            next = triangle.next;

        // If the area of the current point is less than that of the previous point
        // to be eliminated, use the latter's area instead. This ensures that the
        // current point cannot be eliminated without eliminating previously-
        // eliminated points.
        if (triangle[1][2] < maxArea) triangle[1][2] = maxArea;
        else maxArea = triangle[1][2];

        if (previous) {
          previous.next = next;
          previous[2] = triangle[2];
          update(previous);
        }

        if (next) {
          next.previous = previous;
          next[0] = triangle[0];
          update(next);
        }
      }

      arc.forEach(relative);
    });

    function update(triangle) {
      heap.remove(triangle);
      triangle[1][2] = triangleArea(triangle);
      heap.push(triangle);
    }

    return topology;
  };

  function cartesianRingArea(ring) {
    var i = -1,
        n = ring.length,
        a,
        b = ring[n - 1],
        area = 0;

    while (++i < n) {
      a = b;
      b = ring[i];
      area += a[0] * b[1] - a[1] * b[0];
    }

    return area * .5;
  }

  function cartesianTriangleArea(triangle) {
    var a = triangle[0], b = triangle[1], c = triangle[2];
    return Math.abs((a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]));
  }

  function compareArea(a, b) {
    return a[1][2] - b[1][2];
  }

  function minAreaHeap() {
    var heap = {},
        array = [],
        size = 0;

    heap.push = function(object) {
      up(array[object._ = size] = object, size++);
      return size;
    };

    heap.pop = function() {
      if (size <= 0) return;
      var removed = array[0], object;
      if (--size > 0) object = array[size], down(array[object._ = 0] = object, 0);
      return removed;
    };

    heap.remove = function(removed) {
      var i = removed._, object;
      if (array[i] !== removed) return; // invalid request
      if (i !== --size) object = array[size], (compareArea(object, removed) < 0 ? up : down)(array[object._ = i] = object, i);
      return i;
    };

    function up(object, i) {
      while (i > 0) {
        var j = ((i + 1) >> 1) - 1,
            parent = array[j];
        if (compareArea(object, parent) >= 0) break;
        array[parent._ = i] = parent;
        array[object._ = i = j] = object;
      }
    }

    function down(object, i) {
      while (true) {
        var r = (i + 1) << 1,
            l = r - 1,
            j = i,
            child = array[j];
        if (l < size && compareArea(array[l], child) < 0) child = array[j = l];
        if (r < size && compareArea(array[r], child) < 0) child = array[j = r];
        if (j === i) break;
        array[child._ = i] = child;
        array[object._ = i = j] = object;
      }
    }

    return heap;
  }

  function transformAbsolute(transform) {
    if (!transform) return noop;
    var x0,
        y0,
        kx = transform.scale[0],
        ky = transform.scale[1],
        dx = transform.translate[0],
        dy = transform.translate[1];
    return function(point, i) {
      if (!i) x0 = y0 = 0;
      point[0] = (x0 += point[0]) * kx + dx;
      point[1] = (y0 += point[1]) * ky + dy;
    };
  }

  function transformRelative(transform) {
    if (!transform) return noop;
    var x0,
        y0,
        kx = transform.scale[0],
        ky = transform.scale[1],
        dx = transform.translate[0],
        dy = transform.translate[1];
    return function(point, i) {
      if (!i) x0 = y0 = 0;
      var x1 = (point[0] - dx) / kx | 0,
          y1 = (point[1] - dy) / ky | 0;
      point[0] = x1 - x0;
      point[1] = y1 - y0;
      x0 = x1;
      y0 = y1;
    };
  }

  function noop() {}

  if (typeof define === "function" && define.amd) define(topojson);
  else if (typeof module === "object" && module.exports) module.exports = topojson;
  else this.topojson = topojson;
}();

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
